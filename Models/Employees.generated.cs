//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net.NetworkInformation;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

using NpgsqlTypes;

namespace DataModels
{
	/// <summary>
	/// Database       : employees
	/// Data Source    : tcp://localhost:5432
	/// Server Version : 12.1
	/// </summary>
	public partial class EmployeesDB : LinqToDB.Data.DataConnection
	{
		public ITable<Department>    Departments    { get { return this.GetTable<Department>(); } }
		public ITable<Employee>      Employees      { get { return this.GetTable<Employee>(); } }
		public ITable<EmployeeSkill> EmployeeSkills { get { return this.GetTable<EmployeeSkill>(); } }
		public ITable<Position>      Positions      { get { return this.GetTable<Position>(); } }
		public ITable<Skill>         Skills         { get { return this.GetTable<Skill>(); } }

		partial void InitMappingSchema()
		{
			MappingSchema.SetConvertExpression<object[], pg_control_checkpointResult>(tuple => new pg_control_checkpointResult() { checkpoint_lsn = (object)tuple[0], redo_lsn = (object)tuple[1], redo_wal_file = (string)tuple[2], timeline_id = (int?)tuple[3], prev_timeline_id = (int?)tuple[4], full_page_writes = (bool?)tuple[5], next_xid = (string)tuple[6], next_oid = (int?)tuple[7], next_multixact_id = (int?)tuple[8], next_multi_offset = (int?)tuple[9], oldest_xid = (int?)tuple[10], oldest_xid_dbid = (int?)tuple[11], oldest_active_xid = (int?)tuple[12], oldest_multi_xid = (int?)tuple[13], oldest_multi_dbid = (int?)tuple[14], oldest_commit_ts_xid = (int?)tuple[15], newest_commit_ts_xid = (int?)tuple[16], checkpoint_time = (DateTimeOffset?)tuple[17] });
			MappingSchema.SetConvertExpression<object[], pg_control_initResult>(tuple => new pg_control_initResult() { max_data_alignment = (int?)tuple[0], database_block_size = (int?)tuple[1], blocks_per_segment = (int?)tuple[2], wal_block_size = (int?)tuple[3], bytes_per_wal_segment = (int?)tuple[4], max_identifier_length = (int?)tuple[5], max_index_columns = (int?)tuple[6], max_toast_chunk_size = (int?)tuple[7], large_object_chunk_size = (int?)tuple[8], float4_pass_by_value = (bool?)tuple[9], float8_pass_by_value = (bool?)tuple[10], data_page_checksum_version = (int?)tuple[11] });
			MappingSchema.SetConvertExpression<object[], pg_control_recoveryResult>(tuple => new pg_control_recoveryResult() { min_recovery_end_lsn = (object)tuple[0], min_recovery_end_timeline = (int?)tuple[1], backup_start_lsn = (object)tuple[2], backup_end_lsn = (object)tuple[3], end_of_backup_record_required = (bool?)tuple[4] });
			MappingSchema.SetConvertExpression<object[], pg_control_systemResult>(tuple => new pg_control_systemResult() { pg_control_version = (int?)tuple[0], catalog_version_no = (int?)tuple[1], system_identifier = (long?)tuple[2], pg_control_last_modified = (DateTimeOffset?)tuple[3] });
			MappingSchema.SetConvertExpression<object[], pg_copy_logical_replication_slotResult>(tuple => new pg_copy_logical_replication_slotResult() { slot_name = (string)tuple[0], lsn = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_copy_physical_replication_slotResult>(tuple => new pg_copy_physical_replication_slotResult() { slot_name = (string)tuple[0], lsn = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_create_logical_replication_slotResult>(tuple => new pg_create_logical_replication_slotResult() { slot_name = (string)tuple[0], lsn = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_create_physical_replication_slotResult>(tuple => new pg_create_physical_replication_slotResult() { slot_name = (string)tuple[0], lsn = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_get_object_addressResult>(tuple => new pg_get_object_addressResult() { classid = (int?)tuple[0], objid = (int?)tuple[1], objsubid = (int?)tuple[2] });
			MappingSchema.SetConvertExpression<object[], pg_identify_objectResult>(tuple => new pg_identify_objectResult() { type = (string)tuple[0], schema = (string)tuple[1], name = (string)tuple[2], identity = (string)tuple[3] });
			MappingSchema.SetConvertExpression<object[], pg_identify_object_as_addressResult>(tuple => new pg_identify_object_as_addressResult() { type = (string)tuple[0], object_names = (object)tuple[1], object_args = (object)tuple[2] });
			MappingSchema.SetConvertExpression<object[], pg_last_committed_xactResult>(tuple => new pg_last_committed_xactResult() { xid = (int?)tuple[0], timestamp = (DateTimeOffset?)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_replication_slot_advanceResult>(tuple => new pg_replication_slot_advanceResult() { slot_name = (string)tuple[0], end_lsn = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_sequence_parametersResult>(tuple => new pg_sequence_parametersResult() { start_value = (long?)tuple[0], minimum_value = (long?)tuple[1], maximum_value = (long?)tuple[2], increment = (long?)tuple[3], cycle_option = (bool?)tuple[4], cache_size = (long?)tuple[5], data_type = (int?)tuple[6] });
			MappingSchema.SetConvertExpression<object[], pg_stat_fileResult>(tuple => new pg_stat_fileResult() { size = (long?)tuple[0], access = (DateTimeOffset?)tuple[1], modification = (DateTimeOffset?)tuple[2], change = (DateTimeOffset?)tuple[3], creation = (DateTimeOffset?)tuple[4], isdir = (bool?)tuple[5] });
			MappingSchema.SetConvertExpression<object[], pg_stat_get_archiverResult>(tuple => new pg_stat_get_archiverResult() { archived_count = (long?)tuple[0], last_archived_wal = (string)tuple[1], last_archived_time = (DateTimeOffset?)tuple[2], failed_count = (long?)tuple[3], last_failed_wal = (string)tuple[4], last_failed_time = (DateTimeOffset?)tuple[5], stats_reset = (DateTimeOffset?)tuple[6] });
			MappingSchema.SetConvertExpression<object[], pg_stat_get_subscriptionResult>(tuple => new pg_stat_get_subscriptionResult() { subid = (int?)tuple[0], relid = (int?)tuple[1], pid = (int?)tuple[2], received_lsn = (object)tuple[3], last_msg_send_time = (DateTimeOffset?)tuple[4], last_msg_receipt_time = (DateTimeOffset?)tuple[5], latest_end_lsn = (object)tuple[6], latest_end_time = (DateTimeOffset?)tuple[7] });
			MappingSchema.SetConvertExpression<object[], pg_stat_get_wal_receiverResult>(tuple => new pg_stat_get_wal_receiverResult() { pid = (int?)tuple[0], status = (string)tuple[1], receive_start_lsn = (object)tuple[2], receive_start_tli = (int?)tuple[3], received_lsn = (object)tuple[4], received_tli = (int?)tuple[5], last_msg_send_time = (DateTimeOffset?)tuple[6], last_msg_receipt_time = (DateTimeOffset?)tuple[7], latest_end_lsn = (object)tuple[8], latest_end_time = (DateTimeOffset?)tuple[9], slot_name = (string)tuple[10], sender_host = (string)tuple[11], sender_port = (int?)tuple[12], conninfo = (string)tuple[13] });
			MappingSchema.SetConvertExpression<object[], pg_walfile_name_offsetResult>(tuple => new pg_walfile_name_offsetResult() { file_name = (string)tuple[0], file_offset = (int?)tuple[1] });
		}

		public EmployeesDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public EmployeesDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region Table Functions

		#region PgExpandarray

		[Sql.TableFunction(Schema="information_schema", Name="_pg_expandarray")]
		public ITable<PgExpandarrayResult> PgExpandarray(object par16)
		{
			return this.GetTable<PgExpandarrayResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par16);
		}

		public partial class PgExpandarrayResult
		{
			public int? x { get; set; }
			public int? n { get; set; }
		}

		#endregion

		#region Aclexplode

		[Sql.TableFunction(Schema="pg_catalog", Name="aclexplode")]
		public ITable<AclexplodeResult> Aclexplode(object acl)
		{
			return this.GetTable<AclexplodeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				acl);
		}

		public partial class AclexplodeResult
		{
			public int?   grantor        { get; set; }
			public int?   grantee        { get; set; }
			public string privilege_type { get; set; }
			public bool?  is_grantable   { get; set; }
		}

		#endregion

		#region GenerateSeries

		[Sql.TableFunction(Schema="pg_catalog", Name="generate_series")]
		public ITable<GenerateSeriesResult> GenerateSeries(DateTimeOffset? par1901, DateTimeOffset? par1902, NpgsqlTimeSpan? par1903)
		{
			return this.GetTable<GenerateSeriesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par1901,
				par1902,
				par1903);
		}

		public partial class GenerateSeriesResult
		{
			public DateTimeOffset? generate_series { get; set; }
		}

		#endregion

		#region GenerateSubscripts

		[Sql.TableFunction(Schema="pg_catalog", Name="generate_subscripts")]
		public ITable<GenerateSubscriptsResult> GenerateSubscripts(object par1911, int? par1912)
		{
			return this.GetTable<GenerateSubscriptsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par1911,
				par1912);
		}

		public partial class GenerateSubscriptsResult
		{
			public int? generate_subscripts { get; set; }
		}

		#endregion

		#region JsonArrayElements

		[Sql.TableFunction(Schema="pg_catalog", Name="json_array_elements")]
		public ITable<JsonArrayElementsResult> JsonArrayElements(string from_json)
		{
			return this.GetTable<JsonArrayElementsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonArrayElementsResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonArrayElementsText

		[Sql.TableFunction(Schema="pg_catalog", Name="json_array_elements_text")]
		public ITable<JsonArrayElementsTextResult> JsonArrayElementsText(string from_json)
		{
			return this.GetTable<JsonArrayElementsTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonArrayElementsTextResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonEach

		[Sql.TableFunction(Schema="pg_catalog", Name="json_each")]
		public ITable<JsonEachResult> JsonEach(string from_json)
		{
			return this.GetTable<JsonEachResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonEachResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonEachText

		[Sql.TableFunction(Schema="pg_catalog", Name="json_each_text")]
		public ITable<JsonEachTextResult> JsonEachText(string from_json)
		{
			return this.GetTable<JsonEachTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonEachTextResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonObjectKeys

		[Sql.TableFunction(Schema="pg_catalog", Name="json_object_keys")]
		public ITable<JsonObjectKeysResult> JsonObjectKeys(string par3628)
		{
			return this.GetTable<JsonObjectKeysResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3628);
		}

		public partial class JsonObjectKeysResult
		{
			public string json_object_keys { get; set; }
		}

		#endregion

		#region JsonPopulateRecordset

		[Sql.TableFunction(Schema="pg_catalog", Name="json_populate_recordset")]
		public ITable<JsonPopulateRecordsetResult> JsonPopulateRecordset(object @base, string from_json, bool? use_json_as_text)
		{
			return this.GetTable<JsonPopulateRecordsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@base,
				from_json,
				use_json_as_text);
		}

		public partial class JsonPopulateRecordsetResult
		{
			public int? json_populate_recordset { get; set; }
		}

		#endregion

		#region JsonbArrayElements

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_array_elements")]
		public ITable<JsonbArrayElementsResult> JsonbArrayElements(string from_json)
		{
			return this.GetTable<JsonbArrayElementsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbArrayElementsResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonbArrayElementsText

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_array_elements_text")]
		public ITable<JsonbArrayElementsTextResult> JsonbArrayElementsText(string from_json)
		{
			return this.GetTable<JsonbArrayElementsTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbArrayElementsTextResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonbEach

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_each")]
		public ITable<JsonbEachResult> JsonbEach(string from_json)
		{
			return this.GetTable<JsonbEachResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbEachResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonbEachText

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_each_text")]
		public ITable<JsonbEachTextResult> JsonbEachText(string from_json)
		{
			return this.GetTable<JsonbEachTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbEachTextResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonbObjectKeys

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_object_keys")]
		public ITable<JsonbObjectKeysResult> JsonbObjectKeys(string par3741)
		{
			return this.GetTable<JsonbObjectKeysResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3741);
		}

		public partial class JsonbObjectKeysResult
		{
			public string jsonb_object_keys { get; set; }
		}

		#endregion

		#region JsonbPathQuery

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_path_query")]
		public ITable<JsonbPathQueryResult> JsonbPathQuery(string target, object path, string vars, bool? silent)
		{
			return this.GetTable<JsonbPathQueryResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				target,
				path,
				vars,
				silent);
		}

		public partial class JsonbPathQueryResult
		{
			public string jsonb_path_query { get; set; }
		}

		#endregion

		#region JsonbPopulateRecordset

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_populate_recordset")]
		public ITable<JsonbPopulateRecordsetResult> JsonbPopulateRecordset(object par3757, string par3758)
		{
			return this.GetTable<JsonbPopulateRecordsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3757,
				par3758);
		}

		public partial class JsonbPopulateRecordsetResult
		{
			public int? jsonb_populate_recordset { get; set; }
		}

		#endregion

		#region PgAvailableExtensionVersions

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_available_extension_versions")]
		public ITable<PgAvailableExtensionVersionsResult> PgAvailableExtensionVersions()
		{
			return this.GetTable<PgAvailableExtensionVersionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgAvailableExtensionVersionsResult
		{
			public string name        { get; set; }
			public string version     { get; set; }
			public bool?  superuser   { get; set; }
			public bool?  relocatable { get; set; }
			public string schema      { get; set; }
			public Array  requires    { get; set; }
			public string comment     { get; set; }
		}

		#endregion

		#region PgAvailableExtensions

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_available_extensions")]
		public ITable<PgAvailableExtensionsResult> PgAvailableExtensions()
		{
			return this.GetTable<PgAvailableExtensionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgAvailableExtensionsResult
		{
			public string name            { get; set; }
			public string default_version { get; set; }
			public string comment         { get; set; }
		}

		#endregion

		#region PgConfig

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_config")]
		public ITable<PgConfigResult> PgConfig()
		{
			return this.GetTable<PgConfigResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgConfigResult
		{
			public string name    { get; set; }
			public string setting { get; set; }
		}

		#endregion

		#region PgCursor

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_cursor")]
		public ITable<PgCursorResult> PgCursor()
		{
			return this.GetTable<PgCursorResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgCursorResult
		{
			public string          name          { get; set; }
			public string          statement     { get; set; }
			public bool?           is_holdable   { get; set; }
			public bool?           is_binary     { get; set; }
			public bool?           is_scrollable { get; set; }
			public DateTimeOffset? creation_time { get; set; }
		}

		#endregion

		#region PgEventTriggerDdlCommands

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_event_trigger_ddl_commands")]
		public ITable<PgEventTriggerDdlCommandsResult> PgEventTriggerDdlCommands()
		{
			return this.GetTable<PgEventTriggerDdlCommandsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgEventTriggerDdlCommandsResult
		{
			public int?   classid         { get; set; }
			public int?   objid           { get; set; }
			public int?   objsubid        { get; set; }
			public string command_tag     { get; set; }
			public string object_type     { get; set; }
			public string schema_name     { get; set; }
			public string object_identity { get; set; }
			public bool?  in_extension    { get; set; }
			public object command         { get; set; }
		}

		#endregion

		#region PgEventTriggerDroppedObjects

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_event_trigger_dropped_objects")]
		public ITable<PgEventTriggerDroppedObjectsResult> PgEventTriggerDroppedObjects()
		{
			return this.GetTable<PgEventTriggerDroppedObjectsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgEventTriggerDroppedObjectsResult
		{
			public int?   classid         { get; set; }
			public int?   objid           { get; set; }
			public int?   objsubid        { get; set; }
			public bool?  original        { get; set; }
			public bool?  normal          { get; set; }
			public bool?  is_temporary    { get; set; }
			public string object_type     { get; set; }
			public string schema_name     { get; set; }
			public string object_name     { get; set; }
			public string object_identity { get; set; }
			public Array  address_names   { get; set; }
			public Array  address_args    { get; set; }
		}

		#endregion

		#region PgExtensionUpdatePaths

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_extension_update_paths")]
		public ITable<PgExtensionUpdatePathsResult> PgExtensionUpdatePaths(string name)
		{
			return this.GetTable<PgExtensionUpdatePathsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				name);
		}

		public partial class PgExtensionUpdatePathsResult
		{
			public string source { get; set; }
			public string target { get; set; }
			public string path   { get; set; }
		}

		#endregion

		#region PgGetKeywords

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_keywords")]
		public ITable<PgGetKeywordsResult> PgGetKeywords()
		{
			return this.GetTable<PgGetKeywordsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgGetKeywordsResult
		{
			public string word    { get; set; }
			public char?  catcode { get; set; }
			public string catdesc { get; set; }
		}

		#endregion

		#region PgGetMultixactMembers

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_multixact_members")]
		public ITable<PgGetMultixactMembersResult> PgGetMultixactMembers(int? multixid)
		{
			return this.GetTable<PgGetMultixactMembersResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				multixid);
		}

		public partial class PgGetMultixactMembersResult
		{
			public int?   xid  { get; set; }
			public string mode { get; set; }
		}

		#endregion

		#region PgGetPublicationTables

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_publication_tables")]
		public ITable<PgGetPublicationTablesResult> PgGetPublicationTables(string pubname)
		{
			return this.GetTable<PgGetPublicationTablesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				pubname);
		}

		public partial class PgGetPublicationTablesResult
		{
			public int? relid { get; set; }
		}

		#endregion

		#region PgGetReplicationSlots

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_replication_slots")]
		public ITable<PgGetReplicationSlotsResult> PgGetReplicationSlots()
		{
			return this.GetTable<PgGetReplicationSlotsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgGetReplicationSlotsResult
		{
			public string slot_name           { get; set; }
			public string plugin              { get; set; }
			public string slot_type           { get; set; }
			public int?   datoid              { get; set; }
			public bool?  temporary           { get; set; }
			public bool?  active              { get; set; }
			public int?   active_pid          { get; set; }
			public int?   xmin                { get; set; }
			public int?   catalog_xmin        { get; set; }
			public string restart_lsn         { get; set; }
			public string confirmed_flush_lsn { get; set; }
		}

		#endregion

		#region PgHbaFileRules

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_hba_file_rules")]
		public ITable<PgHbaFileRulesResult> PgHbaFileRules()
		{
			return this.GetTable<PgHbaFileRulesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgHbaFileRulesResult
		{
			public int?   line_number { get; set; }
			public string type        { get; set; }
			public Array  database    { get; set; }
			public Array  user_name   { get; set; }
			public string address     { get; set; }
			public string netmask     { get; set; }
			public string auth_method { get; set; }
			public Array  options     { get; set; }
			public string error       { get; set; }
		}

		#endregion

		#region PgListeningChannels

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_listening_channels")]
		public ITable<PgListeningChannelsResult> PgListeningChannels()
		{
			return this.GetTable<PgListeningChannelsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgListeningChannelsResult
		{
			public string pg_listening_channels { get; set; }
		}

		#endregion

		#region PgLockStatus

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_lock_status")]
		public ITable<PgLockStatusResult> PgLockStatus()
		{
			return this.GetTable<PgLockStatusResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgLockStatusResult
		{
			public string locktype           { get; set; }
			public int?   database           { get; set; }
			public int?   relation           { get; set; }
			public int?   page               { get; set; }
			public short? tuple              { get; set; }
			public string virtualxid         { get; set; }
			public int?   transactionid      { get; set; }
			public int?   classid            { get; set; }
			public int?   objid              { get; set; }
			public short? objsubid           { get; set; }
			public string virtualtransaction { get; set; }
			public int?   pid                { get; set; }
			public string mode               { get; set; }
			public bool?  granted            { get; set; }
			public bool?  fastpath           { get; set; }
		}

		#endregion

		#region PgLogicalSlotGetBinaryChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_get_binary_changes")]
		public ITable<PgLogicalSlotGetBinaryChangesResult> PgLogicalSlotGetBinaryChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotGetBinaryChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotGetBinaryChangesResult
		{
			public string lsn  { get; set; }
			public int?   xid  { get; set; }
			public byte[] data { get; set; }
		}

		#endregion

		#region PgLogicalSlotGetChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_get_changes")]
		public ITable<PgLogicalSlotGetChangesResult> PgLogicalSlotGetChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotGetChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotGetChangesResult
		{
			public string lsn  { get; set; }
			public int?   xid  { get; set; }
			public string data { get; set; }
		}

		#endregion

		#region PgLogicalSlotPeekBinaryChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_peek_binary_changes")]
		public ITable<PgLogicalSlotPeekBinaryChangesResult> PgLogicalSlotPeekBinaryChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotPeekBinaryChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotPeekBinaryChangesResult
		{
			public string lsn  { get; set; }
			public int?   xid  { get; set; }
			public byte[] data { get; set; }
		}

		#endregion

		#region PgLogicalSlotPeekChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_peek_changes")]
		public ITable<PgLogicalSlotPeekChangesResult> PgLogicalSlotPeekChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotPeekChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotPeekChangesResult
		{
			public string lsn  { get; set; }
			public int?   xid  { get; set; }
			public string data { get; set; }
		}

		#endregion

		#region PgLsArchiveStatusdir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_archive_statusdir")]
		public ITable<PgLsArchiveStatusdirResult> PgLsArchiveStatusdir()
		{
			return this.GetTable<PgLsArchiveStatusdirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgLsArchiveStatusdirResult
		{
			public string          name         { get; set; }
			public long?           size         { get; set; }
			public DateTimeOffset? modification { get; set; }
		}

		#endregion

		#region PgLsDir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_dir")]
		public ITable<PgLsDirResult> PgLsDir(string par5251, bool? par5252, bool? par5253)
		{
			return this.GetTable<PgLsDirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5251,
				par5252,
				par5253);
		}

		public partial class PgLsDirResult
		{
			public string pg_ls_dir { get; set; }
		}

		#endregion

		#region PgLsLogdir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_logdir")]
		public ITable<PgLsLogdirResult> PgLsLogdir()
		{
			return this.GetTable<PgLsLogdirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgLsLogdirResult
		{
			public string          name         { get; set; }
			public long?           size         { get; set; }
			public DateTimeOffset? modification { get; set; }
		}

		#endregion

		#region PgLsTmpdir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_tmpdir")]
		public ITable<PgLsTmpdirResult> PgLsTmpdir(int? tablespace)
		{
			return this.GetTable<PgLsTmpdirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				tablespace);
		}

		public partial class PgLsTmpdirResult
		{
			public string          name         { get; set; }
			public long?           size         { get; set; }
			public DateTimeOffset? modification { get; set; }
		}

		#endregion

		#region PgLsWaldir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_waldir")]
		public ITable<PgLsWaldirResult> PgLsWaldir()
		{
			return this.GetTable<PgLsWaldirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgLsWaldirResult
		{
			public string          name         { get; set; }
			public long?           size         { get; set; }
			public DateTimeOffset? modification { get; set; }
		}

		#endregion

		#region PgMcvListItems

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_mcv_list_items")]
		public ITable<PgMcvListItemsResult> PgMcvListItems(object mcv_list)
		{
			return this.GetTable<PgMcvListItemsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				mcv_list);
		}

		public partial class PgMcvListItemsResult
		{
			public int?    index          { get; set; }
			public Array   values         { get; set; }
			public Array   nulls          { get; set; }
			public double? frequency      { get; set; }
			public double? base_frequency { get; set; }
		}

		#endregion

		#region PgOptionsToTable

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_options_to_table")]
		public ITable<PgOptionsToTableResult> PgOptionsToTable(object options_array)
		{
			return this.GetTable<PgOptionsToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				options_array);
		}

		public partial class PgOptionsToTableResult
		{
			public string option_name  { get; set; }
			public string option_value { get; set; }
		}

		#endregion

		#region PgPartitionAncestors

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_partition_ancestors")]
		public ITable<PgPartitionAncestorsResult> PgPartitionAncestors(object partitionid)
		{
			return this.GetTable<PgPartitionAncestorsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				partitionid);
		}

		public partial class PgPartitionAncestorsResult
		{
			public string relid { get; set; }
		}

		#endregion

		#region PgPartitionTree

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_partition_tree")]
		public ITable<PgPartitionTreeResult> PgPartitionTree(object rootrelid)
		{
			return this.GetTable<PgPartitionTreeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				rootrelid);
		}

		public partial class PgPartitionTreeResult
		{
			public string relid       { get; set; }
			public string parentrelid { get; set; }
			public bool?  isleaf      { get; set; }
			public int?   level       { get; set; }
		}

		#endregion

		#region PgPreparedStatement

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_prepared_statement")]
		public ITable<PgPreparedStatementResult> PgPreparedStatement()
		{
			return this.GetTable<PgPreparedStatementResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgPreparedStatementResult
		{
			public string          name            { get; set; }
			public string          statement       { get; set; }
			public DateTimeOffset? prepare_time    { get; set; }
			public Array           parameter_types { get; set; }
			public bool?           from_sql        { get; set; }
		}

		#endregion

		#region PgPreparedXact

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_prepared_xact")]
		public ITable<PgPreparedXactResult> PgPreparedXact()
		{
			return this.GetTable<PgPreparedXactResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgPreparedXactResult
		{
			public int?            transaction { get; set; }
			public string          gid         { get; set; }
			public DateTimeOffset? prepared    { get; set; }
			public int?            ownerid     { get; set; }
			public int?            dbid        { get; set; }
		}

		#endregion

		#region PgShowAllFileSettings

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_all_file_settings")]
		public ITable<PgShowAllFileSettingsResult> PgShowAllFileSettings()
		{
			return this.GetTable<PgShowAllFileSettingsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowAllFileSettingsResult
		{
			public string sourcefile { get; set; }
			public int?   sourceline { get; set; }
			public int?   seqno      { get; set; }
			public string name       { get; set; }
			public string setting    { get; set; }
			public bool?  applied    { get; set; }
			public string error      { get; set; }
		}

		#endregion

		#region PgShowAllSettings

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_all_settings")]
		public ITable<PgShowAllSettingsResult> PgShowAllSettings()
		{
			return this.GetTable<PgShowAllSettingsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowAllSettingsResult
		{
			public string name            { get; set; }
			public string setting         { get; set; }
			public string unit            { get; set; }
			public string category        { get; set; }
			public string short_desc      { get; set; }
			public string extra_desc      { get; set; }
			public string context         { get; set; }
			public string vartype         { get; set; }
			public string source          { get; set; }
			public string min_val         { get; set; }
			public string max_val         { get; set; }
			public Array  enumvals        { get; set; }
			public string boot_val        { get; set; }
			public string reset_val       { get; set; }
			public string sourcefile      { get; set; }
			public int?   sourceline      { get; set; }
			public bool?  pending_restart { get; set; }
		}

		#endregion

		#region PgShowReplicationOriginStatus

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_replication_origin_status")]
		public ITable<PgShowReplicationOriginStatusResult> PgShowReplicationOriginStatus()
		{
			return this.GetTable<PgShowReplicationOriginStatusResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowReplicationOriginStatusResult
		{
			public int?   local_id    { get; set; }
			public string external_id { get; set; }
			public string remote_lsn  { get; set; }
			public string local_lsn   { get; set; }
		}

		#endregion

		#region PgStatGetActivity

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_activity")]
		public ITable<PgStatGetActivityResult> PgStatGetActivity(int? pid)
		{
			return this.GetTable<PgStatGetActivityResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				pid);
		}

		public partial class PgStatGetActivityResult
		{
			public int?            datid             { get; set; }
			public int?            pid               { get; set; }
			public int?            usesysid          { get; set; }
			public string          application_name  { get; set; }
			public string          state             { get; set; }
			public string          query             { get; set; }
			public string          wait_event_type   { get; set; }
			public string          wait_event        { get; set; }
			public DateTimeOffset? xact_start        { get; set; }
			public DateTimeOffset? query_start       { get; set; }
			public DateTimeOffset? backend_start     { get; set; }
			public DateTimeOffset? state_change      { get; set; }
			public NpgsqlInet?     client_addr       { get; set; }
			public string          client_hostname   { get; set; }
			public int?            client_port       { get; set; }
			public int?            backend_xid       { get; set; }
			public int?            backend_xmin      { get; set; }
			public string          backend_type      { get; set; }
			public bool?           ssl               { get; set; }
			public string          sslversion        { get; set; }
			public string          sslcipher         { get; set; }
			public int?            sslbits           { get; set; }
			public bool?           sslcompression    { get; set; }
			public string          ssl_client_dn     { get; set; }
			public decimal?        ssl_client_serial { get; set; }
			public string          ssl_issuer_dn     { get; set; }
			public bool?           gss_auth          { get; set; }
			public string          gss_princ         { get; set; }
			public bool?           gss_enc           { get; set; }
		}

		#endregion

		#region PgStatGetBackendIdset

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_backend_idset")]
		public ITable<PgStatGetBackendIdsetResult> PgStatGetBackendIdset()
		{
			return this.GetTable<PgStatGetBackendIdsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgStatGetBackendIdsetResult
		{
			public int? pg_stat_get_backend_idset { get; set; }
		}

		#endregion

		#region PgStatGetProgressInfo

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_progress_info")]
		public ITable<PgStatGetProgressInfoResult> PgStatGetProgressInfo(string cmdtype)
		{
			return this.GetTable<PgStatGetProgressInfoResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				cmdtype);
		}

		public partial class PgStatGetProgressInfoResult
		{
			public int?  pid     { get; set; }
			public int?  datid   { get; set; }
			public int?  relid   { get; set; }
			public long? param1  { get; set; }
			public long? param2  { get; set; }
			public long? param3  { get; set; }
			public long? param4  { get; set; }
			public long? param5  { get; set; }
			public long? param6  { get; set; }
			public long? param7  { get; set; }
			public long? param8  { get; set; }
			public long? param9  { get; set; }
			public long? param10 { get; set; }
			public long? param11 { get; set; }
			public long? param12 { get; set; }
			public long? param13 { get; set; }
			public long? param14 { get; set; }
			public long? param15 { get; set; }
			public long? param16 { get; set; }
			public long? param17 { get; set; }
			public long? param18 { get; set; }
			public long? param19 { get; set; }
			public long? param20 { get; set; }
		}

		#endregion

		#region PgStatGetWalSenders

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_wal_senders")]
		public ITable<PgStatGetWalSendersResult> PgStatGetWalSenders()
		{
			return this.GetTable<PgStatGetWalSendersResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgStatGetWalSendersResult
		{
			public int?            pid           { get; set; }
			public string          state         { get; set; }
			public string          sent_lsn      { get; set; }
			public string          write_lsn     { get; set; }
			public string          flush_lsn     { get; set; }
			public string          replay_lsn    { get; set; }
			public NpgsqlTimeSpan? write_lag     { get; set; }
			public NpgsqlTimeSpan? flush_lag     { get; set; }
			public NpgsqlTimeSpan? replay_lag    { get; set; }
			public int?            sync_priority { get; set; }
			public string          sync_state    { get; set; }
			public DateTimeOffset? reply_time    { get; set; }
		}

		#endregion

		#region PgStopBackup

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stop_backup")]
		public ITable<PgStopBackupResult> PgStopBackup(bool? exclusive, bool? wait_for_archive)
		{
			return this.GetTable<PgStopBackupResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				exclusive,
				wait_for_archive);
		}

		public partial class PgStopBackupResult
		{
			public string lsn        { get; set; }
			public string labelfile  { get; set; }
			public string spcmapfile { get; set; }
		}

		#endregion

		#region PgTablespaceDatabases

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_tablespace_databases")]
		public ITable<PgTablespaceDatabasesResult> PgTablespaceDatabases(int? par5569)
		{
			return this.GetTable<PgTablespaceDatabasesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5569);
		}

		public partial class PgTablespaceDatabasesResult
		{
			public int? pg_tablespace_databases { get; set; }
		}

		#endregion

		#region PgTimezoneAbbrevs

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_timezone_abbrevs")]
		public ITable<PgTimezoneAbbrevsResult> PgTimezoneAbbrevs()
		{
			return this.GetTable<PgTimezoneAbbrevsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgTimezoneAbbrevsResult
		{
			public string          abbrev     { get; set; }
			public NpgsqlTimeSpan? utc_offset { get; set; }
			public bool?           is_dst     { get; set; }
		}

		#endregion

		#region PgTimezoneNames

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_timezone_names")]
		public ITable<PgTimezoneNamesResult> PgTimezoneNames()
		{
			return this.GetTable<PgTimezoneNamesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgTimezoneNamesResult
		{
			public string          name       { get; set; }
			public string          abbrev     { get; set; }
			public NpgsqlTimeSpan? utc_offset { get; set; }
			public bool?           is_dst     { get; set; }
		}

		#endregion

		#region RegexpMatches

		[Sql.TableFunction(Schema="pg_catalog", Name="regexp_matches")]
		public ITable<RegexpMatchesResult> RegexpMatches(string par6053, string par6054, string par6055)
		{
			return this.GetTable<RegexpMatchesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par6053,
				par6054,
				par6055);
		}

		public partial class RegexpMatchesResult
		{
			public Array regexp_matches { get; set; }
		}

		#endregion

		#region RegexpSplitToTable

		[Sql.TableFunction(Schema="pg_catalog", Name="regexp_split_to_table")]
		public ITable<RegexpSplitToTableResult> RegexpSplitToTable(string par6074, string par6075, string par6076)
		{
			return this.GetTable<RegexpSplitToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par6074,
				par6075,
				par6076);
		}

		public partial class RegexpSplitToTableResult
		{
			public string regexp_split_to_table { get; set; }
		}

		#endregion

		#region TsDebug

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_debug")]
		public ITable<TsDebugResult> TsDebug(string document)
		{
			return this.GetTable<TsDebugResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				document);
		}

		public partial class TsDebugResult
		{
			public string alias        { get; set; }
			public string description  { get; set; }
			public string token        { get; set; }
			public Array  dictionaries { get; set; }
			public string dictionary   { get; set; }
			public Array  lexemes      { get; set; }
		}

		#endregion

		#region TsParse

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_parse")]
		public ITable<TsParseResult> TsParse(string parser_name, string txt)
		{
			return this.GetTable<TsParseResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				parser_name,
				txt);
		}

		public partial class TsParseResult
		{
			public int?   tokid { get; set; }
			public string token { get; set; }
		}

		#endregion

		#region TsStat

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_stat")]
		public ITable<TsStatResult> TsStat(string query, string weights)
		{
			return this.GetTable<TsStatResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				query,
				weights);
		}

		public partial class TsStatResult
		{
			public string word   { get; set; }
			public int?   ndoc   { get; set; }
			public int?   nentry { get; set; }
		}

		#endregion

		#region TsTokenType

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_token_type")]
		public ITable<TsTokenTypeResult> TsTokenType(string parser_name)
		{
			return this.GetTable<TsTokenTypeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				parser_name);
		}

		public partial class TsTokenTypeResult
		{
			public int?   tokid       { get; set; }
			public string alias       { get; set; }
			public string description { get; set; }
		}

		#endregion

		#region TxidSnapshotXip

		[Sql.TableFunction(Schema="pg_catalog", Name="txid_snapshot_xip")]
		public ITable<TxidSnapshotXipResult> TxidSnapshotXip(object par7433)
		{
			return this.GetTable<TxidSnapshotXipResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par7433);
		}

		public partial class TxidSnapshotXipResult
		{
			public long? txid_snapshot_xip { get; set; }
		}

		#endregion

		#region Unnest

		[Sql.TableFunction(Schema="pg_catalog", Name="unnest")]
		public ITable<UnnestResult> Unnest(object tsvector)
		{
			return this.GetTable<UnnestResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				tsvector);
		}

		public partial class UnnestResult
		{
			public string lexeme    { get; set; }
			public Array  positions { get; set; }
			public Array  weights   { get; set; }
		}

		#endregion

		#endregion
	}

	public partial class pg_control_checkpointResult
	{
		public object checkpoint_lsn { get; set; }

		public object redo_lsn { get; set; }

		public string redo_wal_file { get; set; }

		public int? timeline_id { get; set; }

		public int? prev_timeline_id { get; set; }

		public bool? full_page_writes { get; set; }

		public string next_xid { get; set; }

		public int? next_oid { get; set; }

		public int? next_multixact_id { get; set; }

		public int? next_multi_offset { get; set; }

		public int? oldest_xid { get; set; }

		public int? oldest_xid_dbid { get; set; }

		public int? oldest_active_xid { get; set; }

		public int? oldest_multi_xid { get; set; }

		public int? oldest_multi_dbid { get; set; }

		public int? oldest_commit_ts_xid { get; set; }

		public int? newest_commit_ts_xid { get; set; }

		public DateTimeOffset? checkpoint_time { get; set; }
	}

	public partial class pg_control_initResult
	{
		public int? max_data_alignment { get; set; }

		public int? database_block_size { get; set; }

		public int? blocks_per_segment { get; set; }

		public int? wal_block_size { get; set; }

		public int? bytes_per_wal_segment { get; set; }

		public int? max_identifier_length { get; set; }

		public int? max_index_columns { get; set; }

		public int? max_toast_chunk_size { get; set; }

		public int? large_object_chunk_size { get; set; }

		public bool? float4_pass_by_value { get; set; }

		public bool? float8_pass_by_value { get; set; }

		public int? data_page_checksum_version { get; set; }
	}

	public partial class pg_control_recoveryResult
	{
		public object min_recovery_end_lsn { get; set; }

		public int? min_recovery_end_timeline { get; set; }

		public object backup_start_lsn { get; set; }

		public object backup_end_lsn { get; set; }

		public bool? end_of_backup_record_required { get; set; }
	}

	public partial class pg_control_systemResult
	{
		public int? pg_control_version { get; set; }

		public int? catalog_version_no { get; set; }

		public long? system_identifier { get; set; }

		public DateTimeOffset? pg_control_last_modified { get; set; }
	}

	public partial class pg_copy_logical_replication_slotResult
	{
		public string slot_name { get; set; }

		public object lsn { get; set; }
	}

	public partial class pg_copy_physical_replication_slotResult
	{
		public string slot_name { get; set; }

		public object lsn { get; set; }
	}

	public partial class pg_create_logical_replication_slotResult
	{
		public string slot_name { get; set; }

		public object lsn { get; set; }
	}

	public partial class pg_create_physical_replication_slotResult
	{
		public string slot_name { get; set; }

		public object lsn { get; set; }
	}

	public partial class pg_get_object_addressResult
	{
		public int? classid { get; set; }

		public int? objid { get; set; }

		public int? objsubid { get; set; }
	}

	public partial class pg_identify_objectResult
	{
		public string type { get; set; }

		public string schema { get; set; }

		public string name { get; set; }

		public string identity { get; set; }
	}

	public partial class pg_identify_object_as_addressResult
	{
		public string type { get; set; }

		public object object_names { get; set; }

		public object object_args { get; set; }
	}

	public partial class pg_last_committed_xactResult
	{
		public int? xid { get; set; }

		public DateTimeOffset? timestamp { get; set; }
	}

	public partial class pg_replication_slot_advanceResult
	{
		public string slot_name { get; set; }

		public object end_lsn { get; set; }
	}

	public partial class pg_sequence_parametersResult
	{
		public long? start_value { get; set; }

		public long? minimum_value { get; set; }

		public long? maximum_value { get; set; }

		public long? increment { get; set; }

		public bool? cycle_option { get; set; }

		public long? cache_size { get; set; }

		public int? data_type { get; set; }
	}

	public partial class pg_stat_fileResult
	{
		public long? size { get; set; }

		public DateTimeOffset? access { get; set; }

		public DateTimeOffset? modification { get; set; }

		public DateTimeOffset? change { get; set; }

		public DateTimeOffset? creation { get; set; }

		public bool? isdir { get; set; }
	}

	public partial class pg_stat_get_archiverResult
	{
		public long? archived_count { get; set; }

		public string last_archived_wal { get; set; }

		public DateTimeOffset? last_archived_time { get; set; }

		public long? failed_count { get; set; }

		public string last_failed_wal { get; set; }

		public DateTimeOffset? last_failed_time { get; set; }

		public DateTimeOffset? stats_reset { get; set; }
	}

	public partial class pg_stat_get_subscriptionResult
	{
		public int? subid { get; set; }

		public int? relid { get; set; }

		public int? pid { get; set; }

		public object received_lsn { get; set; }

		public DateTimeOffset? last_msg_send_time { get; set; }

		public DateTimeOffset? last_msg_receipt_time { get; set; }

		public object latest_end_lsn { get; set; }

		public DateTimeOffset? latest_end_time { get; set; }
	}

	public partial class pg_stat_get_wal_receiverResult
	{
		public int? pid { get; set; }

		public string status { get; set; }

		public object receive_start_lsn { get; set; }

		public int? receive_start_tli { get; set; }

		public object received_lsn { get; set; }

		public int? received_tli { get; set; }

		public DateTimeOffset? last_msg_send_time { get; set; }

		public DateTimeOffset? last_msg_receipt_time { get; set; }

		public object latest_end_lsn { get; set; }

		public DateTimeOffset? latest_end_time { get; set; }

		public string slot_name { get; set; }

		public string sender_host { get; set; }

		public int? sender_port { get; set; }

		public string conninfo { get; set; }
	}

	public partial class pg_walfile_name_offsetResult
	{
		public string file_name { get; set; }

		public int? file_offset { get; set; }
	}

	[Table(Schema="public", Name="department")]
	public partial class Department
	{
		[Column("id"),   PrimaryKey, Identity] public long   Id   { get; set; } // bigint
		[Column("name"), NotNull             ] public string Name { get; set; } // text

		#region Associations

		/// <summary>
		/// employee_fk_1_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DepartmentId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Employee> Employeefks { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="employee")]
	public partial class Employee
	{
		[Column("id"),                     PrimaryKey,  Identity] public long     Id                   { get; set; } // bigint
		[Column("surname"),                NotNull              ] public string   Surname              { get; set; } // text
		[Column("name"),                   NotNull              ] public string   Name                 { get; set; } // text
		[Column("patronymic"),                Nullable          ] public string   Patronymic           { get; set; } // text
		[Column("phone"),                  NotNull              ] public string   Phone                { get; set; } // text
		[Column("address"),                NotNull              ] public string   Address              { get; set; } // text
		[Column("passport_number_series"), NotNull              ] public string   PassportNumberSeries { get; set; } // text
		[Column("passport_info_whom"),     NotNull              ] public string   PassportInfoWhom     { get; set; } // text
		[Column("passport_info_when"),     NotNull              ] public DateTime PassportInfoWhen     { get; set; } // timestamp (6) without time zone
		[Column("department_id"),             Nullable          ] public long?    DepartmentId         { get; set; } // bigint
		[Column("position_id"),               Nullable          ] public long?    PositionId           { get; set; } // bigint

		#region Associations

		/// <summary>
		/// employee_fk_1
		/// </summary>
		[Association(ThisKey="DepartmentId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="employee_fk_1", BackReferenceName="Employeefks")]
		public Department Department { get; set; }

		/// <summary>
		/// employee_fk_2
		/// </summary>
		[Association(ThisKey="PositionId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="employee_fk_2", BackReferenceName="Employeefks")]
		public Position Position { get; set; }

		/// <summary>
		/// employee_skill_employee_id_fk_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="EmployeeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<EmployeeSkill> Skillidfks { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="employee_skill")]
	public partial class EmployeeSkill
	{
		[Column("employee_id"), PrimaryKey(1), NotNull] public long  EmployeeId { get; set; } // bigint
		[Column("skill_id"),    PrimaryKey(2), NotNull] public long  SkillId    { get; set; } // bigint
		[Column("level"),                      NotNull] public short Level      { get; set; } // smallint

		#region Associations

		/// <summary>
		/// employee_skill_employee_id_fk
		/// </summary>
		[Association(ThisKey="EmployeeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="employee_skill_employee_id_fk", BackReferenceName="Skillidfks")]
		public Employee Employee { get; set; }

		/// <summary>
		/// employee_skill_skill_id_fk
		/// </summary>
		[Association(ThisKey="SkillId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="employee_skill_skill_id_fk", BackReferenceName="Employeeidfks")]
		public Skill Skill { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="position")]
	public partial class Position
	{
		[Column("id"),   PrimaryKey, Identity] public long   Id   { get; set; } // bigint
		[Column("name"), NotNull             ] public string Name { get; set; } // text

		#region Associations

		/// <summary>
		/// employee_fk_2_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PositionId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Employee> Employeefks { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="skill")]
	public partial class Skill
	{
		[Column("id"),   PrimaryKey, Identity] public long   Id   { get; set; } // bigint
		[Column("name"), NotNull             ] public string Name { get; set; } // text

		#region Associations

		/// <summary>
		/// employee_skill_skill_id_fk_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SkillId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<EmployeeSkill> Employeeidfks { get; set; }

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region RiFKeyCascadeDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_cascade_del\"", ServerSideOnly=true)]
		public static object RiFKeyCascadeDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCascadeUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_cascade_upd\"", ServerSideOnly=true)]
		public static object RiFKeyCascadeUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCheckIns

		[Sql.Function(Name="pg_catalog.\"RI_FKey_check_ins\"", ServerSideOnly=true)]
		public static object RiFKeyCheckIns()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCheckUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_check_upd\"", ServerSideOnly=true)]
		public static object RiFKeyCheckUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyNoactionDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_noaction_del\"", ServerSideOnly=true)]
		public static object RiFKeyNoactionDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyNoactionUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_noaction_upd\"", ServerSideOnly=true)]
		public static object RiFKeyNoactionUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyRestrictDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_restrict_del\"", ServerSideOnly=true)]
		public static object RiFKeyRestrictDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyRestrictUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_restrict_upd\"", ServerSideOnly=true)]
		public static object RiFKeyRestrictUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetdefaultDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setdefault_del\"", ServerSideOnly=true)]
		public static object RiFKeySetdefaultDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetdefaultUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setdefault_upd\"", ServerSideOnly=true)]
		public static object RiFKeySetdefaultUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetnullDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setnull_del\"", ServerSideOnly=true)]
		public static object RiFKeySetnullDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetnullUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setnull_upd\"", ServerSideOnly=true)]
		public static object RiFKeySetnullUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharMaxLength

		[Sql.Function(Name="information_schema._pg_char_max_length", ServerSideOnly=true)]
		public static int? PgCharMaxLength(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharOctetLength

		[Sql.Function(Name="information_schema._pg_char_octet_length", ServerSideOnly=true)]
		public static int? PgCharOctetLength(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDatetimePrecision

		[Sql.Function(Name="information_schema._pg_datetime_precision", ServerSideOnly=true)]
		public static int? PgDatetimePrecision(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexPosition

		[Sql.Function(Name="information_schema._pg_index_position", ServerSideOnly=true)]
		public static int? PgIndexPosition(int? par18, short? par19)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIntervalType

		[Sql.Function(Name="information_schema._pg_interval_type", ServerSideOnly=true)]
		public static string PgIntervalType(int? typid, int? mod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgKeysequal

		[Sql.Function(Name="information_schema._pg_keysequal", ServerSideOnly=true)]
		public static bool? PgKeysequal(object par22, object par23)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericPrecision

		[Sql.Function(Name="information_schema._pg_numeric_precision", ServerSideOnly=true)]
		public static int? PgNumericPrecision(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericPrecisionRadix

		[Sql.Function(Name="information_schema._pg_numeric_precision_radix", ServerSideOnly=true)]
		public static int? PgNumericPrecisionRadix(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericScale

		[Sql.Function(Name="information_schema._pg_numeric_scale", ServerSideOnly=true)]
		public static int? PgNumericScale(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTruetypid

		[Sql.Function(Name="information_schema._pg_truetypid", ServerSideOnly=true)]
		public static int? PgTruetypid(object par28, object par29)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTruetypmod

		[Sql.Function(Name="information_schema._pg_truetypmod", ServerSideOnly=true)]
		public static int? PgTruetypmod(object par31, object par32)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abbrev

		[Sql.Function(Name="pg_catalog.abbrev", ServerSideOnly=true)]
		public static string Abbrev(NpgsqlInet? par36)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abs

		[Sql.Function(Name="pg_catalog.abs", ServerSideOnly=true)]
		public static decimal? Abs(decimal? par48)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclcontains

		[Sql.Function(Name="pg_catalog.aclcontains", ServerSideOnly=true)]
		public static bool? Aclcontains(object par50, object par51)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acldefault

		[Sql.Function(Name="pg_catalog.acldefault", ServerSideOnly=true)]
		public static object Acldefault(object par53, int? par54)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclinsert

		[Sql.Function(Name="pg_catalog.aclinsert", ServerSideOnly=true)]
		public static object Aclinsert(object par56, object par57)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemeq

		[Sql.Function(Name="pg_catalog.aclitemeq", ServerSideOnly=true)]
		public static bool? Aclitemeq(object par59, object par60)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemin

		[Sql.Function(Name="pg_catalog.aclitemin", ServerSideOnly=true)]
		public static object Aclitemin(object par62)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemout

		[Sql.Function(Name="pg_catalog.aclitemout", ServerSideOnly=true)]
		public static object Aclitemout(object par64)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclremove

		[Sql.Function(Name="pg_catalog.aclremove", ServerSideOnly=true)]
		public static object Aclremove(object par66, object par67)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acos

		[Sql.Function(Name="pg_catalog.acos", ServerSideOnly=true)]
		public static double? Acos(double? par69)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acosd

		[Sql.Function(Name="pg_catalog.acosd", ServerSideOnly=true)]
		public static double? Acosd(double? par71)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acosh

		[Sql.Function(Name="pg_catalog.acosh", ServerSideOnly=true)]
		public static double? Acosh(double? par73)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Age

		[Sql.Function(Name="pg_catalog.age", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? Age(DateTime? par85)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Amvalidate

		[Sql.Function(Name="pg_catalog.amvalidate", ServerSideOnly=true)]
		public static bool? Amvalidate(int? par87)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyIn

		[Sql.Function(Name="pg_catalog.any_in", ServerSideOnly=true)]
		public static object AnyIn(object par89)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyOut

		[Sql.Function(Name="pg_catalog.any_out", ServerSideOnly=true)]
		public static object AnyOut(object par91)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayIn

		[Sql.Function(Name="pg_catalog.anyarray_in", ServerSideOnly=true)]
		public static object AnyarrayIn(object par93)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayOut

		[Sql.Function(Name="pg_catalog.anyarray_out", ServerSideOnly=true)]
		public static object AnyarrayOut(object par95)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayRecv

		[Sql.Function(Name="pg_catalog.anyarray_recv", ServerSideOnly=true)]
		public static object AnyarrayRecv(object par97)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarraySend

		[Sql.Function(Name="pg_catalog.anyarray_send", ServerSideOnly=true)]
		public static byte[] AnyarraySend(object par99)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyelementIn

		[Sql.Function(Name="pg_catalog.anyelement_in", ServerSideOnly=true)]
		public static object AnyelementIn(object par101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyelementOut

		[Sql.Function(Name="pg_catalog.anyelement_out", ServerSideOnly=true)]
		public static object AnyelementOut(object par103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyenumIn

		[Sql.Function(Name="pg_catalog.anyenum_in", ServerSideOnly=true)]
		public static object AnyenumIn(object par105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyenumOut

		[Sql.Function(Name="pg_catalog.anyenum_out", ServerSideOnly=true)]
		public static object AnyenumOut(object par107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnynonarrayIn

		[Sql.Function(Name="pg_catalog.anynonarray_in", ServerSideOnly=true)]
		public static object AnynonarrayIn(object par109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnynonarrayOut

		[Sql.Function(Name="pg_catalog.anynonarray_out", ServerSideOnly=true)]
		public static object AnynonarrayOut(object par111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyrangeIn

		[Sql.Function(Name="pg_catalog.anyrange_in", ServerSideOnly=true)]
		public static object AnyrangeIn(object par113, int? par114, int? par115)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyrangeOut

		[Sql.Function(Name="pg_catalog.anyrange_out", ServerSideOnly=true)]
		public static object AnyrangeOut(object par117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Anytextcat

		[Sql.Function(Name="pg_catalog.anytextcat", ServerSideOnly=true)]
		public static string Anytextcat(object par119, string par120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Area

		[Sql.Function(Name="pg_catalog.area", ServerSideOnly=true)]
		public static double? Area(NpgsqlPath? par126)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Areajoinsel

		[Sql.Function(Name="pg_catalog.areajoinsel", ServerSideOnly=true)]
		public static double? Areajoinsel(object par128, int? par129, object par130, short? par131, object par132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Areasel

		[Sql.Function(Name="pg_catalog.areasel", ServerSideOnly=true)]
		public static double? Areasel(object par134, int? par135, object par136, int? par137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAgg

		[Sql.Function(Name="pg_catalog.array_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static object ArrayAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggArrayFinalfn

		[Sql.Function(Name="pg_catalog.array_agg_array_finalfn", ServerSideOnly=true)]
		public static object ArrayAggArrayFinalfn(object par143, object par144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggArrayTransfn

		[Sql.Function(Name="pg_catalog.array_agg_array_transfn", ServerSideOnly=true)]
		public static object ArrayAggArrayTransfn(object par146, object par147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggFinalfn

		[Sql.Function(Name="pg_catalog.array_agg_finalfn", ServerSideOnly=true)]
		public static object ArrayAggFinalfn(object par149, object par150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggTransfn

		[Sql.Function(Name="pg_catalog.array_agg_transfn", ServerSideOnly=true)]
		public static object ArrayAggTransfn(object par152, object par153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAppend

		[Sql.Function(Name="pg_catalog.array_append", ServerSideOnly=true)]
		public static object ArrayAppend(object par155, object par156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayCat

		[Sql.Function(Name="pg_catalog.array_cat", ServerSideOnly=true)]
		public static object ArrayCat(object par158, object par159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayDims

		[Sql.Function(Name="pg_catalog.array_dims", ServerSideOnly=true)]
		public static string ArrayDims(object par161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayEq

		[Sql.Function(Name="pg_catalog.array_eq", ServerSideOnly=true)]
		public static bool? ArrayEq(object par163, object par164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayFill

		[Sql.Function(Name="pg_catalog.array_fill", ServerSideOnly=true)]
		public static object ArrayFill(object par169, object par170, object par171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayGe

		[Sql.Function(Name="pg_catalog.array_ge", ServerSideOnly=true)]
		public static bool? ArrayGe(object par173, object par174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayGt

		[Sql.Function(Name="pg_catalog.array_gt", ServerSideOnly=true)]
		public static bool? ArrayGt(object par176, object par177)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayIn

		[Sql.Function(Name="pg_catalog.array_in", ServerSideOnly=true)]
		public static object ArrayIn(object par179, int? par180, int? par181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLarger

		[Sql.Function(Name="pg_catalog.array_larger", ServerSideOnly=true)]
		public static object ArrayLarger(object par183, object par184)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLe

		[Sql.Function(Name="pg_catalog.array_le", ServerSideOnly=true)]
		public static bool? ArrayLe(object par186, object par187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLength

		[Sql.Function(Name="pg_catalog.array_length", ServerSideOnly=true)]
		public static int? ArrayLength(object par189, int? par190)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLower

		[Sql.Function(Name="pg_catalog.array_lower", ServerSideOnly=true)]
		public static int? ArrayLower(object par192, int? par193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLt

		[Sql.Function(Name="pg_catalog.array_lt", ServerSideOnly=true)]
		public static bool? ArrayLt(object par195, object par196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayNdims

		[Sql.Function(Name="pg_catalog.array_ndims", ServerSideOnly=true)]
		public static int? ArrayNdims(object par198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayNe

		[Sql.Function(Name="pg_catalog.array_ne", ServerSideOnly=true)]
		public static bool? ArrayNe(object par200, object par201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayOut

		[Sql.Function(Name="pg_catalog.array_out", ServerSideOnly=true)]
		public static object ArrayOut(object par203)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPosition

		[Sql.Function(Name="pg_catalog.array_position", ServerSideOnly=true)]
		public static int? ArrayPosition(object par208, object par209, int? par210)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPositions

		[Sql.Function(Name="pg_catalog.array_positions", ServerSideOnly=true)]
		public static object ArrayPositions(object par212, object par213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPrepend

		[Sql.Function(Name="pg_catalog.array_prepend", ServerSideOnly=true)]
		public static object ArrayPrepend(object par215, object par216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayRecv

		[Sql.Function(Name="pg_catalog.array_recv", ServerSideOnly=true)]
		public static object ArrayRecv(object par218, int? par219, int? par220)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayRemove

		[Sql.Function(Name="pg_catalog.array_remove", ServerSideOnly=true)]
		public static object ArrayRemove(object par222, object par223)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayReplace

		[Sql.Function(Name="pg_catalog.array_replace", ServerSideOnly=true)]
		public static object ArrayReplace(object par225, object par226, object par227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArraySend

		[Sql.Function(Name="pg_catalog.array_send", ServerSideOnly=true)]
		public static byte[] ArraySend(object par229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArraySmaller

		[Sql.Function(Name="pg_catalog.array_smaller", ServerSideOnly=true)]
		public static object ArraySmaller(object par231, object par232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToJson

		[Sql.Function(Name="pg_catalog.array_to_json", ServerSideOnly=true)]
		public static string ArrayToJson(object par236, bool? par237)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToString

		[Sql.Function(Name="pg_catalog.array_to_string", ServerSideOnly=true)]
		public static string ArrayToString(object par243, string par244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToTsvector

		[Sql.Function(Name="pg_catalog.array_to_tsvector", ServerSideOnly=true)]
		public static object ArrayToTsvector(object par246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayTypanalyze

		[Sql.Function(Name="pg_catalog.array_typanalyze", ServerSideOnly=true)]
		public static bool? ArrayTypanalyze(object par248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayUnnestSupport

		[Sql.Function(Name="pg_catalog.array_unnest_support", ServerSideOnly=true)]
		public static object ArrayUnnestSupport(object par250)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayUpper

		[Sql.Function(Name="pg_catalog.array_upper", ServerSideOnly=true)]
		public static int? ArrayUpper(object par252, int? par253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontained

		[Sql.Function(Name="pg_catalog.arraycontained", ServerSideOnly=true)]
		public static bool? Arraycontained(object par255, object par256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontains

		[Sql.Function(Name="pg_catalog.arraycontains", ServerSideOnly=true)]
		public static bool? Arraycontains(object par258, object par259)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontjoinsel

		[Sql.Function(Name="pg_catalog.arraycontjoinsel", ServerSideOnly=true)]
		public static double? Arraycontjoinsel(object par261, int? par262, object par263, short? par264, object par265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontsel

		[Sql.Function(Name="pg_catalog.arraycontsel", ServerSideOnly=true)]
		public static double? Arraycontsel(object par267, int? par268, object par269, int? par270)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arrayoverlap

		[Sql.Function(Name="pg_catalog.arrayoverlap", ServerSideOnly=true)]
		public static bool? Arrayoverlap(object par272, object par273)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ascii

		[Sql.Function(Name="pg_catalog.ascii", ServerSideOnly=true)]
		public static int? Ascii(string par275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AsciiToMic

		[Sql.Function(Name="pg_catalog.ascii_to_mic", ServerSideOnly=true)]
		public static object AsciiToMic(int? par276, int? par277, object par278, object par279, int? par280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AsciiToUtf8

		[Sql.Function(Name="pg_catalog.ascii_to_utf8", ServerSideOnly=true)]
		public static object AsciiToUtf8(int? par281, int? par282, object par283, object par284, int? par285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Asin

		[Sql.Function(Name="pg_catalog.asin", ServerSideOnly=true)]
		public static double? Asin(double? par287)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Asind

		[Sql.Function(Name="pg_catalog.asind", ServerSideOnly=true)]
		public static double? Asind(double? par289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Asinh

		[Sql.Function(Name="pg_catalog.asinh", ServerSideOnly=true)]
		public static double? Asinh(double? par291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan2

		[Sql.Function(Name="pg_catalog.atan2", ServerSideOnly=true)]
		public static double? Atan2(double? par293, double? par294)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan2d

		[Sql.Function(Name="pg_catalog.atan2d", ServerSideOnly=true)]
		public static double? Atan2d(double? par296, double? par297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan

		[Sql.Function(Name="pg_catalog.atan", ServerSideOnly=true)]
		public static double? Atan(double? par299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atand

		[Sql.Function(Name="pg_catalog.atand", ServerSideOnly=true)]
		public static double? Atand(double? par301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atanh

		[Sql.Function(Name="pg_catalog.atanh", ServerSideOnly=true)]
		public static double? Atanh(double? par303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Avg

		[Sql.Function(Name="pg_catalog.avg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlTimeSpan? Avg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlTimeSpan?>> par317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bernoulli

		[Sql.Function(Name="pg_catalog.bernoulli", ServerSideOnly=true)]
		public static object Bernoulli(object par319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToEucTw

		[Sql.Function(Name="pg_catalog.big5_to_euc_tw", ServerSideOnly=true)]
		public static object Big5ToEucTw(int? par320, int? par321, object par322, object par323, int? par324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToMic

		[Sql.Function(Name="pg_catalog.big5_to_mic", ServerSideOnly=true)]
		public static object Big5ToMic(int? par325, int? par326, object par327, object par328, int? par329)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToUtf8

		[Sql.Function(Name="pg_catalog.big5_to_utf8", ServerSideOnly=true)]
		public static object Big5ToUtf8(int? par330, int? par331, object par332, object par333, int? par334)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeCreateEmptyExtension

		[Sql.Function(Name="pg_catalog.binary_upgrade_create_empty_extension", ServerSideOnly=true)]
		public static object BinaryUpgradeCreateEmptyExtension(string par335, string par336, bool? par337, string par338, object par339, object par340, object par341)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetMissingValue

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_missing_value", ServerSideOnly=true)]
		public static object BinaryUpgradeSetMissingValue(int? par342, string par343, string par344)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextArrayPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_array_pg_type_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextArrayPgTypeOid(int? par345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextHeapPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_heap_pg_class_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextHeapPgClassOid(int? par346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextIndexPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_index_pg_class_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextIndexPgClassOid(int? par347)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgAuthidOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_authid_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextPgAuthidOid(int? par348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgEnumOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_enum_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextPgEnumOid(int? par349)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_type_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextPgTypeOid(int? par350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextToastPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_toast_pg_class_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextToastPgClassOid(int? par351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextToastPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_toast_pg_type_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextToastPgTypeOid(int? par352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetRecordInitPrivs

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_record_init_privs", ServerSideOnly=true)]
		public static object BinaryUpgradeSetRecordInitPrivs(bool? par353)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bit

		[Sql.Function(Name="pg_catalog.bit", ServerSideOnly=true)]
		public static BitArray Bit(long? par362, int? par363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitAnd

		[Sql.Function(Name="pg_catalog.bit_and", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static BitArray BitAnd<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, BitArray>> par371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitIn

		[Sql.Function(Name="pg_catalog.bit_in", ServerSideOnly=true)]
		public static BitArray BitIn(object par373, int? par374, int? par375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitLength

		[Sql.Function(Name="pg_catalog.bit_length", ServerSideOnly=true)]
		public static int? BitLength(BitArray par381)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitOr

		[Sql.Function(Name="pg_catalog.bit_or", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static BitArray BitOr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, BitArray>> par389)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitOut

		[Sql.Function(Name="pg_catalog.bit_out", ServerSideOnly=true)]
		public static object BitOut(BitArray par391)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitRecv

		[Sql.Function(Name="pg_catalog.bit_recv", ServerSideOnly=true)]
		public static BitArray BitRecv(object par393, int? par394, int? par395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitSend

		[Sql.Function(Name="pg_catalog.bit_send", ServerSideOnly=true)]
		public static byte[] BitSend(BitArray par397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitand

		[Sql.Function(Name="pg_catalog.bitand", ServerSideOnly=true)]
		public static BitArray Bitand(BitArray par399, BitArray par400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitcat

		[Sql.Function(Name="pg_catalog.bitcat", ServerSideOnly=true)]
		public static BitArray Bitcat(BitArray par402, BitArray par403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitcmp

		[Sql.Function(Name="pg_catalog.bitcmp", ServerSideOnly=true)]
		public static int? Bitcmp(BitArray par405, BitArray par406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Biteq

		[Sql.Function(Name="pg_catalog.biteq", ServerSideOnly=true)]
		public static bool? Biteq(BitArray par408, BitArray par409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitge

		[Sql.Function(Name="pg_catalog.bitge", ServerSideOnly=true)]
		public static bool? Bitge(BitArray par411, BitArray par412)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitgt

		[Sql.Function(Name="pg_catalog.bitgt", ServerSideOnly=true)]
		public static bool? Bitgt(BitArray par414, BitArray par415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitle

		[Sql.Function(Name="pg_catalog.bitle", ServerSideOnly=true)]
		public static bool? Bitle(BitArray par417, BitArray par418)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitlt

		[Sql.Function(Name="pg_catalog.bitlt", ServerSideOnly=true)]
		public static bool? Bitlt(BitArray par420, BitArray par421)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitne

		[Sql.Function(Name="pg_catalog.bitne", ServerSideOnly=true)]
		public static bool? Bitne(BitArray par423, BitArray par424)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitnot

		[Sql.Function(Name="pg_catalog.bitnot", ServerSideOnly=true)]
		public static BitArray Bitnot(BitArray par426)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitor

		[Sql.Function(Name="pg_catalog.bitor", ServerSideOnly=true)]
		public static BitArray Bitor(BitArray par428, BitArray par429)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitshiftleft

		[Sql.Function(Name="pg_catalog.bitshiftleft", ServerSideOnly=true)]
		public static BitArray Bitshiftleft(BitArray par431, int? par432)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitshiftright

		[Sql.Function(Name="pg_catalog.bitshiftright", ServerSideOnly=true)]
		public static BitArray Bitshiftright(BitArray par434, int? par435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bittypmodin

		[Sql.Function(Name="pg_catalog.bittypmodin", ServerSideOnly=true)]
		public static int? Bittypmodin(object par437)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bittypmodout

		[Sql.Function(Name="pg_catalog.bittypmodout", ServerSideOnly=true)]
		public static object Bittypmodout(int? par439)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitxor

		[Sql.Function(Name="pg_catalog.bitxor", ServerSideOnly=true)]
		public static BitArray Bitxor(BitArray par441, BitArray par442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bool

		[Sql.Function(Name="pg_catalog.bool", ServerSideOnly=true)]
		public static bool? Bool(string par446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAccum

		[Sql.Function(Name="pg_catalog.bool_accum", ServerSideOnly=true)]
		public static object BoolAccum(object par448, bool? par449)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAccumInv

		[Sql.Function(Name="pg_catalog.bool_accum_inv", ServerSideOnly=true)]
		public static object BoolAccumInv(object par451, bool? par452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAlltrue

		[Sql.Function(Name="pg_catalog.bool_alltrue", ServerSideOnly=true)]
		public static bool? BoolAlltrue(object par454)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAnd

		[Sql.Function(Name="pg_catalog.bool_and", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? BoolAnd<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAnytrue

		[Sql.Function(Name="pg_catalog.bool_anytrue", ServerSideOnly=true)]
		public static bool? BoolAnytrue(object par458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolOr

		[Sql.Function(Name="pg_catalog.bool_or", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? BoolOr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolandStatefunc

		[Sql.Function(Name="pg_catalog.booland_statefunc", ServerSideOnly=true)]
		public static bool? BoolandStatefunc(bool? par462, bool? par463)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Booleq

		[Sql.Function(Name="pg_catalog.booleq", ServerSideOnly=true)]
		public static bool? Booleq(bool? par465, bool? par466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolge

		[Sql.Function(Name="pg_catalog.boolge", ServerSideOnly=true)]
		public static bool? Boolge(bool? par468, bool? par469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolgt

		[Sql.Function(Name="pg_catalog.boolgt", ServerSideOnly=true)]
		public static bool? Boolgt(bool? par471, bool? par472)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolin

		[Sql.Function(Name="pg_catalog.boolin", ServerSideOnly=true)]
		public static bool? Boolin(object par474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolle

		[Sql.Function(Name="pg_catalog.boolle", ServerSideOnly=true)]
		public static bool? Boolle(bool? par476, bool? par477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boollt

		[Sql.Function(Name="pg_catalog.boollt", ServerSideOnly=true)]
		public static bool? Boollt(bool? par479, bool? par480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolne

		[Sql.Function(Name="pg_catalog.boolne", ServerSideOnly=true)]
		public static bool? Boolne(bool? par482, bool? par483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolorStatefunc

		[Sql.Function(Name="pg_catalog.boolor_statefunc", ServerSideOnly=true)]
		public static bool? BoolorStatefunc(bool? par485, bool? par486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolout

		[Sql.Function(Name="pg_catalog.boolout", ServerSideOnly=true)]
		public static object Boolout(bool? par488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolrecv

		[Sql.Function(Name="pg_catalog.boolrecv", ServerSideOnly=true)]
		public static bool? Boolrecv(object par490)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolsend

		[Sql.Function(Name="pg_catalog.boolsend", ServerSideOnly=true)]
		public static byte[] Boolsend(bool? par492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoundBox

		[Sql.Function(Name="pg_catalog.bound_box", ServerSideOnly=true)]
		public static NpgsqlBox? BoundBox(NpgsqlBox? par494, NpgsqlBox? par495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Box

		[Sql.Function(Name="pg_catalog.box", ServerSideOnly=true)]
		public static NpgsqlBox? Box(NpgsqlPoint? par504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAbove

		[Sql.Function(Name="pg_catalog.box_above", ServerSideOnly=true)]
		public static bool? BoxAbove(NpgsqlBox? par506, NpgsqlBox? par507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAboveEq

		[Sql.Function(Name="pg_catalog.box_above_eq", ServerSideOnly=true)]
		public static bool? BoxAboveEq(NpgsqlBox? par509, NpgsqlBox? par510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAdd

		[Sql.Function(Name="pg_catalog.box_add", ServerSideOnly=true)]
		public static NpgsqlBox? BoxAdd(NpgsqlBox? par512, NpgsqlPoint? par513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxBelow

		[Sql.Function(Name="pg_catalog.box_below", ServerSideOnly=true)]
		public static bool? BoxBelow(NpgsqlBox? par515, NpgsqlBox? par516)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxBelowEq

		[Sql.Function(Name="pg_catalog.box_below_eq", ServerSideOnly=true)]
		public static bool? BoxBelowEq(NpgsqlBox? par518, NpgsqlBox? par519)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxCenter

		[Sql.Function(Name="pg_catalog.box_center", ServerSideOnly=true)]
		public static NpgsqlPoint? BoxCenter(NpgsqlBox? par521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContain

		[Sql.Function(Name="pg_catalog.box_contain", ServerSideOnly=true)]
		public static bool? BoxContain(NpgsqlBox? par523, NpgsqlBox? par524)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContainPt

		[Sql.Function(Name="pg_catalog.box_contain_pt", ServerSideOnly=true)]
		public static bool? BoxContainPt(NpgsqlBox? par526, NpgsqlPoint? par527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContained

		[Sql.Function(Name="pg_catalog.box_contained", ServerSideOnly=true)]
		public static bool? BoxContained(NpgsqlBox? par529, NpgsqlBox? par530)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxDistance

		[Sql.Function(Name="pg_catalog.box_distance", ServerSideOnly=true)]
		public static double? BoxDistance(NpgsqlBox? par532, NpgsqlBox? par533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxDiv

		[Sql.Function(Name="pg_catalog.box_div", ServerSideOnly=true)]
		public static NpgsqlBox? BoxDiv(NpgsqlBox? par535, NpgsqlPoint? par536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxEq

		[Sql.Function(Name="pg_catalog.box_eq", ServerSideOnly=true)]
		public static bool? BoxEq(NpgsqlBox? par538, NpgsqlBox? par539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxGe

		[Sql.Function(Name="pg_catalog.box_ge", ServerSideOnly=true)]
		public static bool? BoxGe(NpgsqlBox? par541, NpgsqlBox? par542)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxGt

		[Sql.Function(Name="pg_catalog.box_gt", ServerSideOnly=true)]
		public static bool? BoxGt(NpgsqlBox? par544, NpgsqlBox? par545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxIn

		[Sql.Function(Name="pg_catalog.box_in", ServerSideOnly=true)]
		public static NpgsqlBox? BoxIn(object par547)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxIntersect

		[Sql.Function(Name="pg_catalog.box_intersect", ServerSideOnly=true)]
		public static NpgsqlBox? BoxIntersect(NpgsqlBox? par549, NpgsqlBox? par550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLe

		[Sql.Function(Name="pg_catalog.box_le", ServerSideOnly=true)]
		public static bool? BoxLe(NpgsqlBox? par552, NpgsqlBox? par553)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLeft

		[Sql.Function(Name="pg_catalog.box_left", ServerSideOnly=true)]
		public static bool? BoxLeft(NpgsqlBox? par555, NpgsqlBox? par556)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLt

		[Sql.Function(Name="pg_catalog.box_lt", ServerSideOnly=true)]
		public static bool? BoxLt(NpgsqlBox? par558, NpgsqlBox? par559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxMul

		[Sql.Function(Name="pg_catalog.box_mul", ServerSideOnly=true)]
		public static NpgsqlBox? BoxMul(NpgsqlBox? par561, NpgsqlPoint? par562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOut

		[Sql.Function(Name="pg_catalog.box_out", ServerSideOnly=true)]
		public static object BoxOut(NpgsqlBox? par564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverabove

		[Sql.Function(Name="pg_catalog.box_overabove", ServerSideOnly=true)]
		public static bool? BoxOverabove(NpgsqlBox? par566, NpgsqlBox? par567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverbelow

		[Sql.Function(Name="pg_catalog.box_overbelow", ServerSideOnly=true)]
		public static bool? BoxOverbelow(NpgsqlBox? par569, NpgsqlBox? par570)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverlap

		[Sql.Function(Name="pg_catalog.box_overlap", ServerSideOnly=true)]
		public static bool? BoxOverlap(NpgsqlBox? par572, NpgsqlBox? par573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverleft

		[Sql.Function(Name="pg_catalog.box_overleft", ServerSideOnly=true)]
		public static bool? BoxOverleft(NpgsqlBox? par575, NpgsqlBox? par576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverright

		[Sql.Function(Name="pg_catalog.box_overright", ServerSideOnly=true)]
		public static bool? BoxOverright(NpgsqlBox? par578, NpgsqlBox? par579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxRecv

		[Sql.Function(Name="pg_catalog.box_recv", ServerSideOnly=true)]
		public static NpgsqlBox? BoxRecv(object par581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxRight

		[Sql.Function(Name="pg_catalog.box_right", ServerSideOnly=true)]
		public static bool? BoxRight(NpgsqlBox? par583, NpgsqlBox? par584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSame

		[Sql.Function(Name="pg_catalog.box_same", ServerSideOnly=true)]
		public static bool? BoxSame(NpgsqlBox? par586, NpgsqlBox? par587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSend

		[Sql.Function(Name="pg_catalog.box_send", ServerSideOnly=true)]
		public static byte[] BoxSend(NpgsqlBox? par589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSub

		[Sql.Function(Name="pg_catalog.box_sub", ServerSideOnly=true)]
		public static NpgsqlBox? BoxSub(NpgsqlBox? par591, NpgsqlPoint? par592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchar

		[Sql.Function(Name="pg_catalog.bpchar", ServerSideOnly=true)]
		public static string Bpchar(object par600)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharLarger

		[Sql.Function(Name="pg_catalog.bpchar_larger", ServerSideOnly=true)]
		public static string BpcharLarger(string par602, string par603)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternGe

		[Sql.Function(Name="pg_catalog.bpchar_pattern_ge", ServerSideOnly=true)]
		public static bool? BpcharPatternGe(string par605, string par606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternGt

		[Sql.Function(Name="pg_catalog.bpchar_pattern_gt", ServerSideOnly=true)]
		public static bool? BpcharPatternGt(string par608, string par609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternLe

		[Sql.Function(Name="pg_catalog.bpchar_pattern_le", ServerSideOnly=true)]
		public static bool? BpcharPatternLe(string par611, string par612)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternLt

		[Sql.Function(Name="pg_catalog.bpchar_pattern_lt", ServerSideOnly=true)]
		public static bool? BpcharPatternLt(string par614, string par615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharSmaller

		[Sql.Function(Name="pg_catalog.bpchar_smaller", ServerSideOnly=true)]
		public static string BpcharSmaller(string par617, string par618)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharSortsupport

		[Sql.Function(Name="pg_catalog.bpchar_sortsupport", ServerSideOnly=true)]
		public static object BpcharSortsupport(object par619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharcmp

		[Sql.Function(Name="pg_catalog.bpcharcmp", ServerSideOnly=true)]
		public static int? Bpcharcmp(string par621, string par622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchareq

		[Sql.Function(Name="pg_catalog.bpchareq", ServerSideOnly=true)]
		public static bool? Bpchareq(string par624, string par625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharge

		[Sql.Function(Name="pg_catalog.bpcharge", ServerSideOnly=true)]
		public static bool? Bpcharge(string par627, string par628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchargt

		[Sql.Function(Name="pg_catalog.bpchargt", ServerSideOnly=true)]
		public static bool? Bpchargt(string par630, string par631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchariclike

		[Sql.Function(Name="pg_catalog.bpchariclike", ServerSideOnly=true)]
		public static bool? Bpchariclike(string par633, string par634)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicnlike

		[Sql.Function(Name="pg_catalog.bpcharicnlike", ServerSideOnly=true)]
		public static bool? Bpcharicnlike(string par636, string par637)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicregexeq

		[Sql.Function(Name="pg_catalog.bpcharicregexeq", ServerSideOnly=true)]
		public static bool? Bpcharicregexeq(string par639, string par640)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicregexne

		[Sql.Function(Name="pg_catalog.bpcharicregexne", ServerSideOnly=true)]
		public static bool? Bpcharicregexne(string par642, string par643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharin

		[Sql.Function(Name="pg_catalog.bpcharin", ServerSideOnly=true)]
		public static string Bpcharin(object par645, int? par646, int? par647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharle

		[Sql.Function(Name="pg_catalog.bpcharle", ServerSideOnly=true)]
		public static bool? Bpcharle(string par649, string par650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharlike

		[Sql.Function(Name="pg_catalog.bpcharlike", ServerSideOnly=true)]
		public static bool? Bpcharlike(string par652, string par653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharlt

		[Sql.Function(Name="pg_catalog.bpcharlt", ServerSideOnly=true)]
		public static bool? Bpcharlt(string par655, string par656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharne

		[Sql.Function(Name="pg_catalog.bpcharne", ServerSideOnly=true)]
		public static bool? Bpcharne(string par658, string par659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharnlike

		[Sql.Function(Name="pg_catalog.bpcharnlike", ServerSideOnly=true)]
		public static bool? Bpcharnlike(string par661, string par662)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharout

		[Sql.Function(Name="pg_catalog.bpcharout", ServerSideOnly=true)]
		public static object Bpcharout(string par664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharrecv

		[Sql.Function(Name="pg_catalog.bpcharrecv", ServerSideOnly=true)]
		public static string Bpcharrecv(object par666, int? par667, int? par668)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharregexeq

		[Sql.Function(Name="pg_catalog.bpcharregexeq", ServerSideOnly=true)]
		public static bool? Bpcharregexeq(string par670, string par671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharregexne

		[Sql.Function(Name="pg_catalog.bpcharregexne", ServerSideOnly=true)]
		public static bool? Bpcharregexne(string par673, string par674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharsend

		[Sql.Function(Name="pg_catalog.bpcharsend", ServerSideOnly=true)]
		public static byte[] Bpcharsend(string par676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchartypmodin

		[Sql.Function(Name="pg_catalog.bpchartypmodin", ServerSideOnly=true)]
		public static int? Bpchartypmodin(object par678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchartypmodout

		[Sql.Function(Name="pg_catalog.bpchartypmodout", ServerSideOnly=true)]
		public static object Bpchartypmodout(int? par680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinDesummarizeRange

		[Sql.Function(Name="pg_catalog.brin_desummarize_range", ServerSideOnly=true)]
		public static object BrinDesummarizeRange(object par681, long? par682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionAddValue

		[Sql.Function(Name="pg_catalog.brin_inclusion_add_value", ServerSideOnly=true)]
		public static bool? BrinInclusionAddValue(object par684, object par685, object par686, object par687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionConsistent

		[Sql.Function(Name="pg_catalog.brin_inclusion_consistent", ServerSideOnly=true)]
		public static bool? BrinInclusionConsistent(object par689, object par690, object par691)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionOpcinfo

		[Sql.Function(Name="pg_catalog.brin_inclusion_opcinfo", ServerSideOnly=true)]
		public static object BrinInclusionOpcinfo(object par693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionUnion

		[Sql.Function(Name="pg_catalog.brin_inclusion_union", ServerSideOnly=true)]
		public static bool? BrinInclusionUnion(object par695, object par696, object par697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxAddValue

		[Sql.Function(Name="pg_catalog.brin_minmax_add_value", ServerSideOnly=true)]
		public static bool? BrinMinmaxAddValue(object par699, object par700, object par701, object par702)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxConsistent

		[Sql.Function(Name="pg_catalog.brin_minmax_consistent", ServerSideOnly=true)]
		public static bool? BrinMinmaxConsistent(object par704, object par705, object par706)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxOpcinfo

		[Sql.Function(Name="pg_catalog.brin_minmax_opcinfo", ServerSideOnly=true)]
		public static object BrinMinmaxOpcinfo(object par708)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxUnion

		[Sql.Function(Name="pg_catalog.brin_minmax_union", ServerSideOnly=true)]
		public static bool? BrinMinmaxUnion(object par710, object par711, object par712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinSummarizeNewValues

		[Sql.Function(Name="pg_catalog.brin_summarize_new_values", ServerSideOnly=true)]
		public static int? BrinSummarizeNewValues(object par714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinSummarizeRange

		[Sql.Function(Name="pg_catalog.brin_summarize_range", ServerSideOnly=true)]
		public static int? BrinSummarizeRange(object par716, long? par717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinhandler

		[Sql.Function(Name="pg_catalog.brinhandler", ServerSideOnly=true)]
		public static object Brinhandler(object par719)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Broadcast

		[Sql.Function(Name="pg_catalog.broadcast", ServerSideOnly=true)]
		public static NpgsqlInet? Broadcast(NpgsqlInet? par721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btarraycmp

		[Sql.Function(Name="pg_catalog.btarraycmp", ServerSideOnly=true)]
		public static int? Btarraycmp(object par723, object par724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btboolcmp

		[Sql.Function(Name="pg_catalog.btboolcmp", ServerSideOnly=true)]
		public static int? Btboolcmp(bool? par726, bool? par727)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BtbpcharPatternCmp

		[Sql.Function(Name="pg_catalog.btbpchar_pattern_cmp", ServerSideOnly=true)]
		public static int? BtbpcharPatternCmp(string par729, string par730)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BtbpcharPatternSortsupport

		[Sql.Function(Name="pg_catalog.btbpchar_pattern_sortsupport", ServerSideOnly=true)]
		public static object BtbpcharPatternSortsupport(object par731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btcharcmp

		[Sql.Function(Name="pg_catalog.btcharcmp", ServerSideOnly=true)]
		public static int? Btcharcmp(object par733, object par734)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat48cmp

		[Sql.Function(Name="pg_catalog.btfloat48cmp", ServerSideOnly=true)]
		public static int? Btfloat48cmp(float? par736, double? par737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat4cmp

		[Sql.Function(Name="pg_catalog.btfloat4cmp", ServerSideOnly=true)]
		public static int? Btfloat4cmp(float? par739, float? par740)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat4sortsupport

		[Sql.Function(Name="pg_catalog.btfloat4sortsupport", ServerSideOnly=true)]
		public static object Btfloat4sortsupport(object par741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat84cmp

		[Sql.Function(Name="pg_catalog.btfloat84cmp", ServerSideOnly=true)]
		public static int? Btfloat84cmp(double? par743, float? par744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat8cmp

		[Sql.Function(Name="pg_catalog.btfloat8cmp", ServerSideOnly=true)]
		public static int? Btfloat8cmp(double? par746, double? par747)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat8sortsupport

		[Sql.Function(Name="pg_catalog.btfloat8sortsupport", ServerSideOnly=true)]
		public static object Btfloat8sortsupport(object par748)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bthandler

		[Sql.Function(Name="pg_catalog.bthandler", ServerSideOnly=true)]
		public static object Bthandler(object par750)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint24cmp

		[Sql.Function(Name="pg_catalog.btint24cmp", ServerSideOnly=true)]
		public static int? Btint24cmp(short? par752, int? par753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint28cmp

		[Sql.Function(Name="pg_catalog.btint28cmp", ServerSideOnly=true)]
		public static int? Btint28cmp(short? par755, long? par756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint2cmp

		[Sql.Function(Name="pg_catalog.btint2cmp", ServerSideOnly=true)]
		public static int? Btint2cmp(short? par758, short? par759)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint2sortsupport

		[Sql.Function(Name="pg_catalog.btint2sortsupport", ServerSideOnly=true)]
		public static object Btint2sortsupport(object par760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint42cmp

		[Sql.Function(Name="pg_catalog.btint42cmp", ServerSideOnly=true)]
		public static int? Btint42cmp(int? par762, short? par763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint48cmp

		[Sql.Function(Name="pg_catalog.btint48cmp", ServerSideOnly=true)]
		public static int? Btint48cmp(int? par765, long? par766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint4cmp

		[Sql.Function(Name="pg_catalog.btint4cmp", ServerSideOnly=true)]
		public static int? Btint4cmp(int? par768, int? par769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint4sortsupport

		[Sql.Function(Name="pg_catalog.btint4sortsupport", ServerSideOnly=true)]
		public static object Btint4sortsupport(object par770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint82cmp

		[Sql.Function(Name="pg_catalog.btint82cmp", ServerSideOnly=true)]
		public static int? Btint82cmp(long? par772, short? par773)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint84cmp

		[Sql.Function(Name="pg_catalog.btint84cmp", ServerSideOnly=true)]
		public static int? Btint84cmp(long? par775, int? par776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint8cmp

		[Sql.Function(Name="pg_catalog.btint8cmp", ServerSideOnly=true)]
		public static int? Btint8cmp(long? par778, long? par779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint8sortsupport

		[Sql.Function(Name="pg_catalog.btint8sortsupport", ServerSideOnly=true)]
		public static object Btint8sortsupport(object par780)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnamecmp

		[Sql.Function(Name="pg_catalog.btnamecmp", ServerSideOnly=true)]
		public static int? Btnamecmp(string par782, string par783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnamesortsupport

		[Sql.Function(Name="pg_catalog.btnamesortsupport", ServerSideOnly=true)]
		public static object Btnamesortsupport(object par784)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnametextcmp

		[Sql.Function(Name="pg_catalog.btnametextcmp", ServerSideOnly=true)]
		public static int? Btnametextcmp(string par786, string par787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidcmp

		[Sql.Function(Name="pg_catalog.btoidcmp", ServerSideOnly=true)]
		public static int? Btoidcmp(int? par789, int? par790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidsortsupport

		[Sql.Function(Name="pg_catalog.btoidsortsupport", ServerSideOnly=true)]
		public static object Btoidsortsupport(object par791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidvectorcmp

		[Sql.Function(Name="pg_catalog.btoidvectorcmp", ServerSideOnly=true)]
		public static int? Btoidvectorcmp(object par793, object par794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrecordcmp

		[Sql.Function(Name="pg_catalog.btrecordcmp", ServerSideOnly=true)]
		public static int? Btrecordcmp(object par796, object par797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrecordimagecmp

		[Sql.Function(Name="pg_catalog.btrecordimagecmp", ServerSideOnly=true)]
		public static int? Btrecordimagecmp(object par799, object par800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrim

		[Sql.Function(Name="pg_catalog.btrim", ServerSideOnly=true)]
		public static string Btrim(string par808)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BttextPatternCmp

		[Sql.Function(Name="pg_catalog.bttext_pattern_cmp", ServerSideOnly=true)]
		public static int? BttextPatternCmp(string par810, string par811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BttextPatternSortsupport

		[Sql.Function(Name="pg_catalog.bttext_pattern_sortsupport", ServerSideOnly=true)]
		public static object BttextPatternSortsupport(object par812)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextcmp

		[Sql.Function(Name="pg_catalog.bttextcmp", ServerSideOnly=true)]
		public static int? Bttextcmp(string par814, string par815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextnamecmp

		[Sql.Function(Name="pg_catalog.bttextnamecmp", ServerSideOnly=true)]
		public static int? Bttextnamecmp(string par817, string par818)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextsortsupport

		[Sql.Function(Name="pg_catalog.bttextsortsupport", ServerSideOnly=true)]
		public static object Bttextsortsupport(object par819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttidcmp

		[Sql.Function(Name="pg_catalog.bttidcmp", ServerSideOnly=true)]
		public static int? Bttidcmp(object par821, object par822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaSortsupport

		[Sql.Function(Name="pg_catalog.bytea_sortsupport", ServerSideOnly=true)]
		public static object ByteaSortsupport(object par823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaStringAggFinalfn

		[Sql.Function(Name="pg_catalog.bytea_string_agg_finalfn", ServerSideOnly=true)]
		public static byte[] ByteaStringAggFinalfn(object par825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaStringAggTransfn

		[Sql.Function(Name="pg_catalog.bytea_string_agg_transfn", ServerSideOnly=true)]
		public static object ByteaStringAggTransfn(object par827, byte[] par828, byte[] par829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteacat

		[Sql.Function(Name="pg_catalog.byteacat", ServerSideOnly=true)]
		public static byte[] Byteacat(byte[] par831, byte[] par832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteacmp

		[Sql.Function(Name="pg_catalog.byteacmp", ServerSideOnly=true)]
		public static int? Byteacmp(byte[] par834, byte[] par835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteaeq

		[Sql.Function(Name="pg_catalog.byteaeq", ServerSideOnly=true)]
		public static bool? Byteaeq(byte[] par837, byte[] par838)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteage

		[Sql.Function(Name="pg_catalog.byteage", ServerSideOnly=true)]
		public static bool? Byteage(byte[] par840, byte[] par841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteagt

		[Sql.Function(Name="pg_catalog.byteagt", ServerSideOnly=true)]
		public static bool? Byteagt(byte[] par843, byte[] par844)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteain

		[Sql.Function(Name="pg_catalog.byteain", ServerSideOnly=true)]
		public static byte[] Byteain(object par846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteale

		[Sql.Function(Name="pg_catalog.byteale", ServerSideOnly=true)]
		public static bool? Byteale(byte[] par848, byte[] par849)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytealike

		[Sql.Function(Name="pg_catalog.bytealike", ServerSideOnly=true)]
		public static bool? Bytealike(byte[] par851, byte[] par852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytealt

		[Sql.Function(Name="pg_catalog.bytealt", ServerSideOnly=true)]
		public static bool? Bytealt(byte[] par854, byte[] par855)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteane

		[Sql.Function(Name="pg_catalog.byteane", ServerSideOnly=true)]
		public static bool? Byteane(byte[] par857, byte[] par858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteanlike

		[Sql.Function(Name="pg_catalog.byteanlike", ServerSideOnly=true)]
		public static bool? Byteanlike(byte[] par860, byte[] par861)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteaout

		[Sql.Function(Name="pg_catalog.byteaout", ServerSideOnly=true)]
		public static object Byteaout(byte[] par863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytearecv

		[Sql.Function(Name="pg_catalog.bytearecv", ServerSideOnly=true)]
		public static byte[] Bytearecv(object par865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteasend

		[Sql.Function(Name="pg_catalog.byteasend", ServerSideOnly=true)]
		public static byte[] Byteasend(byte[] par867)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cardinality

		[Sql.Function(Name="pg_catalog.cardinality", ServerSideOnly=true)]
		public static int? Cardinality(object par869)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashCmp

		[Sql.Function(Name="pg_catalog.cash_cmp", ServerSideOnly=true)]
		public static int? CashCmp(decimal? par871, decimal? par872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivCash

		[Sql.Function(Name="pg_catalog.cash_div_cash", ServerSideOnly=true)]
		public static double? CashDivCash(decimal? par874, decimal? par875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivFlt4

		[Sql.Function(Name="pg_catalog.cash_div_flt4", ServerSideOnly=true)]
		public static decimal? CashDivFlt4(decimal? par877, float? par878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivFlt8

		[Sql.Function(Name="pg_catalog.cash_div_flt8", ServerSideOnly=true)]
		public static decimal? CashDivFlt8(decimal? par880, double? par881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt2

		[Sql.Function(Name="pg_catalog.cash_div_int2", ServerSideOnly=true)]
		public static decimal? CashDivInt2(decimal? par883, short? par884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt4

		[Sql.Function(Name="pg_catalog.cash_div_int4", ServerSideOnly=true)]
		public static decimal? CashDivInt4(decimal? par886, int? par887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt8

		[Sql.Function(Name="pg_catalog.cash_div_int8", ServerSideOnly=true)]
		public static decimal? CashDivInt8(decimal? par889, long? par890)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashEq

		[Sql.Function(Name="pg_catalog.cash_eq", ServerSideOnly=true)]
		public static bool? CashEq(decimal? par892, decimal? par893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashGe

		[Sql.Function(Name="pg_catalog.cash_ge", ServerSideOnly=true)]
		public static bool? CashGe(decimal? par895, decimal? par896)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashGt

		[Sql.Function(Name="pg_catalog.cash_gt", ServerSideOnly=true)]
		public static bool? CashGt(decimal? par898, decimal? par899)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashIn

		[Sql.Function(Name="pg_catalog.cash_in", ServerSideOnly=true)]
		public static decimal? CashIn(object par901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashLe

		[Sql.Function(Name="pg_catalog.cash_le", ServerSideOnly=true)]
		public static bool? CashLe(decimal? par903, decimal? par904)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashLt

		[Sql.Function(Name="pg_catalog.cash_lt", ServerSideOnly=true)]
		public static bool? CashLt(decimal? par906, decimal? par907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMi

		[Sql.Function(Name="pg_catalog.cash_mi", ServerSideOnly=true)]
		public static decimal? CashMi(decimal? par909, decimal? par910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulFlt4

		[Sql.Function(Name="pg_catalog.cash_mul_flt4", ServerSideOnly=true)]
		public static decimal? CashMulFlt4(decimal? par912, float? par913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulFlt8

		[Sql.Function(Name="pg_catalog.cash_mul_flt8", ServerSideOnly=true)]
		public static decimal? CashMulFlt8(decimal? par915, double? par916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt2

		[Sql.Function(Name="pg_catalog.cash_mul_int2", ServerSideOnly=true)]
		public static decimal? CashMulInt2(decimal? par918, short? par919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt4

		[Sql.Function(Name="pg_catalog.cash_mul_int4", ServerSideOnly=true)]
		public static decimal? CashMulInt4(decimal? par921, int? par922)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt8

		[Sql.Function(Name="pg_catalog.cash_mul_int8", ServerSideOnly=true)]
		public static decimal? CashMulInt8(decimal? par924, long? par925)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashNe

		[Sql.Function(Name="pg_catalog.cash_ne", ServerSideOnly=true)]
		public static bool? CashNe(decimal? par927, decimal? par928)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashOut

		[Sql.Function(Name="pg_catalog.cash_out", ServerSideOnly=true)]
		public static object CashOut(decimal? par930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashPl

		[Sql.Function(Name="pg_catalog.cash_pl", ServerSideOnly=true)]
		public static decimal? CashPl(decimal? par932, decimal? par933)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashRecv

		[Sql.Function(Name="pg_catalog.cash_recv", ServerSideOnly=true)]
		public static decimal? CashRecv(object par935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashSend

		[Sql.Function(Name="pg_catalog.cash_send", ServerSideOnly=true)]
		public static byte[] CashSend(decimal? par937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashWords

		[Sql.Function(Name="pg_catalog.cash_words", ServerSideOnly=true)]
		public static string CashWords(decimal? par939)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cashlarger

		[Sql.Function(Name="pg_catalog.cashlarger", ServerSideOnly=true)]
		public static decimal? Cashlarger(decimal? par941, decimal? par942)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cashsmaller

		[Sql.Function(Name="pg_catalog.cashsmaller", ServerSideOnly=true)]
		public static decimal? Cashsmaller(decimal? par944, decimal? par945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cbrt

		[Sql.Function(Name="pg_catalog.cbrt", ServerSideOnly=true)]
		public static double? Cbrt(double? par947)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ceil

		[Sql.Function(Name="pg_catalog.ceil", ServerSideOnly=true)]
		public static double? Ceil(double? par951)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ceiling

		[Sql.Function(Name="pg_catalog.ceiling", ServerSideOnly=true)]
		public static double? Ceiling(double? par955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Center

		[Sql.Function(Name="pg_catalog.center", ServerSideOnly=true)]
		public static NpgsqlPoint? Center(NpgsqlCircle? par959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Char

		[Sql.Function(Name="pg_catalog.char", ServerSideOnly=true)]
		public static object Char(string par963)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CharLength

		[Sql.Function(Name="pg_catalog.char_length", ServerSideOnly=true)]
		public static int? CharLength(string par967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CharacterLength

		[Sql.Function(Name="pg_catalog.character_length", ServerSideOnly=true)]
		public static int? CharacterLength(string par971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chareq

		[Sql.Function(Name="pg_catalog.chareq", ServerSideOnly=true)]
		public static bool? Chareq(object par973, object par974)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charge

		[Sql.Function(Name="pg_catalog.charge", ServerSideOnly=true)]
		public static bool? Charge(object par976, object par977)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chargt

		[Sql.Function(Name="pg_catalog.chargt", ServerSideOnly=true)]
		public static bool? Chargt(object par979, object par980)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charin

		[Sql.Function(Name="pg_catalog.charin", ServerSideOnly=true)]
		public static object Charin(object par982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charle

		[Sql.Function(Name="pg_catalog.charle", ServerSideOnly=true)]
		public static bool? Charle(object par984, object par985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charlt

		[Sql.Function(Name="pg_catalog.charlt", ServerSideOnly=true)]
		public static bool? Charlt(object par987, object par988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charne

		[Sql.Function(Name="pg_catalog.charne", ServerSideOnly=true)]
		public static bool? Charne(object par990, object par991)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charout

		[Sql.Function(Name="pg_catalog.charout", ServerSideOnly=true)]
		public static object Charout(object par993)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charrecv

		[Sql.Function(Name="pg_catalog.charrecv", ServerSideOnly=true)]
		public static object Charrecv(object par995)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charsend

		[Sql.Function(Name="pg_catalog.charsend", ServerSideOnly=true)]
		public static byte[] Charsend(object par997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chr

		[Sql.Function(Name="pg_catalog.chr", ServerSideOnly=true)]
		public static string Chr(int? par999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cideq

		[Sql.Function(Name="pg_catalog.cideq", ServerSideOnly=true)]
		public static bool? Cideq(object par1001, object par1002)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidin

		[Sql.Function(Name="pg_catalog.cidin", ServerSideOnly=true)]
		public static object Cidin(object par1004)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidout

		[Sql.Function(Name="pg_catalog.cidout", ServerSideOnly=true)]
		public static object Cidout(object par1006)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidr

		[Sql.Function(Name="pg_catalog.cidr", ServerSideOnly=true)]
		public static NpgsqlInet? Cidr(NpgsqlInet? par1008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrIn

		[Sql.Function(Name="pg_catalog.cidr_in", ServerSideOnly=true)]
		public static NpgsqlInet? CidrIn(object par1010)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrOut

		[Sql.Function(Name="pg_catalog.cidr_out", ServerSideOnly=true)]
		public static object CidrOut(NpgsqlInet? par1012)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrRecv

		[Sql.Function(Name="pg_catalog.cidr_recv", ServerSideOnly=true)]
		public static NpgsqlInet? CidrRecv(object par1014)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrSend

		[Sql.Function(Name="pg_catalog.cidr_send", ServerSideOnly=true)]
		public static byte[] CidrSend(NpgsqlInet? par1016)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidrecv

		[Sql.Function(Name="pg_catalog.cidrecv", ServerSideOnly=true)]
		public static object Cidrecv(object par1018)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidsend

		[Sql.Function(Name="pg_catalog.cidsend", ServerSideOnly=true)]
		public static byte[] Cidsend(object par1020)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Circle

		[Sql.Function(Name="pg_catalog.circle", ServerSideOnly=true)]
		public static NpgsqlCircle? Circle(NpgsqlBox? par1027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleAbove

		[Sql.Function(Name="pg_catalog.circle_above", ServerSideOnly=true)]
		public static bool? CircleAbove(NpgsqlCircle? par1029, NpgsqlCircle? par1030)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleAddPt

		[Sql.Function(Name="pg_catalog.circle_add_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleAddPt(NpgsqlCircle? par1032, NpgsqlPoint? par1033)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleBelow

		[Sql.Function(Name="pg_catalog.circle_below", ServerSideOnly=true)]
		public static bool? CircleBelow(NpgsqlCircle? par1035, NpgsqlCircle? par1036)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleCenter

		[Sql.Function(Name="pg_catalog.circle_center", ServerSideOnly=true)]
		public static NpgsqlPoint? CircleCenter(NpgsqlCircle? par1038)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContain

		[Sql.Function(Name="pg_catalog.circle_contain", ServerSideOnly=true)]
		public static bool? CircleContain(NpgsqlCircle? par1040, NpgsqlCircle? par1041)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContainPt

		[Sql.Function(Name="pg_catalog.circle_contain_pt", ServerSideOnly=true)]
		public static bool? CircleContainPt(NpgsqlCircle? par1043, NpgsqlPoint? par1044)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContained

		[Sql.Function(Name="pg_catalog.circle_contained", ServerSideOnly=true)]
		public static bool? CircleContained(NpgsqlCircle? par1046, NpgsqlCircle? par1047)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleDistance

		[Sql.Function(Name="pg_catalog.circle_distance", ServerSideOnly=true)]
		public static double? CircleDistance(NpgsqlCircle? par1049, NpgsqlCircle? par1050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleDivPt

		[Sql.Function(Name="pg_catalog.circle_div_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleDivPt(NpgsqlCircle? par1052, NpgsqlPoint? par1053)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleEq

		[Sql.Function(Name="pg_catalog.circle_eq", ServerSideOnly=true)]
		public static bool? CircleEq(NpgsqlCircle? par1055, NpgsqlCircle? par1056)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleGe

		[Sql.Function(Name="pg_catalog.circle_ge", ServerSideOnly=true)]
		public static bool? CircleGe(NpgsqlCircle? par1058, NpgsqlCircle? par1059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleGt

		[Sql.Function(Name="pg_catalog.circle_gt", ServerSideOnly=true)]
		public static bool? CircleGt(NpgsqlCircle? par1061, NpgsqlCircle? par1062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleIn

		[Sql.Function(Name="pg_catalog.circle_in", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleIn(object par1064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLe

		[Sql.Function(Name="pg_catalog.circle_le", ServerSideOnly=true)]
		public static bool? CircleLe(NpgsqlCircle? par1066, NpgsqlCircle? par1067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLeft

		[Sql.Function(Name="pg_catalog.circle_left", ServerSideOnly=true)]
		public static bool? CircleLeft(NpgsqlCircle? par1069, NpgsqlCircle? par1070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLt

		[Sql.Function(Name="pg_catalog.circle_lt", ServerSideOnly=true)]
		public static bool? CircleLt(NpgsqlCircle? par1072, NpgsqlCircle? par1073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleMulPt

		[Sql.Function(Name="pg_catalog.circle_mul_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleMulPt(NpgsqlCircle? par1075, NpgsqlPoint? par1076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleNe

		[Sql.Function(Name="pg_catalog.circle_ne", ServerSideOnly=true)]
		public static bool? CircleNe(NpgsqlCircle? par1078, NpgsqlCircle? par1079)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOut

		[Sql.Function(Name="pg_catalog.circle_out", ServerSideOnly=true)]
		public static object CircleOut(NpgsqlCircle? par1081)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverabove

		[Sql.Function(Name="pg_catalog.circle_overabove", ServerSideOnly=true)]
		public static bool? CircleOverabove(NpgsqlCircle? par1083, NpgsqlCircle? par1084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverbelow

		[Sql.Function(Name="pg_catalog.circle_overbelow", ServerSideOnly=true)]
		public static bool? CircleOverbelow(NpgsqlCircle? par1086, NpgsqlCircle? par1087)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverlap

		[Sql.Function(Name="pg_catalog.circle_overlap", ServerSideOnly=true)]
		public static bool? CircleOverlap(NpgsqlCircle? par1089, NpgsqlCircle? par1090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverleft

		[Sql.Function(Name="pg_catalog.circle_overleft", ServerSideOnly=true)]
		public static bool? CircleOverleft(NpgsqlCircle? par1092, NpgsqlCircle? par1093)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverright

		[Sql.Function(Name="pg_catalog.circle_overright", ServerSideOnly=true)]
		public static bool? CircleOverright(NpgsqlCircle? par1095, NpgsqlCircle? par1096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleRecv

		[Sql.Function(Name="pg_catalog.circle_recv", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleRecv(object par1098)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleRight

		[Sql.Function(Name="pg_catalog.circle_right", ServerSideOnly=true)]
		public static bool? CircleRight(NpgsqlCircle? par1100, NpgsqlCircle? par1101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSame

		[Sql.Function(Name="pg_catalog.circle_same", ServerSideOnly=true)]
		public static bool? CircleSame(NpgsqlCircle? par1103, NpgsqlCircle? par1104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSend

		[Sql.Function(Name="pg_catalog.circle_send", ServerSideOnly=true)]
		public static byte[] CircleSend(NpgsqlCircle? par1106)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSubPt

		[Sql.Function(Name="pg_catalog.circle_sub_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleSubPt(NpgsqlCircle? par1108, NpgsqlPoint? par1109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClockTimestamp

		[Sql.Function(Name="pg_catalog.clock_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? ClockTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLb

		[Sql.Function(Name="pg_catalog.close_lb", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLb(NpgsqlLine? par1112, NpgsqlBox? par1113)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLs

		[Sql.Function(Name="pg_catalog.close_ls", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLs(NpgsqlLine? par1115, NpgsqlLSeg? par1116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLseg

		[Sql.Function(Name="pg_catalog.close_lseg", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLseg(NpgsqlLSeg? par1118, NpgsqlLSeg? par1119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePb

		[Sql.Function(Name="pg_catalog.close_pb", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePb(NpgsqlPoint? par1121, NpgsqlBox? par1122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePl

		[Sql.Function(Name="pg_catalog.close_pl", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePl(NpgsqlPoint? par1124, NpgsqlLine? par1125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePs

		[Sql.Function(Name="pg_catalog.close_ps", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePs(NpgsqlPoint? par1127, NpgsqlLSeg? par1128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseSb

		[Sql.Function(Name="pg_catalog.close_sb", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseSb(NpgsqlLSeg? par1130, NpgsqlBox? par1131)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseSl

		[Sql.Function(Name="pg_catalog.close_sl", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseSl(NpgsqlLSeg? par1133, NpgsqlLine? par1134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ColDescription

		[Sql.Function(Name="pg_catalog.col_description", ServerSideOnly=true)]
		public static string ColDescription(int? par1136, int? par1137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Concat

		[Sql.Function(Name="pg_catalog.concat", ServerSideOnly=true)]
		public static string Concat(object par1139)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConcatWs

		[Sql.Function(Name="pg_catalog.concat_ws", ServerSideOnly=true)]
		public static string ConcatWs(string par1141, object par1142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Contjoinsel

		[Sql.Function(Name="pg_catalog.contjoinsel", ServerSideOnly=true)]
		public static double? Contjoinsel(object par1144, int? par1145, object par1146, short? par1147, object par1148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Contsel

		[Sql.Function(Name="pg_catalog.contsel", ServerSideOnly=true)]
		public static double? Contsel(object par1150, int? par1151, object par1152, int? par1153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Convert

		[Sql.Function(Name="pg_catalog.convert", ServerSideOnly=true)]
		public static byte[] Convert(byte[] par1155, string par1156, string par1157)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConvertFrom

		[Sql.Function(Name="pg_catalog.convert_from", ServerSideOnly=true)]
		public static string ConvertFrom(byte[] par1159, string par1160)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConvertTo

		[Sql.Function(Name="pg_catalog.convert_to", ServerSideOnly=true)]
		public static byte[] ConvertTo(string par1162, string par1163)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Corr

		[Sql.Function(Name="pg_catalog.corr", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? Corr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1165, Expression<Func<TSource, double?>> par1166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cos

		[Sql.Function(Name="pg_catalog.cos", ServerSideOnly=true)]
		public static double? Cos(double? par1168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cosd

		[Sql.Function(Name="pg_catalog.cosd", ServerSideOnly=true)]
		public static double? Cosd(double? par1170)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cosh

		[Sql.Function(Name="pg_catalog.cosh", ServerSideOnly=true)]
		public static double? Cosh(double? par1172)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cot

		[Sql.Function(Name="pg_catalog.cot", ServerSideOnly=true)]
		public static double? Cot(double? par1174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cotd

		[Sql.Function(Name="pg_catalog.cotd", ServerSideOnly=true)]
		public static double? Cotd(double? par1176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Count

		[Sql.Function(Name="pg_catalog.count", ServerSideOnly=true, IsAggregate = true)]
		public static long? Count<TSource>(this IEnumerable<TSource> src)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CovarPop

		[Sql.Function(Name="pg_catalog.covar_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? CovarPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1181, Expression<Func<TSource, double?>> par1182)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CovarSamp

		[Sql.Function(Name="pg_catalog.covar_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? CovarSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1184, Expression<Func<TSource, double?>> par1185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringIn

		[Sql.Function(Name="pg_catalog.cstring_in", ServerSideOnly=true)]
		public static object CstringIn(object par1187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringOut

		[Sql.Function(Name="pg_catalog.cstring_out", ServerSideOnly=true)]
		public static object CstringOut(object par1189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringRecv

		[Sql.Function(Name="pg_catalog.cstring_recv", ServerSideOnly=true)]
		public static object CstringRecv(object par1191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringSend

		[Sql.Function(Name="pg_catalog.cstring_send", ServerSideOnly=true)]
		public static byte[] CstringSend(object par1193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CumeDist

		[Sql.Function(Name="pg_catalog.cume_dist", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? CumeDist<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par1196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CumeDistFinal

		[Sql.Function(Name="pg_catalog.cume_dist_final", ServerSideOnly=true)]
		public static double? CumeDistFinal(object par1198, object par1199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentDatabase

		[Sql.Function(Name="pg_catalog.current_database", ServerSideOnly=true)]
		public static string CurrentDatabase()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentQuery

		[Sql.Function(Name="pg_catalog.current_query", ServerSideOnly=true)]
		public static string CurrentQuery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSchema

		[Sql.Function(Name="pg_catalog.current_schema", ServerSideOnly=true)]
		public static string CurrentSchema()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSchemas

		[Sql.Function(Name="pg_catalog.current_schemas", ServerSideOnly=true)]
		public static object CurrentSchemas(bool? par1204)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSetting

		[Sql.Function(Name="pg_catalog.current_setting", ServerSideOnly=true)]
		public static string CurrentSetting(string par1208, bool? par1209)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentUser

		[Sql.Function(Name="pg_catalog.current_user", ServerSideOnly=true)]
		public static string CurrentUser()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currtid2

		[Sql.Function(Name="pg_catalog.currtid2", ServerSideOnly=true)]
		public static object Currtid2(string par1212, object par1213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currtid

		[Sql.Function(Name="pg_catalog.currtid", ServerSideOnly=true)]
		public static object Currtid(int? par1215, object par1216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currval

		[Sql.Function(Name="pg_catalog.currval", ServerSideOnly=true)]
		public static long? Currval(object par1218)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CursorToXml

		[Sql.Function(Name="pg_catalog.cursor_to_xml", ServerSideOnly=true)]
		public static string CursorToXml(object cursor, int? count, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CursorToXmlschema

		[Sql.Function(Name="pg_catalog.cursor_to_xmlschema", ServerSideOnly=true)]
		public static string CursorToXmlschema(object cursor, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXml

		[Sql.Function(Name="pg_catalog.database_to_xml", ServerSideOnly=true)]
		public static string DatabaseToXml(bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.database_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string DatabaseToXmlAndXmlschema(bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXmlschema

		[Sql.Function(Name="pg_catalog.database_to_xmlschema", ServerSideOnly=true)]
		public static string DatabaseToXmlschema(bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Date

		[Sql.Function(Name="pg_catalog.date", ServerSideOnly=true)]
		public static NpgsqlDate? Date(DateTime? par1227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmp

		[Sql.Function(Name="pg_catalog.date_cmp", ServerSideOnly=true)]
		public static int? DateCmp(NpgsqlDate? par1229, NpgsqlDate? par1230)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmpTimestamp

		[Sql.Function(Name="pg_catalog.date_cmp_timestamp", ServerSideOnly=true)]
		public static int? DateCmpTimestamp(NpgsqlDate? par1232, DateTime? par1233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmpTimestamptz

		[Sql.Function(Name="pg_catalog.date_cmp_timestamptz", ServerSideOnly=true)]
		public static int? DateCmpTimestamptz(NpgsqlDate? par1235, DateTimeOffset? par1236)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEq

		[Sql.Function(Name="pg_catalog.date_eq", ServerSideOnly=true)]
		public static bool? DateEq(NpgsqlDate? par1238, NpgsqlDate? par1239)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEqTimestamp

		[Sql.Function(Name="pg_catalog.date_eq_timestamp", ServerSideOnly=true)]
		public static bool? DateEqTimestamp(NpgsqlDate? par1241, DateTime? par1242)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEqTimestamptz

		[Sql.Function(Name="pg_catalog.date_eq_timestamptz", ServerSideOnly=true)]
		public static bool? DateEqTimestamptz(NpgsqlDate? par1244, DateTimeOffset? par1245)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGe

		[Sql.Function(Name="pg_catalog.date_ge", ServerSideOnly=true)]
		public static bool? DateGe(NpgsqlDate? par1247, NpgsqlDate? par1248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGeTimestamp

		[Sql.Function(Name="pg_catalog.date_ge_timestamp", ServerSideOnly=true)]
		public static bool? DateGeTimestamp(NpgsqlDate? par1250, DateTime? par1251)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGeTimestamptz

		[Sql.Function(Name="pg_catalog.date_ge_timestamptz", ServerSideOnly=true)]
		public static bool? DateGeTimestamptz(NpgsqlDate? par1253, DateTimeOffset? par1254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGt

		[Sql.Function(Name="pg_catalog.date_gt", ServerSideOnly=true)]
		public static bool? DateGt(NpgsqlDate? par1256, NpgsqlDate? par1257)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGtTimestamp

		[Sql.Function(Name="pg_catalog.date_gt_timestamp", ServerSideOnly=true)]
		public static bool? DateGtTimestamp(NpgsqlDate? par1259, DateTime? par1260)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGtTimestamptz

		[Sql.Function(Name="pg_catalog.date_gt_timestamptz", ServerSideOnly=true)]
		public static bool? DateGtTimestamptz(NpgsqlDate? par1262, DateTimeOffset? par1263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateIn

		[Sql.Function(Name="pg_catalog.date_in", ServerSideOnly=true)]
		public static NpgsqlDate? DateIn(object par1265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLarger

		[Sql.Function(Name="pg_catalog.date_larger", ServerSideOnly=true)]
		public static NpgsqlDate? DateLarger(NpgsqlDate? par1267, NpgsqlDate? par1268)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLe

		[Sql.Function(Name="pg_catalog.date_le", ServerSideOnly=true)]
		public static bool? DateLe(NpgsqlDate? par1270, NpgsqlDate? par1271)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLeTimestamp

		[Sql.Function(Name="pg_catalog.date_le_timestamp", ServerSideOnly=true)]
		public static bool? DateLeTimestamp(NpgsqlDate? par1273, DateTime? par1274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLeTimestamptz

		[Sql.Function(Name="pg_catalog.date_le_timestamptz", ServerSideOnly=true)]
		public static bool? DateLeTimestamptz(NpgsqlDate? par1276, DateTimeOffset? par1277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLt

		[Sql.Function(Name="pg_catalog.date_lt", ServerSideOnly=true)]
		public static bool? DateLt(NpgsqlDate? par1279, NpgsqlDate? par1280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLtTimestamp

		[Sql.Function(Name="pg_catalog.date_lt_timestamp", ServerSideOnly=true)]
		public static bool? DateLtTimestamp(NpgsqlDate? par1282, DateTime? par1283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLtTimestamptz

		[Sql.Function(Name="pg_catalog.date_lt_timestamptz", ServerSideOnly=true)]
		public static bool? DateLtTimestamptz(NpgsqlDate? par1285, DateTimeOffset? par1286)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMi

		[Sql.Function(Name="pg_catalog.date_mi", ServerSideOnly=true)]
		public static int? DateMi(NpgsqlDate? par1288, NpgsqlDate? par1289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMiInterval

		[Sql.Function(Name="pg_catalog.date_mi_interval", ServerSideOnly=true)]
		public static DateTime? DateMiInterval(NpgsqlDate? par1291, NpgsqlTimeSpan? par1292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMii

		[Sql.Function(Name="pg_catalog.date_mii", ServerSideOnly=true)]
		public static NpgsqlDate? DateMii(NpgsqlDate? par1294, int? par1295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNe

		[Sql.Function(Name="pg_catalog.date_ne", ServerSideOnly=true)]
		public static bool? DateNe(NpgsqlDate? par1297, NpgsqlDate? par1298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNeTimestamp

		[Sql.Function(Name="pg_catalog.date_ne_timestamp", ServerSideOnly=true)]
		public static bool? DateNeTimestamp(NpgsqlDate? par1300, DateTime? par1301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNeTimestamptz

		[Sql.Function(Name="pg_catalog.date_ne_timestamptz", ServerSideOnly=true)]
		public static bool? DateNeTimestamptz(NpgsqlDate? par1303, DateTimeOffset? par1304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateOut

		[Sql.Function(Name="pg_catalog.date_out", ServerSideOnly=true)]
		public static object DateOut(NpgsqlDate? par1306)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePart

		[Sql.Function(Name="pg_catalog.date_part", ServerSideOnly=true)]
		public static double? DatePart(string par1323, DateTime? par1324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePlInterval

		[Sql.Function(Name="pg_catalog.date_pl_interval", ServerSideOnly=true)]
		public static DateTime? DatePlInterval(NpgsqlDate? par1326, NpgsqlTimeSpan? par1327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePli

		[Sql.Function(Name="pg_catalog.date_pli", ServerSideOnly=true)]
		public static NpgsqlDate? DatePli(NpgsqlDate? par1329, int? par1330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateRecv

		[Sql.Function(Name="pg_catalog.date_recv", ServerSideOnly=true)]
		public static NpgsqlDate? DateRecv(object par1332)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSend

		[Sql.Function(Name="pg_catalog.date_send", ServerSideOnly=true)]
		public static byte[] DateSend(NpgsqlDate? par1334)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSmaller

		[Sql.Function(Name="pg_catalog.date_smaller", ServerSideOnly=true)]
		public static NpgsqlDate? DateSmaller(NpgsqlDate? par1336, NpgsqlDate? par1337)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSortsupport

		[Sql.Function(Name="pg_catalog.date_sortsupport", ServerSideOnly=true)]
		public static object DateSortsupport(object par1338)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateTrunc

		[Sql.Function(Name="pg_catalog.date_trunc", ServerSideOnly=true)]
		public static DateTime? DateTrunc(string par1350, DateTime? par1351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Daterange

		[Sql.Function(Name="pg_catalog.daterange", ServerSideOnly=true)]
		public static object Daterange(NpgsqlDate? par1356, NpgsqlDate? par1357, string par1358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaterangeCanonical

		[Sql.Function(Name="pg_catalog.daterange_canonical", ServerSideOnly=true)]
		public static object DaterangeCanonical(object par1360)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaterangeSubdiff

		[Sql.Function(Name="pg_catalog.daterange_subdiff", ServerSideOnly=true)]
		public static double? DaterangeSubdiff(NpgsqlDate? par1362, NpgsqlDate? par1363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatetimePl

		[Sql.Function(Name="pg_catalog.datetime_pl", ServerSideOnly=true)]
		public static DateTime? DatetimePl(NpgsqlDate? par1365, TimeSpan? par1366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatetimetzPl

		[Sql.Function(Name="pg_catalog.datetimetz_pl", ServerSideOnly=true)]
		public static DateTimeOffset? DatetimetzPl(NpgsqlDate? par1368, DateTimeOffset? par1369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dcbrt

		[Sql.Function(Name="pg_catalog.dcbrt", ServerSideOnly=true)]
		public static double? Dcbrt(double? par1371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Decode

		[Sql.Function(Name="pg_catalog.decode", ServerSideOnly=true)]
		public static byte[] Decode(string par1373, string par1374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Degrees

		[Sql.Function(Name="pg_catalog.degrees", ServerSideOnly=true)]
		public static double? Degrees(double? par1376)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DenseRank

		[Sql.Function(Name="pg_catalog.dense_rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static long? DenseRank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par1379)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DenseRankFinal

		[Sql.Function(Name="pg_catalog.dense_rank_final", ServerSideOnly=true)]
		public static long? DenseRankFinal(object par1381, object par1382)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dexp

		[Sql.Function(Name="pg_catalog.dexp", ServerSideOnly=true)]
		public static double? Dexp(double? par1384)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Diagonal

		[Sql.Function(Name="pg_catalog.diagonal", ServerSideOnly=true)]
		public static NpgsqlLSeg? Diagonal(NpgsqlBox? par1386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Diameter

		[Sql.Function(Name="pg_catalog.diameter", ServerSideOnly=true)]
		public static double? Diameter(NpgsqlCircle? par1388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DispellInit

		[Sql.Function(Name="pg_catalog.dispell_init", ServerSideOnly=true)]
		public static object DispellInit(object par1390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DispellLexize

		[Sql.Function(Name="pg_catalog.dispell_lexize", ServerSideOnly=true)]
		public static object DispellLexize(object par1392, object par1393, object par1394, object par1395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistCpoint

		[Sql.Function(Name="pg_catalog.dist_cpoint", ServerSideOnly=true)]
		public static double? DistCpoint(NpgsqlCircle? par1397, NpgsqlPoint? par1398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistCpoly

		[Sql.Function(Name="pg_catalog.dist_cpoly", ServerSideOnly=true)]
		public static double? DistCpoly(NpgsqlCircle? par1400, NpgsqlPolygon? par1401)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistLb

		[Sql.Function(Name="pg_catalog.dist_lb", ServerSideOnly=true)]
		public static double? DistLb(NpgsqlLine? par1403, NpgsqlBox? par1404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPb

		[Sql.Function(Name="pg_catalog.dist_pb", ServerSideOnly=true)]
		public static double? DistPb(NpgsqlPoint? par1406, NpgsqlBox? par1407)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPc

		[Sql.Function(Name="pg_catalog.dist_pc", ServerSideOnly=true)]
		public static double? DistPc(NpgsqlPoint? par1409, NpgsqlCircle? par1410)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPl

		[Sql.Function(Name="pg_catalog.dist_pl", ServerSideOnly=true)]
		public static double? DistPl(NpgsqlPoint? par1412, NpgsqlLine? par1413)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPolyp

		[Sql.Function(Name="pg_catalog.dist_polyp", ServerSideOnly=true)]
		public static double? DistPolyp(NpgsqlPolygon? par1415, NpgsqlPoint? par1416)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPpath

		[Sql.Function(Name="pg_catalog.dist_ppath", ServerSideOnly=true)]
		public static double? DistPpath(NpgsqlPoint? par1418, NpgsqlPath? par1419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPpoly

		[Sql.Function(Name="pg_catalog.dist_ppoly", ServerSideOnly=true)]
		public static double? DistPpoly(NpgsqlPoint? par1421, NpgsqlPolygon? par1422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPs

		[Sql.Function(Name="pg_catalog.dist_ps", ServerSideOnly=true)]
		public static double? DistPs(NpgsqlPoint? par1424, NpgsqlLSeg? par1425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistSb

		[Sql.Function(Name="pg_catalog.dist_sb", ServerSideOnly=true)]
		public static double? DistSb(NpgsqlLSeg? par1427, NpgsqlBox? par1428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistSl

		[Sql.Function(Name="pg_catalog.dist_sl", ServerSideOnly=true)]
		public static double? DistSl(NpgsqlLSeg? par1430, NpgsqlLine? par1431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Div

		[Sql.Function(Name="pg_catalog.div", ServerSideOnly=true)]
		public static decimal? Div(decimal? par1433, decimal? par1434)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dlog10

		[Sql.Function(Name="pg_catalog.dlog10", ServerSideOnly=true)]
		public static double? Dlog10(double? par1436)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dlog1

		[Sql.Function(Name="pg_catalog.dlog1", ServerSideOnly=true)]
		public static double? Dlog1(double? par1438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DomainIn

		[Sql.Function(Name="pg_catalog.domain_in", ServerSideOnly=true)]
		public static object DomainIn(object par1440, int? par1441, int? par1442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DomainRecv

		[Sql.Function(Name="pg_catalog.domain_recv", ServerSideOnly=true)]
		public static object DomainRecv(object par1444, int? par1445, int? par1446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dpow

		[Sql.Function(Name="pg_catalog.dpow", ServerSideOnly=true)]
		public static double? Dpow(double? par1448, double? par1449)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dround

		[Sql.Function(Name="pg_catalog.dround", ServerSideOnly=true)]
		public static double? Dround(double? par1451)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsimpleInit

		[Sql.Function(Name="pg_catalog.dsimple_init", ServerSideOnly=true)]
		public static object DsimpleInit(object par1453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsimpleLexize

		[Sql.Function(Name="pg_catalog.dsimple_lexize", ServerSideOnly=true)]
		public static object DsimpleLexize(object par1455, object par1456, object par1457, object par1458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsnowballInit

		[Sql.Function(Name="pg_catalog.dsnowball_init", ServerSideOnly=true)]
		public static object DsnowballInit(object par1460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsnowballLexize

		[Sql.Function(Name="pg_catalog.dsnowball_lexize", ServerSideOnly=true)]
		public static object DsnowballLexize(object par1462, object par1463, object par1464, object par1465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dsqrt

		[Sql.Function(Name="pg_catalog.dsqrt", ServerSideOnly=true)]
		public static double? Dsqrt(double? par1467)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsynonymInit

		[Sql.Function(Name="pg_catalog.dsynonym_init", ServerSideOnly=true)]
		public static object DsynonymInit(object par1469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsynonymLexize

		[Sql.Function(Name="pg_catalog.dsynonym_lexize", ServerSideOnly=true)]
		public static object DsynonymLexize(object par1471, object par1472, object par1473, object par1474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dtrunc

		[Sql.Function(Name="pg_catalog.dtrunc", ServerSideOnly=true)]
		public static double? Dtrunc(double? par1476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ElemContainedByRange

		[Sql.Function(Name="pg_catalog.elem_contained_by_range", ServerSideOnly=true)]
		public static bool? ElemContainedByRange(object par1478, object par1479)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Encode

		[Sql.Function(Name="pg_catalog.encode", ServerSideOnly=true)]
		public static string Encode(byte[] par1481, string par1482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumCmp

		[Sql.Function(Name="pg_catalog.enum_cmp", ServerSideOnly=true)]
		public static int? EnumCmp(object par1484, object par1485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumEq

		[Sql.Function(Name="pg_catalog.enum_eq", ServerSideOnly=true)]
		public static bool? EnumEq(object par1487, object par1488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumFirst

		[Sql.Function(Name="pg_catalog.enum_first", ServerSideOnly=true)]
		public static object EnumFirst(object par1490)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumGe

		[Sql.Function(Name="pg_catalog.enum_ge", ServerSideOnly=true)]
		public static bool? EnumGe(object par1492, object par1493)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumGt

		[Sql.Function(Name="pg_catalog.enum_gt", ServerSideOnly=true)]
		public static bool? EnumGt(object par1495, object par1496)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumIn

		[Sql.Function(Name="pg_catalog.enum_in", ServerSideOnly=true)]
		public static object EnumIn(object par1498, int? par1499)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLarger

		[Sql.Function(Name="pg_catalog.enum_larger", ServerSideOnly=true)]
		public static object EnumLarger(object par1501, object par1502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLast

		[Sql.Function(Name="pg_catalog.enum_last", ServerSideOnly=true)]
		public static object EnumLast(object par1504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLe

		[Sql.Function(Name="pg_catalog.enum_le", ServerSideOnly=true)]
		public static bool? EnumLe(object par1506, object par1507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLt

		[Sql.Function(Name="pg_catalog.enum_lt", ServerSideOnly=true)]
		public static bool? EnumLt(object par1509, object par1510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumNe

		[Sql.Function(Name="pg_catalog.enum_ne", ServerSideOnly=true)]
		public static bool? EnumNe(object par1512, object par1513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumOut

		[Sql.Function(Name="pg_catalog.enum_out", ServerSideOnly=true)]
		public static object EnumOut(object par1515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumRange

		[Sql.Function(Name="pg_catalog.enum_range", ServerSideOnly=true)]
		public static object EnumRange(object par1520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumRecv

		[Sql.Function(Name="pg_catalog.enum_recv", ServerSideOnly=true)]
		public static object EnumRecv(object par1522, int? par1523)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumSend

		[Sql.Function(Name="pg_catalog.enum_send", ServerSideOnly=true)]
		public static byte[] EnumSend(object par1525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumSmaller

		[Sql.Function(Name="pg_catalog.enum_smaller", ServerSideOnly=true)]
		public static object EnumSmaller(object par1527, object par1528)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Eqjoinsel

		[Sql.Function(Name="pg_catalog.eqjoinsel", ServerSideOnly=true)]
		public static double? Eqjoinsel(object par1530, int? par1531, object par1532, short? par1533, object par1534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Eqsel

		[Sql.Function(Name="pg_catalog.eqsel", ServerSideOnly=true)]
		public static double? Eqsel(object par1536, int? par1537, object par1538, int? par1539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucCnToMic

		[Sql.Function(Name="pg_catalog.euc_cn_to_mic", ServerSideOnly=true)]
		public static object EucCnToMic(int? par1540, int? par1541, object par1542, object par1543, int? par1544)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucCnToUtf8

		[Sql.Function(Name="pg_catalog.euc_cn_to_utf8", ServerSideOnly=true)]
		public static object EucCnToUtf8(int? par1545, int? par1546, object par1547, object par1548, int? par1549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJis2004ToShiftJis2004

		[Sql.Function(Name="pg_catalog.euc_jis_2004_to_shift_jis_2004", ServerSideOnly=true)]
		public static object EucJis2004ToShiftJis2004(int? par1550, int? par1551, object par1552, object par1553, int? par1554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJis2004ToUtf8

		[Sql.Function(Name="pg_catalog.euc_jis_2004_to_utf8", ServerSideOnly=true)]
		public static object EucJis2004ToUtf8(int? par1555, int? par1556, object par1557, object par1558, int? par1559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToMic

		[Sql.Function(Name="pg_catalog.euc_jp_to_mic", ServerSideOnly=true)]
		public static object EucJpToMic(int? par1560, int? par1561, object par1562, object par1563, int? par1564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToSjis

		[Sql.Function(Name="pg_catalog.euc_jp_to_sjis", ServerSideOnly=true)]
		public static object EucJpToSjis(int? par1565, int? par1566, object par1567, object par1568, int? par1569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToUtf8

		[Sql.Function(Name="pg_catalog.euc_jp_to_utf8", ServerSideOnly=true)]
		public static object EucJpToUtf8(int? par1570, int? par1571, object par1572, object par1573, int? par1574)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucKrToMic

		[Sql.Function(Name="pg_catalog.euc_kr_to_mic", ServerSideOnly=true)]
		public static object EucKrToMic(int? par1575, int? par1576, object par1577, object par1578, int? par1579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucKrToUtf8

		[Sql.Function(Name="pg_catalog.euc_kr_to_utf8", ServerSideOnly=true)]
		public static object EucKrToUtf8(int? par1580, int? par1581, object par1582, object par1583, int? par1584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToBig5

		[Sql.Function(Name="pg_catalog.euc_tw_to_big5", ServerSideOnly=true)]
		public static object EucTwToBig5(int? par1585, int? par1586, object par1587, object par1588, int? par1589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToMic

		[Sql.Function(Name="pg_catalog.euc_tw_to_mic", ServerSideOnly=true)]
		public static object EucTwToMic(int? par1590, int? par1591, object par1592, object par1593, int? par1594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToUtf8

		[Sql.Function(Name="pg_catalog.euc_tw_to_utf8", ServerSideOnly=true)]
		public static object EucTwToUtf8(int? par1595, int? par1596, object par1597, object par1598, int? par1599)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EventTriggerIn

		[Sql.Function(Name="pg_catalog.event_trigger_in", ServerSideOnly=true)]
		public static object EventTriggerIn(object par1601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EventTriggerOut

		[Sql.Function(Name="pg_catalog.event_trigger_out", ServerSideOnly=true)]
		public static object EventTriggerOut(object par1603)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Every

		[Sql.Function(Name="pg_catalog.every", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? Every<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par1605)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Exp

		[Sql.Function(Name="pg_catalog.exp", ServerSideOnly=true)]
		public static decimal? Exp(decimal? par1609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Factorial

		[Sql.Function(Name="pg_catalog.factorial", ServerSideOnly=true)]
		public static decimal? Factorial(long? par1611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Family

		[Sql.Function(Name="pg_catalog.family", ServerSideOnly=true)]
		public static int? Family(NpgsqlInet? par1613)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FdwHandlerIn

		[Sql.Function(Name="pg_catalog.fdw_handler_in", ServerSideOnly=true)]
		public static object FdwHandlerIn(object par1615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FdwHandlerOut

		[Sql.Function(Name="pg_catalog.fdw_handler_out", ServerSideOnly=true)]
		public static object FdwHandlerOut(object par1617)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FirstValue

		[Sql.Function(Name="pg_catalog.first_value", ServerSideOnly=true)]
		public static object FirstValue(object par1619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48div

		[Sql.Function(Name="pg_catalog.float48div", ServerSideOnly=true)]
		public static double? Float48div(float? par1621, double? par1622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48eq

		[Sql.Function(Name="pg_catalog.float48eq", ServerSideOnly=true)]
		public static bool? Float48eq(float? par1624, double? par1625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48ge

		[Sql.Function(Name="pg_catalog.float48ge", ServerSideOnly=true)]
		public static bool? Float48ge(float? par1627, double? par1628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48gt

		[Sql.Function(Name="pg_catalog.float48gt", ServerSideOnly=true)]
		public static bool? Float48gt(float? par1630, double? par1631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48le

		[Sql.Function(Name="pg_catalog.float48le", ServerSideOnly=true)]
		public static bool? Float48le(float? par1633, double? par1634)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48lt

		[Sql.Function(Name="pg_catalog.float48lt", ServerSideOnly=true)]
		public static bool? Float48lt(float? par1636, double? par1637)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48mi

		[Sql.Function(Name="pg_catalog.float48mi", ServerSideOnly=true)]
		public static double? Float48mi(float? par1639, double? par1640)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48mul

		[Sql.Function(Name="pg_catalog.float48mul", ServerSideOnly=true)]
		public static double? Float48mul(float? par1642, double? par1643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48ne

		[Sql.Function(Name="pg_catalog.float48ne", ServerSideOnly=true)]
		public static bool? Float48ne(float? par1645, double? par1646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48pl

		[Sql.Function(Name="pg_catalog.float48pl", ServerSideOnly=true)]
		public static double? Float48pl(float? par1648, double? par1649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4

		[Sql.Function(Name="pg_catalog.float4", ServerSideOnly=true)]
		public static float? Float4(long? par1661)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4Accum

		[Sql.Function(Name="pg_catalog.float4_accum", ServerSideOnly=true)]
		public static object Float4Accum(object par1663, float? par1664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4abs

		[Sql.Function(Name="pg_catalog.float4abs", ServerSideOnly=true)]
		public static float? Float4abs(float? par1666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4div

		[Sql.Function(Name="pg_catalog.float4div", ServerSideOnly=true)]
		public static float? Float4div(float? par1668, float? par1669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4eq

		[Sql.Function(Name="pg_catalog.float4eq", ServerSideOnly=true)]
		public static bool? Float4eq(float? par1671, float? par1672)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4ge

		[Sql.Function(Name="pg_catalog.float4ge", ServerSideOnly=true)]
		public static bool? Float4ge(float? par1674, float? par1675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4gt

		[Sql.Function(Name="pg_catalog.float4gt", ServerSideOnly=true)]
		public static bool? Float4gt(float? par1677, float? par1678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4in

		[Sql.Function(Name="pg_catalog.float4in", ServerSideOnly=true)]
		public static float? Float4in(object par1680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4larger

		[Sql.Function(Name="pg_catalog.float4larger", ServerSideOnly=true)]
		public static float? Float4larger(float? par1682, float? par1683)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4le

		[Sql.Function(Name="pg_catalog.float4le", ServerSideOnly=true)]
		public static bool? Float4le(float? par1685, float? par1686)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4lt

		[Sql.Function(Name="pg_catalog.float4lt", ServerSideOnly=true)]
		public static bool? Float4lt(float? par1688, float? par1689)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4mi

		[Sql.Function(Name="pg_catalog.float4mi", ServerSideOnly=true)]
		public static float? Float4mi(float? par1691, float? par1692)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4mul

		[Sql.Function(Name="pg_catalog.float4mul", ServerSideOnly=true)]
		public static float? Float4mul(float? par1694, float? par1695)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4ne

		[Sql.Function(Name="pg_catalog.float4ne", ServerSideOnly=true)]
		public static bool? Float4ne(float? par1697, float? par1698)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4out

		[Sql.Function(Name="pg_catalog.float4out", ServerSideOnly=true)]
		public static object Float4out(float? par1700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4pl

		[Sql.Function(Name="pg_catalog.float4pl", ServerSideOnly=true)]
		public static float? Float4pl(float? par1702, float? par1703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4recv

		[Sql.Function(Name="pg_catalog.float4recv", ServerSideOnly=true)]
		public static float? Float4recv(object par1705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4send

		[Sql.Function(Name="pg_catalog.float4send", ServerSideOnly=true)]
		public static byte[] Float4send(float? par1707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4smaller

		[Sql.Function(Name="pg_catalog.float4smaller", ServerSideOnly=true)]
		public static float? Float4smaller(float? par1709, float? par1710)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4um

		[Sql.Function(Name="pg_catalog.float4um", ServerSideOnly=true)]
		public static float? Float4um(float? par1712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4up

		[Sql.Function(Name="pg_catalog.float4up", ServerSideOnly=true)]
		public static float? Float4up(float? par1714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84div

		[Sql.Function(Name="pg_catalog.float84div", ServerSideOnly=true)]
		public static double? Float84div(double? par1716, float? par1717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84eq

		[Sql.Function(Name="pg_catalog.float84eq", ServerSideOnly=true)]
		public static bool? Float84eq(double? par1719, float? par1720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84ge

		[Sql.Function(Name="pg_catalog.float84ge", ServerSideOnly=true)]
		public static bool? Float84ge(double? par1722, float? par1723)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84gt

		[Sql.Function(Name="pg_catalog.float84gt", ServerSideOnly=true)]
		public static bool? Float84gt(double? par1725, float? par1726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84le

		[Sql.Function(Name="pg_catalog.float84le", ServerSideOnly=true)]
		public static bool? Float84le(double? par1728, float? par1729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84lt

		[Sql.Function(Name="pg_catalog.float84lt", ServerSideOnly=true)]
		public static bool? Float84lt(double? par1731, float? par1732)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84mi

		[Sql.Function(Name="pg_catalog.float84mi", ServerSideOnly=true)]
		public static double? Float84mi(double? par1734, float? par1735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84mul

		[Sql.Function(Name="pg_catalog.float84mul", ServerSideOnly=true)]
		public static double? Float84mul(double? par1737, float? par1738)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84ne

		[Sql.Function(Name="pg_catalog.float84ne", ServerSideOnly=true)]
		public static bool? Float84ne(double? par1740, float? par1741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84pl

		[Sql.Function(Name="pg_catalog.float84pl", ServerSideOnly=true)]
		public static double? Float84pl(double? par1743, float? par1744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8

		[Sql.Function(Name="pg_catalog.float8", ServerSideOnly=true)]
		public static double? Float8(long? par1756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Accum

		[Sql.Function(Name="pg_catalog.float8_accum", ServerSideOnly=true)]
		public static object Float8Accum(object par1758, double? par1759)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Avg

		[Sql.Function(Name="pg_catalog.float8_avg", ServerSideOnly=true)]
		public static double? Float8Avg(object par1761)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Combine

		[Sql.Function(Name="pg_catalog.float8_combine", ServerSideOnly=true)]
		public static object Float8Combine(object par1763, object par1764)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Corr

		[Sql.Function(Name="pg_catalog.float8_corr", ServerSideOnly=true)]
		public static double? Float8Corr(object par1766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8CovarPop

		[Sql.Function(Name="pg_catalog.float8_covar_pop", ServerSideOnly=true)]
		public static double? Float8CovarPop(object par1768)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8CovarSamp

		[Sql.Function(Name="pg_catalog.float8_covar_samp", ServerSideOnly=true)]
		public static double? Float8CovarSamp(object par1770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAccum

		[Sql.Function(Name="pg_catalog.float8_regr_accum", ServerSideOnly=true)]
		public static object Float8RegrAccum(object par1772, double? par1773, double? par1774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAvgx

		[Sql.Function(Name="pg_catalog.float8_regr_avgx", ServerSideOnly=true)]
		public static double? Float8RegrAvgx(object par1776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAvgy

		[Sql.Function(Name="pg_catalog.float8_regr_avgy", ServerSideOnly=true)]
		public static double? Float8RegrAvgy(object par1778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrCombine

		[Sql.Function(Name="pg_catalog.float8_regr_combine", ServerSideOnly=true)]
		public static object Float8RegrCombine(object par1780, object par1781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrIntercept

		[Sql.Function(Name="pg_catalog.float8_regr_intercept", ServerSideOnly=true)]
		public static double? Float8RegrIntercept(object par1783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrR2

		[Sql.Function(Name="pg_catalog.float8_regr_r2", ServerSideOnly=true)]
		public static double? Float8RegrR2(object par1785)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSlope

		[Sql.Function(Name="pg_catalog.float8_regr_slope", ServerSideOnly=true)]
		public static double? Float8RegrSlope(object par1787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSxx

		[Sql.Function(Name="pg_catalog.float8_regr_sxx", ServerSideOnly=true)]
		public static double? Float8RegrSxx(object par1789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSxy

		[Sql.Function(Name="pg_catalog.float8_regr_sxy", ServerSideOnly=true)]
		public static double? Float8RegrSxy(object par1791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSyy

		[Sql.Function(Name="pg_catalog.float8_regr_syy", ServerSideOnly=true)]
		public static double? Float8RegrSyy(object par1793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8StddevPop

		[Sql.Function(Name="pg_catalog.float8_stddev_pop", ServerSideOnly=true)]
		public static double? Float8StddevPop(object par1795)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8StddevSamp

		[Sql.Function(Name="pg_catalog.float8_stddev_samp", ServerSideOnly=true)]
		public static double? Float8StddevSamp(object par1797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8VarPop

		[Sql.Function(Name="pg_catalog.float8_var_pop", ServerSideOnly=true)]
		public static double? Float8VarPop(object par1799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8VarSamp

		[Sql.Function(Name="pg_catalog.float8_var_samp", ServerSideOnly=true)]
		public static double? Float8VarSamp(object par1801)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8abs

		[Sql.Function(Name="pg_catalog.float8abs", ServerSideOnly=true)]
		public static double? Float8abs(double? par1803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8div

		[Sql.Function(Name="pg_catalog.float8div", ServerSideOnly=true)]
		public static double? Float8div(double? par1805, double? par1806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8eq

		[Sql.Function(Name="pg_catalog.float8eq", ServerSideOnly=true)]
		public static bool? Float8eq(double? par1808, double? par1809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8ge

		[Sql.Function(Name="pg_catalog.float8ge", ServerSideOnly=true)]
		public static bool? Float8ge(double? par1811, double? par1812)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8gt

		[Sql.Function(Name="pg_catalog.float8gt", ServerSideOnly=true)]
		public static bool? Float8gt(double? par1814, double? par1815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8in

		[Sql.Function(Name="pg_catalog.float8in", ServerSideOnly=true)]
		public static double? Float8in(object par1817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8larger

		[Sql.Function(Name="pg_catalog.float8larger", ServerSideOnly=true)]
		public static double? Float8larger(double? par1819, double? par1820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8le

		[Sql.Function(Name="pg_catalog.float8le", ServerSideOnly=true)]
		public static bool? Float8le(double? par1822, double? par1823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8lt

		[Sql.Function(Name="pg_catalog.float8lt", ServerSideOnly=true)]
		public static bool? Float8lt(double? par1825, double? par1826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8mi

		[Sql.Function(Name="pg_catalog.float8mi", ServerSideOnly=true)]
		public static double? Float8mi(double? par1828, double? par1829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8mul

		[Sql.Function(Name="pg_catalog.float8mul", ServerSideOnly=true)]
		public static double? Float8mul(double? par1831, double? par1832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8ne

		[Sql.Function(Name="pg_catalog.float8ne", ServerSideOnly=true)]
		public static bool? Float8ne(double? par1834, double? par1835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8out

		[Sql.Function(Name="pg_catalog.float8out", ServerSideOnly=true)]
		public static object Float8out(double? par1837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8pl

		[Sql.Function(Name="pg_catalog.float8pl", ServerSideOnly=true)]
		public static double? Float8pl(double? par1839, double? par1840)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8recv

		[Sql.Function(Name="pg_catalog.float8recv", ServerSideOnly=true)]
		public static double? Float8recv(object par1842)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8send

		[Sql.Function(Name="pg_catalog.float8send", ServerSideOnly=true)]
		public static byte[] Float8send(double? par1844)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8smaller

		[Sql.Function(Name="pg_catalog.float8smaller", ServerSideOnly=true)]
		public static double? Float8smaller(double? par1846, double? par1847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8um

		[Sql.Function(Name="pg_catalog.float8um", ServerSideOnly=true)]
		public static double? Float8um(double? par1849)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8up

		[Sql.Function(Name="pg_catalog.float8up", ServerSideOnly=true)]
		public static double? Float8up(double? par1851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Floor

		[Sql.Function(Name="pg_catalog.floor", ServerSideOnly=true)]
		public static double? Floor(double? par1855)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Flt4MulCash

		[Sql.Function(Name="pg_catalog.flt4_mul_cash", ServerSideOnly=true)]
		public static decimal? Flt4MulCash(float? par1857, decimal? par1858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Flt8MulCash

		[Sql.Function(Name="pg_catalog.flt8_mul_cash", ServerSideOnly=true)]
		public static decimal? Flt8MulCash(double? par1860, decimal? par1861)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrCValidator

		[Sql.Function(Name="pg_catalog.fmgr_c_validator", ServerSideOnly=true)]
		public static object FmgrCValidator(int? par1862)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrInternalValidator

		[Sql.Function(Name="pg_catalog.fmgr_internal_validator", ServerSideOnly=true)]
		public static object FmgrInternalValidator(int? par1863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrSqlValidator

		[Sql.Function(Name="pg_catalog.fmgr_sql_validator", ServerSideOnly=true)]
		public static object FmgrSqlValidator(int? par1864)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Format

		[Sql.Function(Name="pg_catalog.format", ServerSideOnly=true)]
		public static string Format(string par1869)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FormatType

		[Sql.Function(Name="pg_catalog.format_type", ServerSideOnly=true)]
		public static string FormatType(int? par1871, int? par1872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gb18030ToUtf8

		[Sql.Function(Name="pg_catalog.gb18030_to_utf8", ServerSideOnly=true)]
		public static object Gb18030ToUtf8(int? par1873, int? par1874, object par1875, object par1876, int? par1877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GbkToUtf8

		[Sql.Function(Name="pg_catalog.gbk_to_utf8", ServerSideOnly=true)]
		public static object GbkToUtf8(int? par1878, int? par1879, object par1880, object par1881, int? par1882)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GenerateSeriesInt4Support

		[Sql.Function(Name="pg_catalog.generate_series_int4_support", ServerSideOnly=true)]
		public static object GenerateSeriesInt4Support(object par1905)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GenerateSeriesInt8Support

		[Sql.Function(Name="pg_catalog.generate_series_int8_support", ServerSideOnly=true)]
		public static object GenerateSeriesInt8Support(object par1907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetBit

		[Sql.Function(Name="pg_catalog.get_bit", ServerSideOnly=true)]
		public static int? GetBit(byte[] par1917, int? par1918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetByte

		[Sql.Function(Name="pg_catalog.get_byte", ServerSideOnly=true)]
		public static int? GetByte(byte[] par1920, int? par1921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetCurrentTsConfig

		[Sql.Function(Name="pg_catalog.get_current_ts_config", ServerSideOnly=true)]
		public static object GetCurrentTsConfig()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Getdatabaseencoding

		[Sql.Function(Name="pg_catalog.getdatabaseencoding", ServerSideOnly=true)]
		public static string Getdatabaseencoding()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Getpgusername

		[Sql.Function(Name="pg_catalog.getpgusername", ServerSideOnly=true)]
		public static string Getpgusername()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCleanPendingList

		[Sql.Function(Name="pg_catalog.gin_clean_pending_list", ServerSideOnly=true)]
		public static long? GinCleanPendingList(object par1926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCmpPrefix

		[Sql.Function(Name="pg_catalog.gin_cmp_prefix", ServerSideOnly=true)]
		public static int? GinCmpPrefix(string par1928, string par1929, short? par1930, object par1931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCmpTslexeme

		[Sql.Function(Name="pg_catalog.gin_cmp_tslexeme", ServerSideOnly=true)]
		public static int? GinCmpTslexeme(string par1933, string par1934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCompareJsonb

		[Sql.Function(Name="pg_catalog.gin_compare_jsonb", ServerSideOnly=true)]
		public static int? GinCompareJsonb(string par1936, string par1937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinConsistentJsonb

		[Sql.Function(Name="pg_catalog.gin_consistent_jsonb", ServerSideOnly=true)]
		public static bool? GinConsistentJsonb(object par1939, short? par1940, string par1941, int? par1942, object par1943, object par1944, object par1945, object par1946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinConsistentJsonbPath

		[Sql.Function(Name="pg_catalog.gin_consistent_jsonb_path", ServerSideOnly=true)]
		public static bool? GinConsistentJsonbPath(object par1948, short? par1949, string par1950, int? par1951, object par1952, object par1953, object par1954, object par1955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonb

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb", ServerSideOnly=true)]
		public static object GinExtractJsonb(string par1957, object par1958, object par1959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbPath

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_path", ServerSideOnly=true)]
		public static object GinExtractJsonbPath(string par1961, object par1962, object par1963)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbQuery

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_query", ServerSideOnly=true)]
		public static object GinExtractJsonbQuery(string par1965, object par1966, short? par1967, object par1968, object par1969, object par1970, object par1971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbQueryPath

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_query_path", ServerSideOnly=true)]
		public static object GinExtractJsonbQueryPath(string par1973, object par1974, short? par1975, object par1976, object par1977, object par1978, object par1979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractTsquery

		[Sql.Function(Name="pg_catalog.gin_extract_tsquery", ServerSideOnly=true)]
		public static object GinExtractTsquery(object par1995, object par1996, short? par1997, object par1998, object par1999, object par2000, object par2001)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractTsvector

		[Sql.Function(Name="pg_catalog.gin_extract_tsvector", ServerSideOnly=true)]
		public static object GinExtractTsvector(object par2006, object par2007, object par2008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTriconsistentJsonb

		[Sql.Function(Name="pg_catalog.gin_triconsistent_jsonb", ServerSideOnly=true)]
		public static object GinTriconsistentJsonb(object par2010, short? par2011, string par2012, int? par2013, object par2014, object par2015, object par2016)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTriconsistentJsonbPath

		[Sql.Function(Name="pg_catalog.gin_triconsistent_jsonb_path", ServerSideOnly=true)]
		public static object GinTriconsistentJsonbPath(object par2018, short? par2019, string par2020, int? par2021, object par2022, object par2023, object par2024)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTsqueryConsistent

		[Sql.Function(Name="pg_catalog.gin_tsquery_consistent", ServerSideOnly=true)]
		public static bool? GinTsqueryConsistent(object par2042, short? par2043, object par2044, int? par2045, object par2046, object par2047, object par2048, object par2049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTsqueryTriconsistent

		[Sql.Function(Name="pg_catalog.gin_tsquery_triconsistent", ServerSideOnly=true)]
		public static object GinTsqueryTriconsistent(object par2051, short? par2052, object par2053, int? par2054, object par2055, object par2056, object par2057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarrayconsistent

		[Sql.Function(Name="pg_catalog.ginarrayconsistent", ServerSideOnly=true)]
		public static bool? Ginarrayconsistent(object par2059, short? par2060, object par2061, int? par2062, object par2063, object par2064, object par2065, object par2066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarrayextract

		[Sql.Function(Name="pg_catalog.ginarrayextract", ServerSideOnly=true)]
		public static object Ginarrayextract(object par2072, object par2073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarraytriconsistent

		[Sql.Function(Name="pg_catalog.ginarraytriconsistent", ServerSideOnly=true)]
		public static object Ginarraytriconsistent(object par2075, short? par2076, object par2077, int? par2078, object par2079, object par2080, object par2081)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginhandler

		[Sql.Function(Name="pg_catalog.ginhandler", ServerSideOnly=true)]
		public static object Ginhandler(object par2083)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginqueryarrayextract

		[Sql.Function(Name="pg_catalog.ginqueryarrayextract", ServerSideOnly=true)]
		public static object Ginqueryarrayextract(object par2085, object par2086, short? par2087, object par2088, object par2089, object par2090, object par2091)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxConsistent

		[Sql.Function(Name="pg_catalog.gist_box_consistent", ServerSideOnly=true)]
		public static bool? GistBoxConsistent(object par2093, NpgsqlBox? par2094, short? par2095, int? par2096, object par2097)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxPenalty

		[Sql.Function(Name="pg_catalog.gist_box_penalty", ServerSideOnly=true)]
		public static object GistBoxPenalty(object par2099, object par2100, object par2101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxPicksplit

		[Sql.Function(Name="pg_catalog.gist_box_picksplit", ServerSideOnly=true)]
		public static object GistBoxPicksplit(object par2103, object par2104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxSame

		[Sql.Function(Name="pg_catalog.gist_box_same", ServerSideOnly=true)]
		public static object GistBoxSame(NpgsqlBox? par2106, NpgsqlBox? par2107, object par2108)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxUnion

		[Sql.Function(Name="pg_catalog.gist_box_union", ServerSideOnly=true)]
		public static NpgsqlBox? GistBoxUnion(object par2110, object par2111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleCompress

		[Sql.Function(Name="pg_catalog.gist_circle_compress", ServerSideOnly=true)]
		public static object GistCircleCompress(object par2113)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleConsistent

		[Sql.Function(Name="pg_catalog.gist_circle_consistent", ServerSideOnly=true)]
		public static bool? GistCircleConsistent(object par2115, NpgsqlCircle? par2116, short? par2117, int? par2118, object par2119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleDistance

		[Sql.Function(Name="pg_catalog.gist_circle_distance", ServerSideOnly=true)]
		public static double? GistCircleDistance(object par2121, NpgsqlCircle? par2122, short? par2123, int? par2124, object par2125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointCompress

		[Sql.Function(Name="pg_catalog.gist_point_compress", ServerSideOnly=true)]
		public static object GistPointCompress(object par2127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointConsistent

		[Sql.Function(Name="pg_catalog.gist_point_consistent", ServerSideOnly=true)]
		public static bool? GistPointConsistent(object par2129, NpgsqlPoint? par2130, short? par2131, int? par2132, object par2133)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointDistance

		[Sql.Function(Name="pg_catalog.gist_point_distance", ServerSideOnly=true)]
		public static double? GistPointDistance(object par2135, NpgsqlPoint? par2136, short? par2137, int? par2138, object par2139)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointFetch

		[Sql.Function(Name="pg_catalog.gist_point_fetch", ServerSideOnly=true)]
		public static object GistPointFetch(object par2141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyCompress

		[Sql.Function(Name="pg_catalog.gist_poly_compress", ServerSideOnly=true)]
		public static object GistPolyCompress(object par2143)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyConsistent

		[Sql.Function(Name="pg_catalog.gist_poly_consistent", ServerSideOnly=true)]
		public static bool? GistPolyConsistent(object par2145, NpgsqlPolygon? par2146, short? par2147, int? par2148, object par2149)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyDistance

		[Sql.Function(Name="pg_catalog.gist_poly_distance", ServerSideOnly=true)]
		public static double? GistPolyDistance(object par2151, NpgsqlPolygon? par2152, short? par2153, int? par2154, object par2155)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gisthandler

		[Sql.Function(Name="pg_catalog.gisthandler", ServerSideOnly=true)]
		public static object Gisthandler(object par2157)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryCompress

		[Sql.Function(Name="pg_catalog.gtsquery_compress", ServerSideOnly=true)]
		public static object GtsqueryCompress(object par2159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryConsistent

		[Sql.Function(Name="pg_catalog.gtsquery_consistent", ServerSideOnly=true)]
		public static bool? GtsqueryConsistent(object par2167, object par2168, int? par2169, int? par2170, object par2171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryPenalty

		[Sql.Function(Name="pg_catalog.gtsquery_penalty", ServerSideOnly=true)]
		public static object GtsqueryPenalty(object par2173, object par2174, object par2175)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryPicksplit

		[Sql.Function(Name="pg_catalog.gtsquery_picksplit", ServerSideOnly=true)]
		public static object GtsqueryPicksplit(object par2177, object par2178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsquerySame

		[Sql.Function(Name="pg_catalog.gtsquery_same", ServerSideOnly=true)]
		public static object GtsquerySame(long? par2180, long? par2181, object par2182)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryUnion

		[Sql.Function(Name="pg_catalog.gtsquery_union", ServerSideOnly=true)]
		public static long? GtsqueryUnion(object par2184, object par2185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorCompress

		[Sql.Function(Name="pg_catalog.gtsvector_compress", ServerSideOnly=true)]
		public static object GtsvectorCompress(object par2187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorConsistent

		[Sql.Function(Name="pg_catalog.gtsvector_consistent", ServerSideOnly=true)]
		public static bool? GtsvectorConsistent(object par2195, object par2196, int? par2197, int? par2198, object par2199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorDecompress

		[Sql.Function(Name="pg_catalog.gtsvector_decompress", ServerSideOnly=true)]
		public static object GtsvectorDecompress(object par2201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorPenalty

		[Sql.Function(Name="pg_catalog.gtsvector_penalty", ServerSideOnly=true)]
		public static object GtsvectorPenalty(object par2203, object par2204, object par2205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorPicksplit

		[Sql.Function(Name="pg_catalog.gtsvector_picksplit", ServerSideOnly=true)]
		public static object GtsvectorPicksplit(object par2207, object par2208)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorSame

		[Sql.Function(Name="pg_catalog.gtsvector_same", ServerSideOnly=true)]
		public static object GtsvectorSame(object par2210, object par2211, object par2212)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorUnion

		[Sql.Function(Name="pg_catalog.gtsvector_union", ServerSideOnly=true)]
		public static object GtsvectorUnion(object par2214, object par2215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gtsvectorin

		[Sql.Function(Name="pg_catalog.gtsvectorin", ServerSideOnly=true)]
		public static object Gtsvectorin(object par2217)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gtsvectorout

		[Sql.Function(Name="pg_catalog.gtsvectorout", ServerSideOnly=true)]
		public static object Gtsvectorout(object par2219)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasAnyColumnPrivilege

		[Sql.Function(Name="pg_catalog.has_any_column_privilege", ServerSideOnly=true)]
		public static bool? HasAnyColumnPrivilege(int? par2240, string par2241)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasColumnPrivilege

		[Sql.Function(Name="pg_catalog.has_column_privilege", ServerSideOnly=true)]
		public static bool? HasColumnPrivilege(int? par2295, short? par2296, string par2297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasDatabasePrivilege

		[Sql.Function(Name="pg_catalog.has_database_privilege", ServerSideOnly=true)]
		public static bool? HasDatabasePrivilege(int? par2318, string par2319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasForeignDataWrapperPrivilege

		[Sql.Function(Name="pg_catalog.has_foreign_data_wrapper_privilege", ServerSideOnly=true)]
		public static bool? HasForeignDataWrapperPrivilege(int? par2340, string par2341)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasFunctionPrivilege

		[Sql.Function(Name="pg_catalog.has_function_privilege", ServerSideOnly=true)]
		public static bool? HasFunctionPrivilege(int? par2362, string par2363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasLanguagePrivilege

		[Sql.Function(Name="pg_catalog.has_language_privilege", ServerSideOnly=true)]
		public static bool? HasLanguagePrivilege(int? par2384, string par2385)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasSchemaPrivilege

		[Sql.Function(Name="pg_catalog.has_schema_privilege", ServerSideOnly=true)]
		public static bool? HasSchemaPrivilege(int? par2406, string par2407)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasSequencePrivilege

		[Sql.Function(Name="pg_catalog.has_sequence_privilege", ServerSideOnly=true)]
		public static bool? HasSequencePrivilege(int? par2428, string par2429)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasServerPrivilege

		[Sql.Function(Name="pg_catalog.has_server_privilege", ServerSideOnly=true)]
		public static bool? HasServerPrivilege(int? par2450, string par2451)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTablePrivilege

		[Sql.Function(Name="pg_catalog.has_table_privilege", ServerSideOnly=true)]
		public static bool? HasTablePrivilege(int? par2472, string par2473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTablespacePrivilege

		[Sql.Function(Name="pg_catalog.has_tablespace_privilege", ServerSideOnly=true)]
		public static bool? HasTablespacePrivilege(int? par2494, string par2495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTypePrivilege

		[Sql.Function(Name="pg_catalog.has_type_privilege", ServerSideOnly=true)]
		public static bool? HasTypePrivilege(int? par2516, string par2517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashAclitem

		[Sql.Function(Name="pg_catalog.hash_aclitem", ServerSideOnly=true)]
		public static int? HashAclitem(object par2519)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashAclitemExtended

		[Sql.Function(Name="pg_catalog.hash_aclitem_extended", ServerSideOnly=true)]
		public static long? HashAclitemExtended(object par2521, long? par2522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashArray

		[Sql.Function(Name="pg_catalog.hash_array", ServerSideOnly=true)]
		public static int? HashArray(object par2524)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashArrayExtended

		[Sql.Function(Name="pg_catalog.hash_array_extended", ServerSideOnly=true)]
		public static long? HashArrayExtended(object par2526, long? par2527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashNumeric

		[Sql.Function(Name="pg_catalog.hash_numeric", ServerSideOnly=true)]
		public static int? HashNumeric(decimal? par2529)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashNumericExtended

		[Sql.Function(Name="pg_catalog.hash_numeric_extended", ServerSideOnly=true)]
		public static long? HashNumericExtended(decimal? par2531, long? par2532)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashRange

		[Sql.Function(Name="pg_catalog.hash_range", ServerSideOnly=true)]
		public static int? HashRange(object par2534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashRangeExtended

		[Sql.Function(Name="pg_catalog.hash_range_extended", ServerSideOnly=true)]
		public static long? HashRangeExtended(object par2536, long? par2537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbpchar

		[Sql.Function(Name="pg_catalog.hashbpchar", ServerSideOnly=true)]
		public static int? Hashbpchar(string par2539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbpcharextended

		[Sql.Function(Name="pg_catalog.hashbpcharextended", ServerSideOnly=true)]
		public static long? Hashbpcharextended(string par2541, long? par2542)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashchar

		[Sql.Function(Name="pg_catalog.hashchar", ServerSideOnly=true)]
		public static int? Hashchar(object par2544)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashcharextended

		[Sql.Function(Name="pg_catalog.hashcharextended", ServerSideOnly=true)]
		public static long? Hashcharextended(object par2546, long? par2547)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashenum

		[Sql.Function(Name="pg_catalog.hashenum", ServerSideOnly=true)]
		public static int? Hashenum(object par2549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashenumextended

		[Sql.Function(Name="pg_catalog.hashenumextended", ServerSideOnly=true)]
		public static long? Hashenumextended(object par2551, long? par2552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat4

		[Sql.Function(Name="pg_catalog.hashfloat4", ServerSideOnly=true)]
		public static int? Hashfloat4(float? par2554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat4extended

		[Sql.Function(Name="pg_catalog.hashfloat4extended", ServerSideOnly=true)]
		public static long? Hashfloat4extended(float? par2556, long? par2557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat8

		[Sql.Function(Name="pg_catalog.hashfloat8", ServerSideOnly=true)]
		public static int? Hashfloat8(double? par2559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat8extended

		[Sql.Function(Name="pg_catalog.hashfloat8extended", ServerSideOnly=true)]
		public static long? Hashfloat8extended(double? par2561, long? par2562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashhandler

		[Sql.Function(Name="pg_catalog.hashhandler", ServerSideOnly=true)]
		public static object Hashhandler(object par2564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashinet

		[Sql.Function(Name="pg_catalog.hashinet", ServerSideOnly=true)]
		public static int? Hashinet(NpgsqlInet? par2566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashinetextended

		[Sql.Function(Name="pg_catalog.hashinetextended", ServerSideOnly=true)]
		public static long? Hashinetextended(NpgsqlInet? par2568, long? par2569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint2

		[Sql.Function(Name="pg_catalog.hashint2", ServerSideOnly=true)]
		public static int? Hashint2(short? par2571)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint2extended

		[Sql.Function(Name="pg_catalog.hashint2extended", ServerSideOnly=true)]
		public static long? Hashint2extended(short? par2573, long? par2574)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint4

		[Sql.Function(Name="pg_catalog.hashint4", ServerSideOnly=true)]
		public static int? Hashint4(int? par2576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint4extended

		[Sql.Function(Name="pg_catalog.hashint4extended", ServerSideOnly=true)]
		public static long? Hashint4extended(int? par2578, long? par2579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint8

		[Sql.Function(Name="pg_catalog.hashint8", ServerSideOnly=true)]
		public static int? Hashint8(long? par2581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint8extended

		[Sql.Function(Name="pg_catalog.hashint8extended", ServerSideOnly=true)]
		public static long? Hashint8extended(long? par2583, long? par2584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmacaddr8

		[Sql.Function(Name="pg_catalog.hashmacaddr8", ServerSideOnly=true)]
		public static int? Hashmacaddr8(PhysicalAddress par2586)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmacaddr8extended

		[Sql.Function(Name="pg_catalog.hashmacaddr8extended", ServerSideOnly=true)]
		public static long? Hashmacaddr8extended(PhysicalAddress par2588, long? par2589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmacaddr

		[Sql.Function(Name="pg_catalog.hashmacaddr", ServerSideOnly=true)]
		public static int? Hashmacaddr(PhysicalAddress par2591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmacaddrextended

		[Sql.Function(Name="pg_catalog.hashmacaddrextended", ServerSideOnly=true)]
		public static long? Hashmacaddrextended(PhysicalAddress par2593, long? par2594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashname

		[Sql.Function(Name="pg_catalog.hashname", ServerSideOnly=true)]
		public static int? Hashname(string par2596)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashnameextended

		[Sql.Function(Name="pg_catalog.hashnameextended", ServerSideOnly=true)]
		public static long? Hashnameextended(string par2598, long? par2599)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoid

		[Sql.Function(Name="pg_catalog.hashoid", ServerSideOnly=true)]
		public static int? Hashoid(int? par2601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoidextended

		[Sql.Function(Name="pg_catalog.hashoidextended", ServerSideOnly=true)]
		public static long? Hashoidextended(int? par2603, long? par2604)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoidvector

		[Sql.Function(Name="pg_catalog.hashoidvector", ServerSideOnly=true)]
		public static int? Hashoidvector(object par2606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoidvectorextended

		[Sql.Function(Name="pg_catalog.hashoidvectorextended", ServerSideOnly=true)]
		public static long? Hashoidvectorextended(object par2608, long? par2609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashtext

		[Sql.Function(Name="pg_catalog.hashtext", ServerSideOnly=true)]
		public static int? Hashtext(string par2611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashtextextended

		[Sql.Function(Name="pg_catalog.hashtextextended", ServerSideOnly=true)]
		public static long? Hashtextextended(string par2613, long? par2614)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashtid

		[Sql.Function(Name="pg_catalog.hashtid", ServerSideOnly=true)]
		public static int? Hashtid(object par2616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashtidextended

		[Sql.Function(Name="pg_catalog.hashtidextended", ServerSideOnly=true)]
		public static long? Hashtidextended(object par2618, long? par2619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashvarlena

		[Sql.Function(Name="pg_catalog.hashvarlena", ServerSideOnly=true)]
		public static int? Hashvarlena(object par2621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashvarlenaextended

		[Sql.Function(Name="pg_catalog.hashvarlenaextended", ServerSideOnly=true)]
		public static long? Hashvarlenaextended(object par2623, long? par2624)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HeapTableamHandler

		[Sql.Function(Name="pg_catalog.heap_tableam_handler", ServerSideOnly=true)]
		public static object HeapTableamHandler(object par2626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Height

		[Sql.Function(Name="pg_catalog.height", ServerSideOnly=true)]
		public static double? Height(NpgsqlBox? par2628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Host

		[Sql.Function(Name="pg_catalog.host", ServerSideOnly=true)]
		public static string Host(NpgsqlInet? par2630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hostmask

		[Sql.Function(Name="pg_catalog.hostmask", ServerSideOnly=true)]
		public static NpgsqlInet? Hostmask(NpgsqlInet? par2632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iclikejoinsel

		[Sql.Function(Name="pg_catalog.iclikejoinsel", ServerSideOnly=true)]
		public static double? Iclikejoinsel(object par2634, int? par2635, object par2636, short? par2637, object par2638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iclikesel

		[Sql.Function(Name="pg_catalog.iclikesel", ServerSideOnly=true)]
		public static double? Iclikesel(object par2640, int? par2641, object par2642, int? par2643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icnlikejoinsel

		[Sql.Function(Name="pg_catalog.icnlikejoinsel", ServerSideOnly=true)]
		public static double? Icnlikejoinsel(object par2645, int? par2646, object par2647, short? par2648, object par2649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icnlikesel

		[Sql.Function(Name="pg_catalog.icnlikesel", ServerSideOnly=true)]
		public static double? Icnlikesel(object par2651, int? par2652, object par2653, int? par2654)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexeqjoinsel

		[Sql.Function(Name="pg_catalog.icregexeqjoinsel", ServerSideOnly=true)]
		public static double? Icregexeqjoinsel(object par2656, int? par2657, object par2658, short? par2659, object par2660)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexeqsel

		[Sql.Function(Name="pg_catalog.icregexeqsel", ServerSideOnly=true)]
		public static double? Icregexeqsel(object par2662, int? par2663, object par2664, int? par2665)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexnejoinsel

		[Sql.Function(Name="pg_catalog.icregexnejoinsel", ServerSideOnly=true)]
		public static double? Icregexnejoinsel(object par2667, int? par2668, object par2669, short? par2670, object par2671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexnesel

		[Sql.Function(Name="pg_catalog.icregexnesel", ServerSideOnly=true)]
		public static double? Icregexnesel(object par2673, int? par2674, object par2675, int? par2676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InRange

		[Sql.Function(Name="pg_catalog.in_range", ServerSideOnly=true)]
		public static bool? InRange(decimal? par2768, decimal? par2769, decimal? par2770, bool? par2771, bool? par2772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IndexAmHandlerIn

		[Sql.Function(Name="pg_catalog.index_am_handler_in", ServerSideOnly=true)]
		public static object IndexAmHandlerIn(object par2774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IndexAmHandlerOut

		[Sql.Function(Name="pg_catalog.index_am_handler_out", ServerSideOnly=true)]
		public static object IndexAmHandlerOut(object par2776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetClientAddr

		[Sql.Function(Name="pg_catalog.inet_client_addr", ServerSideOnly=true)]
		public static NpgsqlInet? InetClientAddr()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetClientPort

		[Sql.Function(Name="pg_catalog.inet_client_port", ServerSideOnly=true)]
		public static int? InetClientPort()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistCompress

		[Sql.Function(Name="pg_catalog.inet_gist_compress", ServerSideOnly=true)]
		public static object InetGistCompress(object par2780)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistConsistent

		[Sql.Function(Name="pg_catalog.inet_gist_consistent", ServerSideOnly=true)]
		public static bool? InetGistConsistent(object par2782, NpgsqlInet? par2783, short? par2784, int? par2785, object par2786)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistFetch

		[Sql.Function(Name="pg_catalog.inet_gist_fetch", ServerSideOnly=true)]
		public static object InetGistFetch(object par2788)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistPenalty

		[Sql.Function(Name="pg_catalog.inet_gist_penalty", ServerSideOnly=true)]
		public static object InetGistPenalty(object par2790, object par2791, object par2792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistPicksplit

		[Sql.Function(Name="pg_catalog.inet_gist_picksplit", ServerSideOnly=true)]
		public static object InetGistPicksplit(object par2794, object par2795)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistSame

		[Sql.Function(Name="pg_catalog.inet_gist_same", ServerSideOnly=true)]
		public static object InetGistSame(NpgsqlInet? par2797, NpgsqlInet? par2798, object par2799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistUnion

		[Sql.Function(Name="pg_catalog.inet_gist_union", ServerSideOnly=true)]
		public static NpgsqlInet? InetGistUnion(object par2801, object par2802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetIn

		[Sql.Function(Name="pg_catalog.inet_in", ServerSideOnly=true)]
		public static NpgsqlInet? InetIn(object par2804)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetMerge

		[Sql.Function(Name="pg_catalog.inet_merge", ServerSideOnly=true)]
		public static NpgsqlInet? InetMerge(NpgsqlInet? par2806, NpgsqlInet? par2807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetOut

		[Sql.Function(Name="pg_catalog.inet_out", ServerSideOnly=true)]
		public static object InetOut(NpgsqlInet? par2809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetRecv

		[Sql.Function(Name="pg_catalog.inet_recv", ServerSideOnly=true)]
		public static NpgsqlInet? InetRecv(object par2811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSameFamily

		[Sql.Function(Name="pg_catalog.inet_same_family", ServerSideOnly=true)]
		public static bool? InetSameFamily(NpgsqlInet? par2813, NpgsqlInet? par2814)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSend

		[Sql.Function(Name="pg_catalog.inet_send", ServerSideOnly=true)]
		public static byte[] InetSend(NpgsqlInet? par2816)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetServerAddr

		[Sql.Function(Name="pg_catalog.inet_server_addr", ServerSideOnly=true)]
		public static NpgsqlInet? InetServerAddr()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetServerPort

		[Sql.Function(Name="pg_catalog.inet_server_port", ServerSideOnly=true)]
		public static int? InetServerPort()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSpgChoose

		[Sql.Function(Name="pg_catalog.inet_spg_choose", ServerSideOnly=true)]
		public static object InetSpgChoose(object par2819, object par2820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSpgConfig

		[Sql.Function(Name="pg_catalog.inet_spg_config", ServerSideOnly=true)]
		public static object InetSpgConfig(object par2821, object par2822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSpgInnerConsistent

		[Sql.Function(Name="pg_catalog.inet_spg_inner_consistent", ServerSideOnly=true)]
		public static object InetSpgInnerConsistent(object par2823, object par2824)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSpgLeafConsistent

		[Sql.Function(Name="pg_catalog.inet_spg_leaf_consistent", ServerSideOnly=true)]
		public static bool? InetSpgLeafConsistent(object par2826, object par2827)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSpgPicksplit

		[Sql.Function(Name="pg_catalog.inet_spg_picksplit", ServerSideOnly=true)]
		public static object InetSpgPicksplit(object par2828, object par2829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetand

		[Sql.Function(Name="pg_catalog.inetand", ServerSideOnly=true)]
		public static NpgsqlInet? Inetand(NpgsqlInet? par2831, NpgsqlInet? par2832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetmi

		[Sql.Function(Name="pg_catalog.inetmi", ServerSideOnly=true)]
		public static long? Inetmi(NpgsqlInet? par2834, NpgsqlInet? par2835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetmiInt8

		[Sql.Function(Name="pg_catalog.inetmi_int8", ServerSideOnly=true)]
		public static NpgsqlInet? InetmiInt8(NpgsqlInet? par2837, long? par2838)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetnot

		[Sql.Function(Name="pg_catalog.inetnot", ServerSideOnly=true)]
		public static NpgsqlInet? Inetnot(NpgsqlInet? par2840)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetor

		[Sql.Function(Name="pg_catalog.inetor", ServerSideOnly=true)]
		public static NpgsqlInet? Inetor(NpgsqlInet? par2842, NpgsqlInet? par2843)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetpl

		[Sql.Function(Name="pg_catalog.inetpl", ServerSideOnly=true)]
		public static NpgsqlInet? Inetpl(NpgsqlInet? par2845, long? par2846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Initcap

		[Sql.Function(Name="pg_catalog.initcap", ServerSideOnly=true)]
		public static string Initcap(string par2848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24div

		[Sql.Function(Name="pg_catalog.int24div", ServerSideOnly=true)]
		public static int? Int24div(short? par2850, int? par2851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24eq

		[Sql.Function(Name="pg_catalog.int24eq", ServerSideOnly=true)]
		public static bool? Int24eq(short? par2853, int? par2854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24ge

		[Sql.Function(Name="pg_catalog.int24ge", ServerSideOnly=true)]
		public static bool? Int24ge(short? par2856, int? par2857)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24gt

		[Sql.Function(Name="pg_catalog.int24gt", ServerSideOnly=true)]
		public static bool? Int24gt(short? par2859, int? par2860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24le

		[Sql.Function(Name="pg_catalog.int24le", ServerSideOnly=true)]
		public static bool? Int24le(short? par2862, int? par2863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24lt

		[Sql.Function(Name="pg_catalog.int24lt", ServerSideOnly=true)]
		public static bool? Int24lt(short? par2865, int? par2866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24mi

		[Sql.Function(Name="pg_catalog.int24mi", ServerSideOnly=true)]
		public static int? Int24mi(short? par2868, int? par2869)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24mul

		[Sql.Function(Name="pg_catalog.int24mul", ServerSideOnly=true)]
		public static int? Int24mul(short? par2871, int? par2872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24ne

		[Sql.Function(Name="pg_catalog.int24ne", ServerSideOnly=true)]
		public static bool? Int24ne(short? par2874, int? par2875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24pl

		[Sql.Function(Name="pg_catalog.int24pl", ServerSideOnly=true)]
		public static int? Int24pl(short? par2877, int? par2878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28div

		[Sql.Function(Name="pg_catalog.int28div", ServerSideOnly=true)]
		public static long? Int28div(short? par2880, long? par2881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28eq

		[Sql.Function(Name="pg_catalog.int28eq", ServerSideOnly=true)]
		public static bool? Int28eq(short? par2883, long? par2884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28ge

		[Sql.Function(Name="pg_catalog.int28ge", ServerSideOnly=true)]
		public static bool? Int28ge(short? par2886, long? par2887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28gt

		[Sql.Function(Name="pg_catalog.int28gt", ServerSideOnly=true)]
		public static bool? Int28gt(short? par2889, long? par2890)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28le

		[Sql.Function(Name="pg_catalog.int28le", ServerSideOnly=true)]
		public static bool? Int28le(short? par2892, long? par2893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28lt

		[Sql.Function(Name="pg_catalog.int28lt", ServerSideOnly=true)]
		public static bool? Int28lt(short? par2895, long? par2896)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28mi

		[Sql.Function(Name="pg_catalog.int28mi", ServerSideOnly=true)]
		public static long? Int28mi(short? par2898, long? par2899)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28mul

		[Sql.Function(Name="pg_catalog.int28mul", ServerSideOnly=true)]
		public static long? Int28mul(short? par2901, long? par2902)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28ne

		[Sql.Function(Name="pg_catalog.int28ne", ServerSideOnly=true)]
		public static bool? Int28ne(short? par2904, long? par2905)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28pl

		[Sql.Function(Name="pg_catalog.int28pl", ServerSideOnly=true)]
		public static long? Int28pl(short? par2907, long? par2908)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2

		[Sql.Function(Name="pg_catalog.int2", ServerSideOnly=true)]
		public static short? Int2(long? par2920)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2Accum

		[Sql.Function(Name="pg_catalog.int2_accum", ServerSideOnly=true)]
		public static object Int2Accum(object par2922, short? par2923)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AccumInv

		[Sql.Function(Name="pg_catalog.int2_accum_inv", ServerSideOnly=true)]
		public static object Int2AccumInv(object par2925, short? par2926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AvgAccum

		[Sql.Function(Name="pg_catalog.int2_avg_accum", ServerSideOnly=true)]
		public static object Int2AvgAccum(object par2928, short? par2929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AvgAccumInv

		[Sql.Function(Name="pg_catalog.int2_avg_accum_inv", ServerSideOnly=true)]
		public static object Int2AvgAccumInv(object par2931, short? par2932)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2MulCash

		[Sql.Function(Name="pg_catalog.int2_mul_cash", ServerSideOnly=true)]
		public static decimal? Int2MulCash(short? par2934, decimal? par2935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2Sum

		[Sql.Function(Name="pg_catalog.int2_sum", ServerSideOnly=true)]
		public static long? Int2Sum(long? par2937, short? par2938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2abs

		[Sql.Function(Name="pg_catalog.int2abs", ServerSideOnly=true)]
		public static short? Int2abs(short? par2940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2and

		[Sql.Function(Name="pg_catalog.int2and", ServerSideOnly=true)]
		public static short? Int2and(short? par2942, short? par2943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2div

		[Sql.Function(Name="pg_catalog.int2div", ServerSideOnly=true)]
		public static short? Int2div(short? par2945, short? par2946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2eq

		[Sql.Function(Name="pg_catalog.int2eq", ServerSideOnly=true)]
		public static bool? Int2eq(short? par2948, short? par2949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2ge

		[Sql.Function(Name="pg_catalog.int2ge", ServerSideOnly=true)]
		public static bool? Int2ge(short? par2951, short? par2952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2gt

		[Sql.Function(Name="pg_catalog.int2gt", ServerSideOnly=true)]
		public static bool? Int2gt(short? par2954, short? par2955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2in

		[Sql.Function(Name="pg_catalog.int2in", ServerSideOnly=true)]
		public static short? Int2in(object par2957)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2int4Sum

		[Sql.Function(Name="pg_catalog.int2int4_sum", ServerSideOnly=true)]
		public static long? Int2int4Sum(object par2959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2larger

		[Sql.Function(Name="pg_catalog.int2larger", ServerSideOnly=true)]
		public static short? Int2larger(short? par2961, short? par2962)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2le

		[Sql.Function(Name="pg_catalog.int2le", ServerSideOnly=true)]
		public static bool? Int2le(short? par2964, short? par2965)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2lt

		[Sql.Function(Name="pg_catalog.int2lt", ServerSideOnly=true)]
		public static bool? Int2lt(short? par2967, short? par2968)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mi

		[Sql.Function(Name="pg_catalog.int2mi", ServerSideOnly=true)]
		public static short? Int2mi(short? par2970, short? par2971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mod

		[Sql.Function(Name="pg_catalog.int2mod", ServerSideOnly=true)]
		public static short? Int2mod(short? par2973, short? par2974)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mul

		[Sql.Function(Name="pg_catalog.int2mul", ServerSideOnly=true)]
		public static short? Int2mul(short? par2976, short? par2977)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2ne

		[Sql.Function(Name="pg_catalog.int2ne", ServerSideOnly=true)]
		public static bool? Int2ne(short? par2979, short? par2980)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2not

		[Sql.Function(Name="pg_catalog.int2not", ServerSideOnly=true)]
		public static short? Int2not(short? par2982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2or

		[Sql.Function(Name="pg_catalog.int2or", ServerSideOnly=true)]
		public static short? Int2or(short? par2984, short? par2985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2out

		[Sql.Function(Name="pg_catalog.int2out", ServerSideOnly=true)]
		public static object Int2out(short? par2987)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2pl

		[Sql.Function(Name="pg_catalog.int2pl", ServerSideOnly=true)]
		public static short? Int2pl(short? par2989, short? par2990)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2recv

		[Sql.Function(Name="pg_catalog.int2recv", ServerSideOnly=true)]
		public static short? Int2recv(object par2992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2send

		[Sql.Function(Name="pg_catalog.int2send", ServerSideOnly=true)]
		public static byte[] Int2send(short? par2994)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2shl

		[Sql.Function(Name="pg_catalog.int2shl", ServerSideOnly=true)]
		public static short? Int2shl(short? par2996, int? par2997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2shr

		[Sql.Function(Name="pg_catalog.int2shr", ServerSideOnly=true)]
		public static short? Int2shr(short? par2999, int? par3000)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2smaller

		[Sql.Function(Name="pg_catalog.int2smaller", ServerSideOnly=true)]
		public static short? Int2smaller(short? par3002, short? par3003)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2um

		[Sql.Function(Name="pg_catalog.int2um", ServerSideOnly=true)]
		public static short? Int2um(short? par3005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2up

		[Sql.Function(Name="pg_catalog.int2up", ServerSideOnly=true)]
		public static short? Int2up(short? par3007)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorin

		[Sql.Function(Name="pg_catalog.int2vectorin", ServerSideOnly=true)]
		public static object Int2vectorin(object par3009)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorout

		[Sql.Function(Name="pg_catalog.int2vectorout", ServerSideOnly=true)]
		public static object Int2vectorout(object par3011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorrecv

		[Sql.Function(Name="pg_catalog.int2vectorrecv", ServerSideOnly=true)]
		public static object Int2vectorrecv(object par3013)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorsend

		[Sql.Function(Name="pg_catalog.int2vectorsend", ServerSideOnly=true)]
		public static byte[] Int2vectorsend(object par3015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2xor

		[Sql.Function(Name="pg_catalog.int2xor", ServerSideOnly=true)]
		public static short? Int2xor(short? par3017, short? par3018)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42div

		[Sql.Function(Name="pg_catalog.int42div", ServerSideOnly=true)]
		public static int? Int42div(int? par3020, short? par3021)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42eq

		[Sql.Function(Name="pg_catalog.int42eq", ServerSideOnly=true)]
		public static bool? Int42eq(int? par3023, short? par3024)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42ge

		[Sql.Function(Name="pg_catalog.int42ge", ServerSideOnly=true)]
		public static bool? Int42ge(int? par3026, short? par3027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42gt

		[Sql.Function(Name="pg_catalog.int42gt", ServerSideOnly=true)]
		public static bool? Int42gt(int? par3029, short? par3030)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42le

		[Sql.Function(Name="pg_catalog.int42le", ServerSideOnly=true)]
		public static bool? Int42le(int? par3032, short? par3033)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42lt

		[Sql.Function(Name="pg_catalog.int42lt", ServerSideOnly=true)]
		public static bool? Int42lt(int? par3035, short? par3036)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42mi

		[Sql.Function(Name="pg_catalog.int42mi", ServerSideOnly=true)]
		public static int? Int42mi(int? par3038, short? par3039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42mul

		[Sql.Function(Name="pg_catalog.int42mul", ServerSideOnly=true)]
		public static int? Int42mul(int? par3041, short? par3042)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42ne

		[Sql.Function(Name="pg_catalog.int42ne", ServerSideOnly=true)]
		public static bool? Int42ne(int? par3044, short? par3045)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42pl

		[Sql.Function(Name="pg_catalog.int42pl", ServerSideOnly=true)]
		public static int? Int42pl(int? par3047, short? par3048)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48div

		[Sql.Function(Name="pg_catalog.int48div", ServerSideOnly=true)]
		public static long? Int48div(int? par3050, long? par3051)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48eq

		[Sql.Function(Name="pg_catalog.int48eq", ServerSideOnly=true)]
		public static bool? Int48eq(int? par3053, long? par3054)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48ge

		[Sql.Function(Name="pg_catalog.int48ge", ServerSideOnly=true)]
		public static bool? Int48ge(int? par3056, long? par3057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48gt

		[Sql.Function(Name="pg_catalog.int48gt", ServerSideOnly=true)]
		public static bool? Int48gt(int? par3059, long? par3060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48le

		[Sql.Function(Name="pg_catalog.int48le", ServerSideOnly=true)]
		public static bool? Int48le(int? par3062, long? par3063)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48lt

		[Sql.Function(Name="pg_catalog.int48lt", ServerSideOnly=true)]
		public static bool? Int48lt(int? par3065, long? par3066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48mi

		[Sql.Function(Name="pg_catalog.int48mi", ServerSideOnly=true)]
		public static long? Int48mi(int? par3068, long? par3069)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48mul

		[Sql.Function(Name="pg_catalog.int48mul", ServerSideOnly=true)]
		public static long? Int48mul(int? par3071, long? par3072)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48ne

		[Sql.Function(Name="pg_catalog.int48ne", ServerSideOnly=true)]
		public static bool? Int48ne(int? par3074, long? par3075)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48pl

		[Sql.Function(Name="pg_catalog.int48pl", ServerSideOnly=true)]
		public static long? Int48pl(int? par3077, long? par3078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4

		[Sql.Function(Name="pg_catalog.int4", ServerSideOnly=true)]
		public static int? Int4(object par3096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4Accum

		[Sql.Function(Name="pg_catalog.int4_accum", ServerSideOnly=true)]
		public static object Int4Accum(object par3098, int? par3099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AccumInv

		[Sql.Function(Name="pg_catalog.int4_accum_inv", ServerSideOnly=true)]
		public static object Int4AccumInv(object par3101, int? par3102)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgAccum

		[Sql.Function(Name="pg_catalog.int4_avg_accum", ServerSideOnly=true)]
		public static object Int4AvgAccum(object par3104, int? par3105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgAccumInv

		[Sql.Function(Name="pg_catalog.int4_avg_accum_inv", ServerSideOnly=true)]
		public static object Int4AvgAccumInv(object par3107, int? par3108)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgCombine

		[Sql.Function(Name="pg_catalog.int4_avg_combine", ServerSideOnly=true)]
		public static object Int4AvgCombine(object par3110, object par3111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4MulCash

		[Sql.Function(Name="pg_catalog.int4_mul_cash", ServerSideOnly=true)]
		public static decimal? Int4MulCash(int? par3113, decimal? par3114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4Sum

		[Sql.Function(Name="pg_catalog.int4_sum", ServerSideOnly=true)]
		public static long? Int4Sum(long? par3116, int? par3117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4abs

		[Sql.Function(Name="pg_catalog.int4abs", ServerSideOnly=true)]
		public static int? Int4abs(int? par3119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4and

		[Sql.Function(Name="pg_catalog.int4and", ServerSideOnly=true)]
		public static int? Int4and(int? par3121, int? par3122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4div

		[Sql.Function(Name="pg_catalog.int4div", ServerSideOnly=true)]
		public static int? Int4div(int? par3124, int? par3125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4eq

		[Sql.Function(Name="pg_catalog.int4eq", ServerSideOnly=true)]
		public static bool? Int4eq(int? par3127, int? par3128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4ge

		[Sql.Function(Name="pg_catalog.int4ge", ServerSideOnly=true)]
		public static bool? Int4ge(int? par3130, int? par3131)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4gt

		[Sql.Function(Name="pg_catalog.int4gt", ServerSideOnly=true)]
		public static bool? Int4gt(int? par3133, int? par3134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4in

		[Sql.Function(Name="pg_catalog.int4in", ServerSideOnly=true)]
		public static int? Int4in(object par3136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4inc

		[Sql.Function(Name="pg_catalog.int4inc", ServerSideOnly=true)]
		public static int? Int4inc(int? par3138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4larger

		[Sql.Function(Name="pg_catalog.int4larger", ServerSideOnly=true)]
		public static int? Int4larger(int? par3140, int? par3141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4le

		[Sql.Function(Name="pg_catalog.int4le", ServerSideOnly=true)]
		public static bool? Int4le(int? par3143, int? par3144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4lt

		[Sql.Function(Name="pg_catalog.int4lt", ServerSideOnly=true)]
		public static bool? Int4lt(int? par3146, int? par3147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mi

		[Sql.Function(Name="pg_catalog.int4mi", ServerSideOnly=true)]
		public static int? Int4mi(int? par3149, int? par3150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mod

		[Sql.Function(Name="pg_catalog.int4mod", ServerSideOnly=true)]
		public static int? Int4mod(int? par3152, int? par3153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mul

		[Sql.Function(Name="pg_catalog.int4mul", ServerSideOnly=true)]
		public static int? Int4mul(int? par3155, int? par3156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4ne

		[Sql.Function(Name="pg_catalog.int4ne", ServerSideOnly=true)]
		public static bool? Int4ne(int? par3158, int? par3159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4not

		[Sql.Function(Name="pg_catalog.int4not", ServerSideOnly=true)]
		public static int? Int4not(int? par3161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4or

		[Sql.Function(Name="pg_catalog.int4or", ServerSideOnly=true)]
		public static int? Int4or(int? par3163, int? par3164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4out

		[Sql.Function(Name="pg_catalog.int4out", ServerSideOnly=true)]
		public static object Int4out(int? par3166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4pl

		[Sql.Function(Name="pg_catalog.int4pl", ServerSideOnly=true)]
		public static int? Int4pl(int? par3168, int? par3169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4range

		[Sql.Function(Name="pg_catalog.int4range", ServerSideOnly=true)]
		public static object Int4range(int? par3174, int? par3175, string par3176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4rangeCanonical

		[Sql.Function(Name="pg_catalog.int4range_canonical", ServerSideOnly=true)]
		public static object Int4rangeCanonical(object par3178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4rangeSubdiff

		[Sql.Function(Name="pg_catalog.int4range_subdiff", ServerSideOnly=true)]
		public static double? Int4rangeSubdiff(int? par3180, int? par3181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4recv

		[Sql.Function(Name="pg_catalog.int4recv", ServerSideOnly=true)]
		public static int? Int4recv(object par3183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4send

		[Sql.Function(Name="pg_catalog.int4send", ServerSideOnly=true)]
		public static byte[] Int4send(int? par3185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4shl

		[Sql.Function(Name="pg_catalog.int4shl", ServerSideOnly=true)]
		public static int? Int4shl(int? par3187, int? par3188)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4shr

		[Sql.Function(Name="pg_catalog.int4shr", ServerSideOnly=true)]
		public static int? Int4shr(int? par3190, int? par3191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4smaller

		[Sql.Function(Name="pg_catalog.int4smaller", ServerSideOnly=true)]
		public static int? Int4smaller(int? par3193, int? par3194)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4um

		[Sql.Function(Name="pg_catalog.int4um", ServerSideOnly=true)]
		public static int? Int4um(int? par3196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4up

		[Sql.Function(Name="pg_catalog.int4up", ServerSideOnly=true)]
		public static int? Int4up(int? par3198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4xor

		[Sql.Function(Name="pg_catalog.int4xor", ServerSideOnly=true)]
		public static int? Int4xor(int? par3200, int? par3201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82div

		[Sql.Function(Name="pg_catalog.int82div", ServerSideOnly=true)]
		public static long? Int82div(long? par3203, short? par3204)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82eq

		[Sql.Function(Name="pg_catalog.int82eq", ServerSideOnly=true)]
		public static bool? Int82eq(long? par3206, short? par3207)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82ge

		[Sql.Function(Name="pg_catalog.int82ge", ServerSideOnly=true)]
		public static bool? Int82ge(long? par3209, short? par3210)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82gt

		[Sql.Function(Name="pg_catalog.int82gt", ServerSideOnly=true)]
		public static bool? Int82gt(long? par3212, short? par3213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82le

		[Sql.Function(Name="pg_catalog.int82le", ServerSideOnly=true)]
		public static bool? Int82le(long? par3215, short? par3216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82lt

		[Sql.Function(Name="pg_catalog.int82lt", ServerSideOnly=true)]
		public static bool? Int82lt(long? par3218, short? par3219)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82mi

		[Sql.Function(Name="pg_catalog.int82mi", ServerSideOnly=true)]
		public static long? Int82mi(long? par3221, short? par3222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82mul

		[Sql.Function(Name="pg_catalog.int82mul", ServerSideOnly=true)]
		public static long? Int82mul(long? par3224, short? par3225)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82ne

		[Sql.Function(Name="pg_catalog.int82ne", ServerSideOnly=true)]
		public static bool? Int82ne(long? par3227, short? par3228)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82pl

		[Sql.Function(Name="pg_catalog.int82pl", ServerSideOnly=true)]
		public static long? Int82pl(long? par3230, short? par3231)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84div

		[Sql.Function(Name="pg_catalog.int84div", ServerSideOnly=true)]
		public static long? Int84div(long? par3233, int? par3234)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84eq

		[Sql.Function(Name="pg_catalog.int84eq", ServerSideOnly=true)]
		public static bool? Int84eq(long? par3236, int? par3237)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84ge

		[Sql.Function(Name="pg_catalog.int84ge", ServerSideOnly=true)]
		public static bool? Int84ge(long? par3239, int? par3240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84gt

		[Sql.Function(Name="pg_catalog.int84gt", ServerSideOnly=true)]
		public static bool? Int84gt(long? par3242, int? par3243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84le

		[Sql.Function(Name="pg_catalog.int84le", ServerSideOnly=true)]
		public static bool? Int84le(long? par3245, int? par3246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84lt

		[Sql.Function(Name="pg_catalog.int84lt", ServerSideOnly=true)]
		public static bool? Int84lt(long? par3248, int? par3249)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84mi

		[Sql.Function(Name="pg_catalog.int84mi", ServerSideOnly=true)]
		public static long? Int84mi(long? par3251, int? par3252)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84mul

		[Sql.Function(Name="pg_catalog.int84mul", ServerSideOnly=true)]
		public static long? Int84mul(long? par3254, int? par3255)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84ne

		[Sql.Function(Name="pg_catalog.int84ne", ServerSideOnly=true)]
		public static bool? Int84ne(long? par3257, int? par3258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84pl

		[Sql.Function(Name="pg_catalog.int84pl", ServerSideOnly=true)]
		public static long? Int84pl(long? par3260, int? par3261)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8

		[Sql.Function(Name="pg_catalog.int8", ServerSideOnly=true)]
		public static long? Int8(short? par3277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Accum

		[Sql.Function(Name="pg_catalog.int8_accum", ServerSideOnly=true)]
		public static object Int8Accum(object par3279, long? par3280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AccumInv

		[Sql.Function(Name="pg_catalog.int8_accum_inv", ServerSideOnly=true)]
		public static object Int8AccumInv(object par3282, long? par3283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Avg

		[Sql.Function(Name="pg_catalog.int8_avg", ServerSideOnly=true)]
		public static decimal? Int8Avg(object par3285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgAccum

		[Sql.Function(Name="pg_catalog.int8_avg_accum", ServerSideOnly=true)]
		public static object Int8AvgAccum(object par3287, long? par3288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgAccumInv

		[Sql.Function(Name="pg_catalog.int8_avg_accum_inv", ServerSideOnly=true)]
		public static object Int8AvgAccumInv(object par3290, long? par3291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgCombine

		[Sql.Function(Name="pg_catalog.int8_avg_combine", ServerSideOnly=true)]
		public static object Int8AvgCombine(object par3293, object par3294)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgDeserialize

		[Sql.Function(Name="pg_catalog.int8_avg_deserialize", ServerSideOnly=true)]
		public static object Int8AvgDeserialize(byte[] par3296, object par3297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgSerialize

		[Sql.Function(Name="pg_catalog.int8_avg_serialize", ServerSideOnly=true)]
		public static byte[] Int8AvgSerialize(object par3299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8MulCash

		[Sql.Function(Name="pg_catalog.int8_mul_cash", ServerSideOnly=true)]
		public static decimal? Int8MulCash(long? par3301, decimal? par3302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Sum

		[Sql.Function(Name="pg_catalog.int8_sum", ServerSideOnly=true)]
		public static decimal? Int8Sum(decimal? par3304, long? par3305)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8abs

		[Sql.Function(Name="pg_catalog.int8abs", ServerSideOnly=true)]
		public static long? Int8abs(long? par3307)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8and

		[Sql.Function(Name="pg_catalog.int8and", ServerSideOnly=true)]
		public static long? Int8and(long? par3309, long? par3310)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8dec

		[Sql.Function(Name="pg_catalog.int8dec", ServerSideOnly=true)]
		public static long? Int8dec(long? par3312)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8decAny

		[Sql.Function(Name="pg_catalog.int8dec_any", ServerSideOnly=true)]
		public static long? Int8decAny(long? par3314, object par3315)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8div

		[Sql.Function(Name="pg_catalog.int8div", ServerSideOnly=true)]
		public static long? Int8div(long? par3317, long? par3318)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8eq

		[Sql.Function(Name="pg_catalog.int8eq", ServerSideOnly=true)]
		public static bool? Int8eq(long? par3320, long? par3321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8ge

		[Sql.Function(Name="pg_catalog.int8ge", ServerSideOnly=true)]
		public static bool? Int8ge(long? par3323, long? par3324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8gt

		[Sql.Function(Name="pg_catalog.int8gt", ServerSideOnly=true)]
		public static bool? Int8gt(long? par3326, long? par3327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8in

		[Sql.Function(Name="pg_catalog.int8in", ServerSideOnly=true)]
		public static long? Int8in(object par3329)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8inc

		[Sql.Function(Name="pg_catalog.int8inc", ServerSideOnly=true)]
		public static long? Int8inc(long? par3331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8incAny

		[Sql.Function(Name="pg_catalog.int8inc_any", ServerSideOnly=true)]
		public static long? Int8incAny(long? par3333, object par3334)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8incFloat8Float8

		[Sql.Function(Name="pg_catalog.int8inc_float8_float8", ServerSideOnly=true)]
		public static long? Int8incFloat8Float8(long? par3336, double? par3337, double? par3338)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8larger

		[Sql.Function(Name="pg_catalog.int8larger", ServerSideOnly=true)]
		public static long? Int8larger(long? par3340, long? par3341)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8le

		[Sql.Function(Name="pg_catalog.int8le", ServerSideOnly=true)]
		public static bool? Int8le(long? par3343, long? par3344)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8lt

		[Sql.Function(Name="pg_catalog.int8lt", ServerSideOnly=true)]
		public static bool? Int8lt(long? par3346, long? par3347)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mi

		[Sql.Function(Name="pg_catalog.int8mi", ServerSideOnly=true)]
		public static long? Int8mi(long? par3349, long? par3350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mod

		[Sql.Function(Name="pg_catalog.int8mod", ServerSideOnly=true)]
		public static long? Int8mod(long? par3352, long? par3353)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mul

		[Sql.Function(Name="pg_catalog.int8mul", ServerSideOnly=true)]
		public static long? Int8mul(long? par3355, long? par3356)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8ne

		[Sql.Function(Name="pg_catalog.int8ne", ServerSideOnly=true)]
		public static bool? Int8ne(long? par3358, long? par3359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8not

		[Sql.Function(Name="pg_catalog.int8not", ServerSideOnly=true)]
		public static long? Int8not(long? par3361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8or

		[Sql.Function(Name="pg_catalog.int8or", ServerSideOnly=true)]
		public static long? Int8or(long? par3363, long? par3364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8out

		[Sql.Function(Name="pg_catalog.int8out", ServerSideOnly=true)]
		public static object Int8out(long? par3366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8pl

		[Sql.Function(Name="pg_catalog.int8pl", ServerSideOnly=true)]
		public static long? Int8pl(long? par3368, long? par3369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8plInet

		[Sql.Function(Name="pg_catalog.int8pl_inet", ServerSideOnly=true)]
		public static NpgsqlInet? Int8plInet(long? par3371, NpgsqlInet? par3372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8range

		[Sql.Function(Name="pg_catalog.int8range", ServerSideOnly=true)]
		public static object Int8range(long? par3377, long? par3378, string par3379)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8rangeCanonical

		[Sql.Function(Name="pg_catalog.int8range_canonical", ServerSideOnly=true)]
		public static object Int8rangeCanonical(object par3381)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8rangeSubdiff

		[Sql.Function(Name="pg_catalog.int8range_subdiff", ServerSideOnly=true)]
		public static double? Int8rangeSubdiff(long? par3383, long? par3384)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8recv

		[Sql.Function(Name="pg_catalog.int8recv", ServerSideOnly=true)]
		public static long? Int8recv(object par3386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8send

		[Sql.Function(Name="pg_catalog.int8send", ServerSideOnly=true)]
		public static byte[] Int8send(long? par3388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8shl

		[Sql.Function(Name="pg_catalog.int8shl", ServerSideOnly=true)]
		public static long? Int8shl(long? par3390, int? par3391)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8shr

		[Sql.Function(Name="pg_catalog.int8shr", ServerSideOnly=true)]
		public static long? Int8shr(long? par3393, int? par3394)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8smaller

		[Sql.Function(Name="pg_catalog.int8smaller", ServerSideOnly=true)]
		public static long? Int8smaller(long? par3396, long? par3397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8um

		[Sql.Function(Name="pg_catalog.int8um", ServerSideOnly=true)]
		public static long? Int8um(long? par3399)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8up

		[Sql.Function(Name="pg_catalog.int8up", ServerSideOnly=true)]
		public static long? Int8up(long? par3401)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8xor

		[Sql.Function(Name="pg_catalog.int8xor", ServerSideOnly=true)]
		public static long? Int8xor(long? par3403, long? par3404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntegerPlDate

		[Sql.Function(Name="pg_catalog.integer_pl_date", ServerSideOnly=true)]
		public static NpgsqlDate? IntegerPlDate(int? par3406, NpgsqlDate? par3407)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterLb

		[Sql.Function(Name="pg_catalog.inter_lb", ServerSideOnly=true)]
		public static bool? InterLb(NpgsqlLine? par3409, NpgsqlBox? par3410)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterSb

		[Sql.Function(Name="pg_catalog.inter_sb", ServerSideOnly=true)]
		public static bool? InterSb(NpgsqlLSeg? par3412, NpgsqlBox? par3413)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterSl

		[Sql.Function(Name="pg_catalog.inter_sl", ServerSideOnly=true)]
		public static bool? InterSl(NpgsqlLSeg? par3415, NpgsqlLine? par3416)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InternalIn

		[Sql.Function(Name="pg_catalog.internal_in", ServerSideOnly=true)]
		public static object InternalIn(object par3418)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InternalOut

		[Sql.Function(Name="pg_catalog.internal_out", ServerSideOnly=true)]
		public static object InternalOut(object par3420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Interval

		[Sql.Function(Name="pg_catalog.interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? Interval(TimeSpan? par3425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAccum

		[Sql.Function(Name="pg_catalog.interval_accum", ServerSideOnly=true)]
		public static object IntervalAccum(object par3427, NpgsqlTimeSpan? par3428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAccumInv

		[Sql.Function(Name="pg_catalog.interval_accum_inv", ServerSideOnly=true)]
		public static object IntervalAccumInv(object par3430, NpgsqlTimeSpan? par3431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAvg

		[Sql.Function(Name="pg_catalog.interval_avg", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalAvg(object par3433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalCmp

		[Sql.Function(Name="pg_catalog.interval_cmp", ServerSideOnly=true)]
		public static int? IntervalCmp(NpgsqlTimeSpan? par3435, NpgsqlTimeSpan? par3436)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalCombine

		[Sql.Function(Name="pg_catalog.interval_combine", ServerSideOnly=true)]
		public static object IntervalCombine(object par3438, object par3439)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalDiv

		[Sql.Function(Name="pg_catalog.interval_div", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalDiv(NpgsqlTimeSpan? par3441, double? par3442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalEq

		[Sql.Function(Name="pg_catalog.interval_eq", ServerSideOnly=true)]
		public static bool? IntervalEq(NpgsqlTimeSpan? par3444, NpgsqlTimeSpan? par3445)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalGe

		[Sql.Function(Name="pg_catalog.interval_ge", ServerSideOnly=true)]
		public static bool? IntervalGe(NpgsqlTimeSpan? par3447, NpgsqlTimeSpan? par3448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalGt

		[Sql.Function(Name="pg_catalog.interval_gt", ServerSideOnly=true)]
		public static bool? IntervalGt(NpgsqlTimeSpan? par3450, NpgsqlTimeSpan? par3451)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalHash

		[Sql.Function(Name="pg_catalog.interval_hash", ServerSideOnly=true)]
		public static int? IntervalHash(NpgsqlTimeSpan? par3453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalHashExtended

		[Sql.Function(Name="pg_catalog.interval_hash_extended", ServerSideOnly=true)]
		public static long? IntervalHashExtended(NpgsqlTimeSpan? par3455, long? par3456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalIn

		[Sql.Function(Name="pg_catalog.interval_in", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalIn(object par3458, int? par3459, int? par3460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLarger

		[Sql.Function(Name="pg_catalog.interval_larger", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalLarger(NpgsqlTimeSpan? par3462, NpgsqlTimeSpan? par3463)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLe

		[Sql.Function(Name="pg_catalog.interval_le", ServerSideOnly=true)]
		public static bool? IntervalLe(NpgsqlTimeSpan? par3465, NpgsqlTimeSpan? par3466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLt

		[Sql.Function(Name="pg_catalog.interval_lt", ServerSideOnly=true)]
		public static bool? IntervalLt(NpgsqlTimeSpan? par3468, NpgsqlTimeSpan? par3469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalMi

		[Sql.Function(Name="pg_catalog.interval_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalMi(NpgsqlTimeSpan? par3471, NpgsqlTimeSpan? par3472)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalMul

		[Sql.Function(Name="pg_catalog.interval_mul", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalMul(NpgsqlTimeSpan? par3474, double? par3475)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalNe

		[Sql.Function(Name="pg_catalog.interval_ne", ServerSideOnly=true)]
		public static bool? IntervalNe(NpgsqlTimeSpan? par3477, NpgsqlTimeSpan? par3478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalOut

		[Sql.Function(Name="pg_catalog.interval_out", ServerSideOnly=true)]
		public static object IntervalOut(NpgsqlTimeSpan? par3480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPl

		[Sql.Function(Name="pg_catalog.interval_pl", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalPl(NpgsqlTimeSpan? par3482, NpgsqlTimeSpan? par3483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlDate

		[Sql.Function(Name="pg_catalog.interval_pl_date", ServerSideOnly=true)]
		public static DateTime? IntervalPlDate(NpgsqlTimeSpan? par3485, NpgsqlDate? par3486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTime

		[Sql.Function(Name="pg_catalog.interval_pl_time", ServerSideOnly=true)]
		public static TimeSpan? IntervalPlTime(NpgsqlTimeSpan? par3488, TimeSpan? par3489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimestamp

		[Sql.Function(Name="pg_catalog.interval_pl_timestamp", ServerSideOnly=true)]
		public static DateTime? IntervalPlTimestamp(NpgsqlTimeSpan? par3491, DateTime? par3492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimestamptz

		[Sql.Function(Name="pg_catalog.interval_pl_timestamptz", ServerSideOnly=true)]
		public static DateTimeOffset? IntervalPlTimestamptz(NpgsqlTimeSpan? par3494, DateTimeOffset? par3495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimetz

		[Sql.Function(Name="pg_catalog.interval_pl_timetz", ServerSideOnly=true)]
		public static DateTimeOffset? IntervalPlTimetz(NpgsqlTimeSpan? par3497, DateTimeOffset? par3498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalRecv

		[Sql.Function(Name="pg_catalog.interval_recv", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalRecv(object par3500, int? par3501, int? par3502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSend

		[Sql.Function(Name="pg_catalog.interval_send", ServerSideOnly=true)]
		public static byte[] IntervalSend(NpgsqlTimeSpan? par3504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSmaller

		[Sql.Function(Name="pg_catalog.interval_smaller", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalSmaller(NpgsqlTimeSpan? par3506, NpgsqlTimeSpan? par3507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSupport

		[Sql.Function(Name="pg_catalog.interval_support", ServerSideOnly=true)]
		public static object IntervalSupport(object par3509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalUm

		[Sql.Function(Name="pg_catalog.interval_um", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalUm(NpgsqlTimeSpan? par3511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intervaltypmodin

		[Sql.Function(Name="pg_catalog.intervaltypmodin", ServerSideOnly=true)]
		public static int? Intervaltypmodin(object par3513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intervaltypmodout

		[Sql.Function(Name="pg_catalog.intervaltypmodout", ServerSideOnly=true)]
		public static object Intervaltypmodout(int? par3515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isclosed

		[Sql.Function(Name="pg_catalog.isclosed", ServerSideOnly=true)]
		public static bool? Isclosed(NpgsqlPath? par3517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isempty

		[Sql.Function(Name="pg_catalog.isempty", ServerSideOnly=true)]
		public static bool? Isempty(object par3519)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isfinite

		[Sql.Function(Name="pg_catalog.isfinite", ServerSideOnly=true)]
		public static bool? Isfinite(DateTime? par3527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ishorizontal

		[Sql.Function(Name="pg_catalog.ishorizontal", ServerSideOnly=true)]
		public static bool? Ishorizontal(NpgsqlLine? par3534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iso88591ToUtf8

		[Sql.Function(Name="pg_catalog.iso8859_1_to_utf8", ServerSideOnly=true)]
		public static object Iso88591ToUtf8(int? par3535, int? par3536, object par3537, object par3538, int? par3539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iso8859ToUtf8

		[Sql.Function(Name="pg_catalog.iso8859_to_utf8", ServerSideOnly=true)]
		public static object Iso8859ToUtf8(int? par3540, int? par3541, object par3542, object par3543, int? par3544)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToKoi8r

		[Sql.Function(Name="pg_catalog.iso_to_koi8r", ServerSideOnly=true)]
		public static object IsoToKoi8r(int? par3545, int? par3546, object par3547, object par3548, int? par3549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToMic

		[Sql.Function(Name="pg_catalog.iso_to_mic", ServerSideOnly=true)]
		public static object IsoToMic(int? par3550, int? par3551, object par3552, object par3553, int? par3554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToWin1251

		[Sql.Function(Name="pg_catalog.iso_to_win1251", ServerSideOnly=true)]
		public static object IsoToWin1251(int? par3555, int? par3556, object par3557, object par3558, int? par3559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToWin866

		[Sql.Function(Name="pg_catalog.iso_to_win866", ServerSideOnly=true)]
		public static object IsoToWin866(int? par3560, int? par3561, object par3562, object par3563, int? par3564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isopen

		[Sql.Function(Name="pg_catalog.isopen", ServerSideOnly=true)]
		public static bool? Isopen(NpgsqlPath? par3566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isparallel

		[Sql.Function(Name="pg_catalog.isparallel", ServerSideOnly=true)]
		public static bool? Isparallel(NpgsqlLine? par3571, NpgsqlLine? par3572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isperp

		[Sql.Function(Name="pg_catalog.isperp", ServerSideOnly=true)]
		public static bool? Isperp(NpgsqlLine? par3577, NpgsqlLine? par3578)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isvertical

		[Sql.Function(Name="pg_catalog.isvertical", ServerSideOnly=true)]
		public static bool? Isvertical(NpgsqlLine? par3585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JohabToUtf8

		[Sql.Function(Name="pg_catalog.johab_to_utf8", ServerSideOnly=true)]
		public static object JohabToUtf8(int? par3586, int? par3587, object par3588, object par3589, int? par3590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAgg

		[Sql.Function(Name="pg_catalog.json_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string JsonAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAggFinalfn

		[Sql.Function(Name="pg_catalog.json_agg_finalfn", ServerSideOnly=true)]
		public static string JsonAggFinalfn(object par3594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAggTransfn

		[Sql.Function(Name="pg_catalog.json_agg_transfn", ServerSideOnly=true)]
		public static object JsonAggTransfn(object par3596, object par3597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayElement

		[Sql.Function(Name="pg_catalog.json_array_element", ServerSideOnly=true)]
		public static string JsonArrayElement(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayElementText

		[Sql.Function(Name="pg_catalog.json_array_element_text", ServerSideOnly=true)]
		public static string JsonArrayElementText(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayLength

		[Sql.Function(Name="pg_catalog.json_array_length", ServerSideOnly=true)]
		public static int? JsonArrayLength(string par3601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonBuildArray

		[Sql.Function(Name="pg_catalog.json_build_array", ServerSideOnly=true)]
		public static string JsonBuildArray()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonBuildObject

		[Sql.Function(Name="pg_catalog.json_build_object", ServerSideOnly=true)]
		public static string JsonBuildObject()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonExtractPath

		[Sql.Function(Name="pg_catalog.json_extract_path", ServerSideOnly=true)]
		public static string JsonExtractPath(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonExtractPathText

		[Sql.Function(Name="pg_catalog.json_extract_path_text", ServerSideOnly=true)]
		public static string JsonExtractPathText(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonIn

		[Sql.Function(Name="pg_catalog.json_in", ServerSideOnly=true)]
		public static string JsonIn(object par3611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObject

		[Sql.Function(Name="pg_catalog.json_object", ServerSideOnly=true)]
		public static string JsonObject(object par3615, object par3616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAgg

		[Sql.Function(Name="pg_catalog.json_object_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static string JsonObjectAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3618, Expression<Func<TSource, object>> par3619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAggFinalfn

		[Sql.Function(Name="pg_catalog.json_object_agg_finalfn", ServerSideOnly=true)]
		public static string JsonObjectAggFinalfn(object par3621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAggTransfn

		[Sql.Function(Name="pg_catalog.json_object_agg_transfn", ServerSideOnly=true)]
		public static object JsonObjectAggTransfn(object par3623, object par3624, object par3625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectField

		[Sql.Function(Name="pg_catalog.json_object_field", ServerSideOnly=true)]
		public static string JsonObjectField(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectFieldText

		[Sql.Function(Name="pg_catalog.json_object_field_text", ServerSideOnly=true)]
		public static string JsonObjectFieldText(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonOut

		[Sql.Function(Name="pg_catalog.json_out", ServerSideOnly=true)]
		public static object JsonOut(string par3630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonPopulateRecord

		[Sql.Function(Name="pg_catalog.json_populate_record", ServerSideOnly=true)]
		public static object JsonPopulateRecord(object @base, string from_json, bool? use_json_as_text)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonRecv

		[Sql.Function(Name="pg_catalog.json_recv", ServerSideOnly=true)]
		public static string JsonRecv(object par3633)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonSend

		[Sql.Function(Name="pg_catalog.json_send", ServerSideOnly=true)]
		public static byte[] JsonSend(string par3635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonStripNulls

		[Sql.Function(Name="pg_catalog.json_strip_nulls", ServerSideOnly=true)]
		public static string JsonStripNulls(string par3637)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonToRecord

		[Sql.Function(Name="pg_catalog.json_to_record", ServerSideOnly=true)]
		public static object JsonToRecord(string par3638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonToTsvector

		[Sql.Function(Name="pg_catalog.json_to_tsvector", ServerSideOnly=true)]
		public static object JsonToTsvector(object par3644, string par3645, string par3646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonTypeof

		[Sql.Function(Name="pg_catalog.json_typeof", ServerSideOnly=true)]
		public static string JsonTypeof(string par3648)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAgg

		[Sql.Function(Name="pg_catalog.jsonb_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string JsonbAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAggFinalfn

		[Sql.Function(Name="pg_catalog.jsonb_agg_finalfn", ServerSideOnly=true)]
		public static string JsonbAggFinalfn(object par3652)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAggTransfn

		[Sql.Function(Name="pg_catalog.jsonb_agg_transfn", ServerSideOnly=true)]
		public static object JsonbAggTransfn(object par3654, object par3655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayElement

		[Sql.Function(Name="pg_catalog.jsonb_array_element", ServerSideOnly=true)]
		public static string JsonbArrayElement(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayElementText

		[Sql.Function(Name="pg_catalog.jsonb_array_element_text", ServerSideOnly=true)]
		public static string JsonbArrayElementText(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayLength

		[Sql.Function(Name="pg_catalog.jsonb_array_length", ServerSideOnly=true)]
		public static int? JsonbArrayLength(string par3659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbBuildArray

		[Sql.Function(Name="pg_catalog.jsonb_build_array", ServerSideOnly=true)]
		public static string JsonbBuildArray()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbBuildObject

		[Sql.Function(Name="pg_catalog.jsonb_build_object", ServerSideOnly=true)]
		public static string JsonbBuildObject()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbCmp

		[Sql.Function(Name="pg_catalog.jsonb_cmp", ServerSideOnly=true)]
		public static int? JsonbCmp(string par3667, string par3668)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbConcat

		[Sql.Function(Name="pg_catalog.jsonb_concat", ServerSideOnly=true)]
		public static string JsonbConcat(string par3670, string par3671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbContained

		[Sql.Function(Name="pg_catalog.jsonb_contained", ServerSideOnly=true)]
		public static bool? JsonbContained(string par3673, string par3674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbContains

		[Sql.Function(Name="pg_catalog.jsonb_contains", ServerSideOnly=true)]
		public static bool? JsonbContains(string par3676, string par3677)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbDelete

		[Sql.Function(Name="pg_catalog.jsonb_delete", ServerSideOnly=true)]
		public static string JsonbDelete(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbDeletePath

		[Sql.Function(Name="pg_catalog.jsonb_delete_path", ServerSideOnly=true)]
		public static string JsonbDeletePath(string par3686, object par3687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbEq

		[Sql.Function(Name="pg_catalog.jsonb_eq", ServerSideOnly=true)]
		public static bool? JsonbEq(string par3689, string par3690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExists

		[Sql.Function(Name="pg_catalog.jsonb_exists", ServerSideOnly=true)]
		public static bool? JsonbExists(string par3692, string par3693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExistsAll

		[Sql.Function(Name="pg_catalog.jsonb_exists_all", ServerSideOnly=true)]
		public static bool? JsonbExistsAll(string par3695, object par3696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExistsAny

		[Sql.Function(Name="pg_catalog.jsonb_exists_any", ServerSideOnly=true)]
		public static bool? JsonbExistsAny(string par3698, object par3699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExtractPath

		[Sql.Function(Name="pg_catalog.jsonb_extract_path", ServerSideOnly=true)]
		public static string JsonbExtractPath(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExtractPathText

		[Sql.Function(Name="pg_catalog.jsonb_extract_path_text", ServerSideOnly=true)]
		public static string JsonbExtractPathText(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbGe

		[Sql.Function(Name="pg_catalog.jsonb_ge", ServerSideOnly=true)]
		public static bool? JsonbGe(string par3703, string par3704)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbGt

		[Sql.Function(Name="pg_catalog.jsonb_gt", ServerSideOnly=true)]
		public static bool? JsonbGt(string par3706, string par3707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbHash

		[Sql.Function(Name="pg_catalog.jsonb_hash", ServerSideOnly=true)]
		public static int? JsonbHash(string par3709)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbHashExtended

		[Sql.Function(Name="pg_catalog.jsonb_hash_extended", ServerSideOnly=true)]
		public static long? JsonbHashExtended(string par3711, long? par3712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbIn

		[Sql.Function(Name="pg_catalog.jsonb_in", ServerSideOnly=true)]
		public static string JsonbIn(object par3714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbInsert

		[Sql.Function(Name="pg_catalog.jsonb_insert", ServerSideOnly=true)]
		public static string JsonbInsert(string jsonb_in, object path, string replacement, bool? insert_after)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbLe

		[Sql.Function(Name="pg_catalog.jsonb_le", ServerSideOnly=true)]
		public static bool? JsonbLe(string par3717, string par3718)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbLt

		[Sql.Function(Name="pg_catalog.jsonb_lt", ServerSideOnly=true)]
		public static bool? JsonbLt(string par3720, string par3721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbNe

		[Sql.Function(Name="pg_catalog.jsonb_ne", ServerSideOnly=true)]
		public static bool? JsonbNe(string par3723, string par3724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObject

		[Sql.Function(Name="pg_catalog.jsonb_object", ServerSideOnly=true)]
		public static string JsonbObject(object par3728, object par3729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAgg

		[Sql.Function(Name="pg_catalog.jsonb_object_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static string JsonbObjectAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3731, Expression<Func<TSource, object>> par3732)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAggFinalfn

		[Sql.Function(Name="pg_catalog.jsonb_object_agg_finalfn", ServerSideOnly=true)]
		public static string JsonbObjectAggFinalfn(object par3734)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAggTransfn

		[Sql.Function(Name="pg_catalog.jsonb_object_agg_transfn", ServerSideOnly=true)]
		public static object JsonbObjectAggTransfn(object par3736, object par3737, object par3738)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectField

		[Sql.Function(Name="pg_catalog.jsonb_object_field", ServerSideOnly=true)]
		public static string JsonbObjectField(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectFieldText

		[Sql.Function(Name="pg_catalog.jsonb_object_field_text", ServerSideOnly=true)]
		public static string JsonbObjectFieldText(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbOut

		[Sql.Function(Name="pg_catalog.jsonb_out", ServerSideOnly=true)]
		public static object JsonbOut(string par3743)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPathExists

		[Sql.Function(Name="pg_catalog.jsonb_path_exists", ServerSideOnly=true)]
		public static bool? JsonbPathExists(string target, object path, string vars, bool? silent)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPathExistsOpr

		[Sql.Function(Name="pg_catalog.jsonb_path_exists_opr", ServerSideOnly=true)]
		public static bool? JsonbPathExistsOpr(string par3746, object par3747)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPathMatch

		[Sql.Function(Name="pg_catalog.jsonb_path_match", ServerSideOnly=true)]
		public static bool? JsonbPathMatch(string target, object path, string vars, bool? silent)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPathMatchOpr

		[Sql.Function(Name="pg_catalog.jsonb_path_match_opr", ServerSideOnly=true)]
		public static bool? JsonbPathMatchOpr(string par3750, object par3751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPathQueryArray

		[Sql.Function(Name="pg_catalog.jsonb_path_query_array", ServerSideOnly=true)]
		public static string JsonbPathQueryArray(string target, object path, string vars, bool? silent)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPathQueryFirst

		[Sql.Function(Name="pg_catalog.jsonb_path_query_first", ServerSideOnly=true)]
		public static string JsonbPathQueryFirst(string target, object path, string vars, bool? silent)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPopulateRecord

		[Sql.Function(Name="pg_catalog.jsonb_populate_record", ServerSideOnly=true)]
		public static object JsonbPopulateRecord(object par3755, string par3756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPretty

		[Sql.Function(Name="pg_catalog.jsonb_pretty", ServerSideOnly=true)]
		public static string JsonbPretty(string par3760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbRecv

		[Sql.Function(Name="pg_catalog.jsonb_recv", ServerSideOnly=true)]
		public static string JsonbRecv(object par3762)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbSend

		[Sql.Function(Name="pg_catalog.jsonb_send", ServerSideOnly=true)]
		public static byte[] JsonbSend(string par3764)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbSet

		[Sql.Function(Name="pg_catalog.jsonb_set", ServerSideOnly=true)]
		public static string JsonbSet(string jsonb_in, object path, string replacement, bool? create_if_missing)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbStripNulls

		[Sql.Function(Name="pg_catalog.jsonb_strip_nulls", ServerSideOnly=true)]
		public static string JsonbStripNulls(string par3767)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbToRecord

		[Sql.Function(Name="pg_catalog.jsonb_to_record", ServerSideOnly=true)]
		public static object JsonbToRecord(string par3768)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbToTsvector

		[Sql.Function(Name="pg_catalog.jsonb_to_tsvector", ServerSideOnly=true)]
		public static object JsonbToTsvector(object par3774, string par3775, string par3776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbTypeof

		[Sql.Function(Name="pg_catalog.jsonb_typeof", ServerSideOnly=true)]
		public static string JsonbTypeof(string par3778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonpathIn

		[Sql.Function(Name="pg_catalog.jsonpath_in", ServerSideOnly=true)]
		public static object JsonpathIn(object par3780)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonpathOut

		[Sql.Function(Name="pg_catalog.jsonpath_out", ServerSideOnly=true)]
		public static object JsonpathOut(object par3782)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonpathRecv

		[Sql.Function(Name="pg_catalog.jsonpath_recv", ServerSideOnly=true)]
		public static object JsonpathRecv(object par3784)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonpathSend

		[Sql.Function(Name="pg_catalog.jsonpath_send", ServerSideOnly=true)]
		public static byte[] JsonpathSend(object par3786)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyDays

		[Sql.Function(Name="pg_catalog.justify_days", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyDays(NpgsqlTimeSpan? par3788)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyHours

		[Sql.Function(Name="pg_catalog.justify_hours", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyHours(NpgsqlTimeSpan? par3790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyInterval

		[Sql.Function(Name="pg_catalog.justify_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyInterval(NpgsqlTimeSpan? par3792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToIso

		[Sql.Function(Name="pg_catalog.koi8r_to_iso", ServerSideOnly=true)]
		public static object Koi8rToIso(int? par3793, int? par3794, object par3795, object par3796, int? par3797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToMic

		[Sql.Function(Name="pg_catalog.koi8r_to_mic", ServerSideOnly=true)]
		public static object Koi8rToMic(int? par3798, int? par3799, object par3800, object par3801, int? par3802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToUtf8

		[Sql.Function(Name="pg_catalog.koi8r_to_utf8", ServerSideOnly=true)]
		public static object Koi8rToUtf8(int? par3803, int? par3804, object par3805, object par3806, int? par3807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToWin1251

		[Sql.Function(Name="pg_catalog.koi8r_to_win1251", ServerSideOnly=true)]
		public static object Koi8rToWin1251(int? par3808, int? par3809, object par3810, object par3811, int? par3812)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToWin866

		[Sql.Function(Name="pg_catalog.koi8r_to_win866", ServerSideOnly=true)]
		public static object Koi8rToWin866(int? par3813, int? par3814, object par3815, object par3816, int? par3817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8uToUtf8

		[Sql.Function(Name="pg_catalog.koi8u_to_utf8", ServerSideOnly=true)]
		public static object Koi8uToUtf8(int? par3818, int? par3819, object par3820, object par3821, int? par3822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lag

		[Sql.Function(Name="pg_catalog.lag", ServerSideOnly=true)]
		public static object Lag(object par3829, int? par3830, object par3831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LanguageHandlerIn

		[Sql.Function(Name="pg_catalog.language_handler_in", ServerSideOnly=true)]
		public static object LanguageHandlerIn(object par3833)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LanguageHandlerOut

		[Sql.Function(Name="pg_catalog.language_handler_out", ServerSideOnly=true)]
		public static object LanguageHandlerOut(object par3835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LastValue

		[Sql.Function(Name="pg_catalog.last_value", ServerSideOnly=true)]
		public static object LastValue(object par3837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lastval

		[Sql.Function(Name="pg_catalog.lastval", ServerSideOnly=true)]
		public static long? Lastval()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin1ToMic

		[Sql.Function(Name="pg_catalog.latin1_to_mic", ServerSideOnly=true)]
		public static object Latin1ToMic(int? par3839, int? par3840, object par3841, object par3842, int? par3843)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin2ToMic

		[Sql.Function(Name="pg_catalog.latin2_to_mic", ServerSideOnly=true)]
		public static object Latin2ToMic(int? par3844, int? par3845, object par3846, object par3847, int? par3848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin2ToWin1250

		[Sql.Function(Name="pg_catalog.latin2_to_win1250", ServerSideOnly=true)]
		public static object Latin2ToWin1250(int? par3849, int? par3850, object par3851, object par3852, int? par3853)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin3ToMic

		[Sql.Function(Name="pg_catalog.latin3_to_mic", ServerSideOnly=true)]
		public static object Latin3ToMic(int? par3854, int? par3855, object par3856, object par3857, int? par3858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin4ToMic

		[Sql.Function(Name="pg_catalog.latin4_to_mic", ServerSideOnly=true)]
		public static object Latin4ToMic(int? par3859, int? par3860, object par3861, object par3862, int? par3863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lead

		[Sql.Function(Name="pg_catalog.lead", ServerSideOnly=true)]
		public static object Lead(object par3870, int? par3871, object par3872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Left

		[Sql.Function(Name="pg_catalog.left", ServerSideOnly=true)]
		public static string Left(string par3874, int? par3875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Length

		[Sql.Function(Name="pg_catalog.length", ServerSideOnly=true)]
		public static int? Length(object par3892)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Like

		[Sql.Function(Name="pg_catalog.like", ServerSideOnly=true)]
		public static bool? Like(byte[] par3900, byte[] par3901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LikeEscape

		[Sql.Function(Name="pg_catalog.like_escape", ServerSideOnly=true)]
		public static byte[] LikeEscape(byte[] par3906, byte[] par3907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Likejoinsel

		[Sql.Function(Name="pg_catalog.likejoinsel", ServerSideOnly=true)]
		public static double? Likejoinsel(object par3909, int? par3910, object par3911, short? par3912, object par3913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Likesel

		[Sql.Function(Name="pg_catalog.likesel", ServerSideOnly=true)]
		public static double? Likesel(object par3915, int? par3916, object par3917, int? par3918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Line

		[Sql.Function(Name="pg_catalog.line", ServerSideOnly=true)]
		public static NpgsqlLine? Line(NpgsqlPoint? par3920, NpgsqlPoint? par3921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineDistance

		[Sql.Function(Name="pg_catalog.line_distance", ServerSideOnly=true)]
		public static double? LineDistance(NpgsqlLine? par3923, NpgsqlLine? par3924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineEq

		[Sql.Function(Name="pg_catalog.line_eq", ServerSideOnly=true)]
		public static bool? LineEq(NpgsqlLine? par3926, NpgsqlLine? par3927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineHorizontal

		[Sql.Function(Name="pg_catalog.line_horizontal", ServerSideOnly=true)]
		public static bool? LineHorizontal(NpgsqlLine? par3929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineIn

		[Sql.Function(Name="pg_catalog.line_in", ServerSideOnly=true)]
		public static NpgsqlLine? LineIn(object par3931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineInterpt

		[Sql.Function(Name="pg_catalog.line_interpt", ServerSideOnly=true)]
		public static NpgsqlPoint? LineInterpt(NpgsqlLine? par3933, NpgsqlLine? par3934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineIntersect

		[Sql.Function(Name="pg_catalog.line_intersect", ServerSideOnly=true)]
		public static bool? LineIntersect(NpgsqlLine? par3936, NpgsqlLine? par3937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineOut

		[Sql.Function(Name="pg_catalog.line_out", ServerSideOnly=true)]
		public static object LineOut(NpgsqlLine? par3939)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineParallel

		[Sql.Function(Name="pg_catalog.line_parallel", ServerSideOnly=true)]
		public static bool? LineParallel(NpgsqlLine? par3941, NpgsqlLine? par3942)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LinePerp

		[Sql.Function(Name="pg_catalog.line_perp", ServerSideOnly=true)]
		public static bool? LinePerp(NpgsqlLine? par3944, NpgsqlLine? par3945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineRecv

		[Sql.Function(Name="pg_catalog.line_recv", ServerSideOnly=true)]
		public static NpgsqlLine? LineRecv(object par3947)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineSend

		[Sql.Function(Name="pg_catalog.line_send", ServerSideOnly=true)]
		public static byte[] LineSend(NpgsqlLine? par3949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineVertical

		[Sql.Function(Name="pg_catalog.line_vertical", ServerSideOnly=true)]
		public static bool? LineVertical(NpgsqlLine? par3951)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ln

		[Sql.Function(Name="pg_catalog.ln", ServerSideOnly=true)]
		public static decimal? Ln(decimal? par3955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoClose

		[Sql.Function(Name="pg_catalog.lo_close", ServerSideOnly=true)]
		public static int? LoClose(int? par3957)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoCreat

		[Sql.Function(Name="pg_catalog.lo_creat", ServerSideOnly=true)]
		public static int? LoCreat(int? par3959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoCreate

		[Sql.Function(Name="pg_catalog.lo_create", ServerSideOnly=true)]
		public static int? LoCreate(int? par3961)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoExport

		[Sql.Function(Name="pg_catalog.lo_export", ServerSideOnly=true)]
		public static int? LoExport(int? par3963, string par3964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoFromBytea

		[Sql.Function(Name="pg_catalog.lo_from_bytea", ServerSideOnly=true)]
		public static int? LoFromBytea(int? par3966, byte[] par3967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoGet

		[Sql.Function(Name="pg_catalog.lo_get", ServerSideOnly=true)]
		public static byte[] LoGet(int? par3971, long? par3972, int? par3973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoImport

		[Sql.Function(Name="pg_catalog.lo_import", ServerSideOnly=true)]
		public static int? LoImport(string par3977, int? par3978)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoLseek64

		[Sql.Function(Name="pg_catalog.lo_lseek64", ServerSideOnly=true)]
		public static long? LoLseek64(int? par3980, long? par3981, int? par3982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoLseek

		[Sql.Function(Name="pg_catalog.lo_lseek", ServerSideOnly=true)]
		public static int? LoLseek(int? par3984, int? par3985, int? par3986)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoOpen

		[Sql.Function(Name="pg_catalog.lo_open", ServerSideOnly=true)]
		public static int? LoOpen(int? par3988, int? par3989)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoPut

		[Sql.Function(Name="pg_catalog.lo_put", ServerSideOnly=true)]
		public static object LoPut(int? par3990, long? par3991, byte[] par3992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTell64

		[Sql.Function(Name="pg_catalog.lo_tell64", ServerSideOnly=true)]
		public static long? LoTell64(int? par3994)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTell

		[Sql.Function(Name="pg_catalog.lo_tell", ServerSideOnly=true)]
		public static int? LoTell(int? par3996)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTruncate64

		[Sql.Function(Name="pg_catalog.lo_truncate64", ServerSideOnly=true)]
		public static int? LoTruncate64(int? par3998, long? par3999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTruncate

		[Sql.Function(Name="pg_catalog.lo_truncate", ServerSideOnly=true)]
		public static int? LoTruncate(int? par4001, int? par4002)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoUnlink

		[Sql.Function(Name="pg_catalog.lo_unlink", ServerSideOnly=true)]
		public static int? LoUnlink(int? par4004)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Log10

		[Sql.Function(Name="pg_catalog.log10", ServerSideOnly=true)]
		public static decimal? Log10(decimal? par4008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Log

		[Sql.Function(Name="pg_catalog.log", ServerSideOnly=true)]
		public static decimal? Log(decimal? par4015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Loread

		[Sql.Function(Name="pg_catalog.loread", ServerSideOnly=true)]
		public static byte[] Loread(int? par4017, int? par4018)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lower

		[Sql.Function(Name="pg_catalog.lower", ServerSideOnly=true)]
		public static string Lower(string par4022)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LowerInc

		[Sql.Function(Name="pg_catalog.lower_inc", ServerSideOnly=true)]
		public static bool? LowerInc(object par4024)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LowerInf

		[Sql.Function(Name="pg_catalog.lower_inf", ServerSideOnly=true)]
		public static bool? LowerInf(object par4026)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lowrite

		[Sql.Function(Name="pg_catalog.lowrite", ServerSideOnly=true)]
		public static int? Lowrite(int? par4028, byte[] par4029)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lpad

		[Sql.Function(Name="pg_catalog.lpad", ServerSideOnly=true)]
		public static string Lpad(string par4035, int? par4036)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lseg

		[Sql.Function(Name="pg_catalog.lseg", ServerSideOnly=true)]
		public static NpgsqlLSeg? Lseg(NpgsqlPoint? par4040, NpgsqlPoint? par4041)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegCenter

		[Sql.Function(Name="pg_catalog.lseg_center", ServerSideOnly=true)]
		public static NpgsqlPoint? LsegCenter(NpgsqlLSeg? par4043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegDistance

		[Sql.Function(Name="pg_catalog.lseg_distance", ServerSideOnly=true)]
		public static double? LsegDistance(NpgsqlLSeg? par4045, NpgsqlLSeg? par4046)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegEq

		[Sql.Function(Name="pg_catalog.lseg_eq", ServerSideOnly=true)]
		public static bool? LsegEq(NpgsqlLSeg? par4048, NpgsqlLSeg? par4049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegGe

		[Sql.Function(Name="pg_catalog.lseg_ge", ServerSideOnly=true)]
		public static bool? LsegGe(NpgsqlLSeg? par4051, NpgsqlLSeg? par4052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegGt

		[Sql.Function(Name="pg_catalog.lseg_gt", ServerSideOnly=true)]
		public static bool? LsegGt(NpgsqlLSeg? par4054, NpgsqlLSeg? par4055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegHorizontal

		[Sql.Function(Name="pg_catalog.lseg_horizontal", ServerSideOnly=true)]
		public static bool? LsegHorizontal(NpgsqlLSeg? par4057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegIn

		[Sql.Function(Name="pg_catalog.lseg_in", ServerSideOnly=true)]
		public static NpgsqlLSeg? LsegIn(object par4059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegInterpt

		[Sql.Function(Name="pg_catalog.lseg_interpt", ServerSideOnly=true)]
		public static NpgsqlPoint? LsegInterpt(NpgsqlLSeg? par4061, NpgsqlLSeg? par4062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegIntersect

		[Sql.Function(Name="pg_catalog.lseg_intersect", ServerSideOnly=true)]
		public static bool? LsegIntersect(NpgsqlLSeg? par4064, NpgsqlLSeg? par4065)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLe

		[Sql.Function(Name="pg_catalog.lseg_le", ServerSideOnly=true)]
		public static bool? LsegLe(NpgsqlLSeg? par4067, NpgsqlLSeg? par4068)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLength

		[Sql.Function(Name="pg_catalog.lseg_length", ServerSideOnly=true)]
		public static double? LsegLength(NpgsqlLSeg? par4070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLt

		[Sql.Function(Name="pg_catalog.lseg_lt", ServerSideOnly=true)]
		public static bool? LsegLt(NpgsqlLSeg? par4072, NpgsqlLSeg? par4073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegNe

		[Sql.Function(Name="pg_catalog.lseg_ne", ServerSideOnly=true)]
		public static bool? LsegNe(NpgsqlLSeg? par4075, NpgsqlLSeg? par4076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegOut

		[Sql.Function(Name="pg_catalog.lseg_out", ServerSideOnly=true)]
		public static object LsegOut(NpgsqlLSeg? par4078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegParallel

		[Sql.Function(Name="pg_catalog.lseg_parallel", ServerSideOnly=true)]
		public static bool? LsegParallel(NpgsqlLSeg? par4080, NpgsqlLSeg? par4081)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegPerp

		[Sql.Function(Name="pg_catalog.lseg_perp", ServerSideOnly=true)]
		public static bool? LsegPerp(NpgsqlLSeg? par4083, NpgsqlLSeg? par4084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegRecv

		[Sql.Function(Name="pg_catalog.lseg_recv", ServerSideOnly=true)]
		public static NpgsqlLSeg? LsegRecv(object par4086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegSend

		[Sql.Function(Name="pg_catalog.lseg_send", ServerSideOnly=true)]
		public static byte[] LsegSend(NpgsqlLSeg? par4088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegVertical

		[Sql.Function(Name="pg_catalog.lseg_vertical", ServerSideOnly=true)]
		public static bool? LsegVertical(NpgsqlLSeg? par4090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ltrim

		[Sql.Function(Name="pg_catalog.ltrim", ServerSideOnly=true)]
		public static string Ltrim(string par4095)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8

		[Sql.Function(Name="pg_catalog.macaddr8", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8(PhysicalAddress par4097)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8And

		[Sql.Function(Name="pg_catalog.macaddr8_and", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8And(PhysicalAddress par4099, PhysicalAddress par4100)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Cmp

		[Sql.Function(Name="pg_catalog.macaddr8_cmp", ServerSideOnly=true)]
		public static int? Macaddr8Cmp(PhysicalAddress par4102, PhysicalAddress par4103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Eq

		[Sql.Function(Name="pg_catalog.macaddr8_eq", ServerSideOnly=true)]
		public static bool? Macaddr8Eq(PhysicalAddress par4105, PhysicalAddress par4106)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Ge

		[Sql.Function(Name="pg_catalog.macaddr8_ge", ServerSideOnly=true)]
		public static bool? Macaddr8Ge(PhysicalAddress par4108, PhysicalAddress par4109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Gt

		[Sql.Function(Name="pg_catalog.macaddr8_gt", ServerSideOnly=true)]
		public static bool? Macaddr8Gt(PhysicalAddress par4111, PhysicalAddress par4112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8In

		[Sql.Function(Name="pg_catalog.macaddr8_in", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8In(object par4114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Le

		[Sql.Function(Name="pg_catalog.macaddr8_le", ServerSideOnly=true)]
		public static bool? Macaddr8Le(PhysicalAddress par4116, PhysicalAddress par4117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Lt

		[Sql.Function(Name="pg_catalog.macaddr8_lt", ServerSideOnly=true)]
		public static bool? Macaddr8Lt(PhysicalAddress par4119, PhysicalAddress par4120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Ne

		[Sql.Function(Name="pg_catalog.macaddr8_ne", ServerSideOnly=true)]
		public static bool? Macaddr8Ne(PhysicalAddress par4122, PhysicalAddress par4123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Not

		[Sql.Function(Name="pg_catalog.macaddr8_not", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8Not(PhysicalAddress par4125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Or

		[Sql.Function(Name="pg_catalog.macaddr8_or", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8Or(PhysicalAddress par4127, PhysicalAddress par4128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Out

		[Sql.Function(Name="pg_catalog.macaddr8_out", ServerSideOnly=true)]
		public static object Macaddr8Out(PhysicalAddress par4130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Recv

		[Sql.Function(Name="pg_catalog.macaddr8_recv", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8Recv(object par4132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Send

		[Sql.Function(Name="pg_catalog.macaddr8_send", ServerSideOnly=true)]
		public static byte[] Macaddr8Send(PhysicalAddress par4134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr8Set7bit

		[Sql.Function(Name="pg_catalog.macaddr8_set7bit", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr8Set7bit(PhysicalAddress par4136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Macaddr

		[Sql.Function(Name="pg_catalog.macaddr", ServerSideOnly=true)]
		public static PhysicalAddress Macaddr(PhysicalAddress par4138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrAnd

		[Sql.Function(Name="pg_catalog.macaddr_and", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrAnd(PhysicalAddress par4140, PhysicalAddress par4141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrCmp

		[Sql.Function(Name="pg_catalog.macaddr_cmp", ServerSideOnly=true)]
		public static int? MacaddrCmp(PhysicalAddress par4143, PhysicalAddress par4144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrEq

		[Sql.Function(Name="pg_catalog.macaddr_eq", ServerSideOnly=true)]
		public static bool? MacaddrEq(PhysicalAddress par4146, PhysicalAddress par4147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrGe

		[Sql.Function(Name="pg_catalog.macaddr_ge", ServerSideOnly=true)]
		public static bool? MacaddrGe(PhysicalAddress par4149, PhysicalAddress par4150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrGt

		[Sql.Function(Name="pg_catalog.macaddr_gt", ServerSideOnly=true)]
		public static bool? MacaddrGt(PhysicalAddress par4152, PhysicalAddress par4153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrIn

		[Sql.Function(Name="pg_catalog.macaddr_in", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrIn(object par4155)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrLe

		[Sql.Function(Name="pg_catalog.macaddr_le", ServerSideOnly=true)]
		public static bool? MacaddrLe(PhysicalAddress par4157, PhysicalAddress par4158)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrLt

		[Sql.Function(Name="pg_catalog.macaddr_lt", ServerSideOnly=true)]
		public static bool? MacaddrLt(PhysicalAddress par4160, PhysicalAddress par4161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrNe

		[Sql.Function(Name="pg_catalog.macaddr_ne", ServerSideOnly=true)]
		public static bool? MacaddrNe(PhysicalAddress par4163, PhysicalAddress par4164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrNot

		[Sql.Function(Name="pg_catalog.macaddr_not", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrNot(PhysicalAddress par4166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrOr

		[Sql.Function(Name="pg_catalog.macaddr_or", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrOr(PhysicalAddress par4168, PhysicalAddress par4169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrOut

		[Sql.Function(Name="pg_catalog.macaddr_out", ServerSideOnly=true)]
		public static object MacaddrOut(PhysicalAddress par4171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrRecv

		[Sql.Function(Name="pg_catalog.macaddr_recv", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrRecv(object par4173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrSend

		[Sql.Function(Name="pg_catalog.macaddr_send", ServerSideOnly=true)]
		public static byte[] MacaddrSend(PhysicalAddress par4175)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrSortsupport

		[Sql.Function(Name="pg_catalog.macaddr_sortsupport", ServerSideOnly=true)]
		public static object MacaddrSortsupport(object par4176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeDate

		[Sql.Function(Name="pg_catalog.make_date", ServerSideOnly=true)]
		public static NpgsqlDate? MakeDate(int? year, int? month, int? day)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeInterval

		[Sql.Function(Name="pg_catalog.make_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? MakeInterval(int? years, int? months, int? weeks, int? days, int? hours, int? mins, double? secs)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTime

		[Sql.Function(Name="pg_catalog.make_time", ServerSideOnly=true)]
		public static TimeSpan? MakeTime(int? hour, int? min, double? sec)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTimestamp

		[Sql.Function(Name="pg_catalog.make_timestamp", ServerSideOnly=true)]
		public static DateTime? MakeTimestamp(int? year, int? month, int? mday, int? hour, int? min, double? sec)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTimestamptz

		[Sql.Function(Name="pg_catalog.make_timestamptz", ServerSideOnly=true)]
		public static DateTimeOffset? MakeTimestamptz(int? year, int? month, int? mday, int? hour, int? min, double? sec, string timezone)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Makeaclitem

		[Sql.Function(Name="pg_catalog.makeaclitem", ServerSideOnly=true)]
		public static object Makeaclitem(int? par4184, int? par4185, string par4186, bool? par4187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Masklen

		[Sql.Function(Name="pg_catalog.masklen", ServerSideOnly=true)]
		public static int? Masklen(NpgsqlInet? par4189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Max

		[Sql.Function(Name="pg_catalog.max", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlInet? Max<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlInet?>> par4229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Md5

		[Sql.Function(Name="pg_catalog.md5", ServerSideOnly=true)]
		public static string Md5(byte[] par4233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToAscii

		[Sql.Function(Name="pg_catalog.mic_to_ascii", ServerSideOnly=true)]
		public static object MicToAscii(int? par4234, int? par4235, object par4236, object par4237, int? par4238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToBig5

		[Sql.Function(Name="pg_catalog.mic_to_big5", ServerSideOnly=true)]
		public static object MicToBig5(int? par4239, int? par4240, object par4241, object par4242, int? par4243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucCn

		[Sql.Function(Name="pg_catalog.mic_to_euc_cn", ServerSideOnly=true)]
		public static object MicToEucCn(int? par4244, int? par4245, object par4246, object par4247, int? par4248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucJp

		[Sql.Function(Name="pg_catalog.mic_to_euc_jp", ServerSideOnly=true)]
		public static object MicToEucJp(int? par4249, int? par4250, object par4251, object par4252, int? par4253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucKr

		[Sql.Function(Name="pg_catalog.mic_to_euc_kr", ServerSideOnly=true)]
		public static object MicToEucKr(int? par4254, int? par4255, object par4256, object par4257, int? par4258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucTw

		[Sql.Function(Name="pg_catalog.mic_to_euc_tw", ServerSideOnly=true)]
		public static object MicToEucTw(int? par4259, int? par4260, object par4261, object par4262, int? par4263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToIso

		[Sql.Function(Name="pg_catalog.mic_to_iso", ServerSideOnly=true)]
		public static object MicToIso(int? par4264, int? par4265, object par4266, object par4267, int? par4268)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToKoi8r

		[Sql.Function(Name="pg_catalog.mic_to_koi8r", ServerSideOnly=true)]
		public static object MicToKoi8r(int? par4269, int? par4270, object par4271, object par4272, int? par4273)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin1

		[Sql.Function(Name="pg_catalog.mic_to_latin1", ServerSideOnly=true)]
		public static object MicToLatin1(int? par4274, int? par4275, object par4276, object par4277, int? par4278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin2

		[Sql.Function(Name="pg_catalog.mic_to_latin2", ServerSideOnly=true)]
		public static object MicToLatin2(int? par4279, int? par4280, object par4281, object par4282, int? par4283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin3

		[Sql.Function(Name="pg_catalog.mic_to_latin3", ServerSideOnly=true)]
		public static object MicToLatin3(int? par4284, int? par4285, object par4286, object par4287, int? par4288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin4

		[Sql.Function(Name="pg_catalog.mic_to_latin4", ServerSideOnly=true)]
		public static object MicToLatin4(int? par4289, int? par4290, object par4291, object par4292, int? par4293)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToSjis

		[Sql.Function(Name="pg_catalog.mic_to_sjis", ServerSideOnly=true)]
		public static object MicToSjis(int? par4294, int? par4295, object par4296, object par4297, int? par4298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin1250

		[Sql.Function(Name="pg_catalog.mic_to_win1250", ServerSideOnly=true)]
		public static object MicToWin1250(int? par4299, int? par4300, object par4301, object par4302, int? par4303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin1251

		[Sql.Function(Name="pg_catalog.mic_to_win1251", ServerSideOnly=true)]
		public static object MicToWin1251(int? par4304, int? par4305, object par4306, object par4307, int? par4308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin866

		[Sql.Function(Name="pg_catalog.mic_to_win866", ServerSideOnly=true)]
		public static object MicToWin866(int? par4309, int? par4310, object par4311, object par4312, int? par4313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Min

		[Sql.Function(Name="pg_catalog.min", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlInet? Min<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlInet?>> par4353)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mod

		[Sql.Function(Name="pg_catalog.mod", ServerSideOnly=true)]
		public static long? Mod(long? par4364, long? par4365)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mode

		[Sql.Function(Name="pg_catalog.mode", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static object Mode<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par4367)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ModeFinal

		[Sql.Function(Name="pg_catalog.mode_final", ServerSideOnly=true)]
		public static object ModeFinal(object par4369, object par4370)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Money

		[Sql.Function(Name="pg_catalog.money", ServerSideOnly=true)]
		public static decimal? Money(decimal? par4376)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MulDInterval

		[Sql.Function(Name="pg_catalog.mul_d_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? MulDInterval(double? par4378, NpgsqlTimeSpan? par4379)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MxidAge

		[Sql.Function(Name="pg_catalog.mxid_age", ServerSideOnly=true)]
		public static int? MxidAge(int? par4381)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Name

		[Sql.Function(Name="pg_catalog.name", ServerSideOnly=true)]
		public static string Name(string par4387)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameconcatoid

		[Sql.Function(Name="pg_catalog.nameconcatoid", ServerSideOnly=true)]
		public static string Nameconcatoid(string par4389, int? par4390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameeq

		[Sql.Function(Name="pg_catalog.nameeq", ServerSideOnly=true)]
		public static bool? Nameeq(string par4392, string par4393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameeqtext

		[Sql.Function(Name="pg_catalog.nameeqtext", ServerSideOnly=true)]
		public static bool? Nameeqtext(string par4395, string par4396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namege

		[Sql.Function(Name="pg_catalog.namege", ServerSideOnly=true)]
		public static bool? Namege(string par4398, string par4399)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namegetext

		[Sql.Function(Name="pg_catalog.namegetext", ServerSideOnly=true)]
		public static bool? Namegetext(string par4401, string par4402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namegt

		[Sql.Function(Name="pg_catalog.namegt", ServerSideOnly=true)]
		public static bool? Namegt(string par4404, string par4405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namegttext

		[Sql.Function(Name="pg_catalog.namegttext", ServerSideOnly=true)]
		public static bool? Namegttext(string par4407, string par4408)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameiclike

		[Sql.Function(Name="pg_catalog.nameiclike", ServerSideOnly=true)]
		public static bool? Nameiclike(string par4410, string par4411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicnlike

		[Sql.Function(Name="pg_catalog.nameicnlike", ServerSideOnly=true)]
		public static bool? Nameicnlike(string par4413, string par4414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicregexeq

		[Sql.Function(Name="pg_catalog.nameicregexeq", ServerSideOnly=true)]
		public static bool? Nameicregexeq(string par4416, string par4417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicregexne

		[Sql.Function(Name="pg_catalog.nameicregexne", ServerSideOnly=true)]
		public static bool? Nameicregexne(string par4419, string par4420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namein

		[Sql.Function(Name="pg_catalog.namein", ServerSideOnly=true)]
		public static string Namein(object par4422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namele

		[Sql.Function(Name="pg_catalog.namele", ServerSideOnly=true)]
		public static bool? Namele(string par4424, string par4425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameletext

		[Sql.Function(Name="pg_catalog.nameletext", ServerSideOnly=true)]
		public static bool? Nameletext(string par4427, string par4428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelike

		[Sql.Function(Name="pg_catalog.namelike", ServerSideOnly=true)]
		public static bool? Namelike(string par4430, string par4431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelt

		[Sql.Function(Name="pg_catalog.namelt", ServerSideOnly=true)]
		public static bool? Namelt(string par4433, string par4434)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelttext

		[Sql.Function(Name="pg_catalog.namelttext", ServerSideOnly=true)]
		public static bool? Namelttext(string par4436, string par4437)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namene

		[Sql.Function(Name="pg_catalog.namene", ServerSideOnly=true)]
		public static bool? Namene(string par4439, string par4440)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namenetext

		[Sql.Function(Name="pg_catalog.namenetext", ServerSideOnly=true)]
		public static bool? Namenetext(string par4442, string par4443)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namenlike

		[Sql.Function(Name="pg_catalog.namenlike", ServerSideOnly=true)]
		public static bool? Namenlike(string par4445, string par4446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameout

		[Sql.Function(Name="pg_catalog.nameout", ServerSideOnly=true)]
		public static object Nameout(string par4448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namerecv

		[Sql.Function(Name="pg_catalog.namerecv", ServerSideOnly=true)]
		public static string Namerecv(object par4450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameregexeq

		[Sql.Function(Name="pg_catalog.nameregexeq", ServerSideOnly=true)]
		public static bool? Nameregexeq(string par4452, string par4453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameregexne

		[Sql.Function(Name="pg_catalog.nameregexne", ServerSideOnly=true)]
		public static bool? Nameregexne(string par4455, string par4456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namesend

		[Sql.Function(Name="pg_catalog.namesend", ServerSideOnly=true)]
		public static byte[] Namesend(string par4458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Neqjoinsel

		[Sql.Function(Name="pg_catalog.neqjoinsel", ServerSideOnly=true)]
		public static double? Neqjoinsel(object par4460, int? par4461, object par4462, short? par4463, object par4464)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Neqsel

		[Sql.Function(Name="pg_catalog.neqsel", ServerSideOnly=true)]
		public static double? Neqsel(object par4466, int? par4467, object par4468, int? par4469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Netmask

		[Sql.Function(Name="pg_catalog.netmask", ServerSideOnly=true)]
		public static NpgsqlInet? Netmask(NpgsqlInet? par4471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Network

		[Sql.Function(Name="pg_catalog.network", ServerSideOnly=true)]
		public static NpgsqlInet? Network(NpgsqlInet? par4473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkCmp

		[Sql.Function(Name="pg_catalog.network_cmp", ServerSideOnly=true)]
		public static int? NetworkCmp(NpgsqlInet? par4475, NpgsqlInet? par4476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkEq

		[Sql.Function(Name="pg_catalog.network_eq", ServerSideOnly=true)]
		public static bool? NetworkEq(NpgsqlInet? par4478, NpgsqlInet? par4479)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkGe

		[Sql.Function(Name="pg_catalog.network_ge", ServerSideOnly=true)]
		public static bool? NetworkGe(NpgsqlInet? par4481, NpgsqlInet? par4482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkGt

		[Sql.Function(Name="pg_catalog.network_gt", ServerSideOnly=true)]
		public static bool? NetworkGt(NpgsqlInet? par4484, NpgsqlInet? par4485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLarger

		[Sql.Function(Name="pg_catalog.network_larger", ServerSideOnly=true)]
		public static NpgsqlInet? NetworkLarger(NpgsqlInet? par4487, NpgsqlInet? par4488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLe

		[Sql.Function(Name="pg_catalog.network_le", ServerSideOnly=true)]
		public static bool? NetworkLe(NpgsqlInet? par4490, NpgsqlInet? par4491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLt

		[Sql.Function(Name="pg_catalog.network_lt", ServerSideOnly=true)]
		public static bool? NetworkLt(NpgsqlInet? par4493, NpgsqlInet? par4494)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkNe

		[Sql.Function(Name="pg_catalog.network_ne", ServerSideOnly=true)]
		public static bool? NetworkNe(NpgsqlInet? par4496, NpgsqlInet? par4497)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkOverlap

		[Sql.Function(Name="pg_catalog.network_overlap", ServerSideOnly=true)]
		public static bool? NetworkOverlap(NpgsqlInet? par4499, NpgsqlInet? par4500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSmaller

		[Sql.Function(Name="pg_catalog.network_smaller", ServerSideOnly=true)]
		public static NpgsqlInet? NetworkSmaller(NpgsqlInet? par4502, NpgsqlInet? par4503)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSub

		[Sql.Function(Name="pg_catalog.network_sub", ServerSideOnly=true)]
		public static bool? NetworkSub(NpgsqlInet? par4505, NpgsqlInet? par4506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSubeq

		[Sql.Function(Name="pg_catalog.network_subeq", ServerSideOnly=true)]
		public static bool? NetworkSubeq(NpgsqlInet? par4508, NpgsqlInet? par4509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSubsetSupport

		[Sql.Function(Name="pg_catalog.network_subset_support", ServerSideOnly=true)]
		public static object NetworkSubsetSupport(object par4511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSup

		[Sql.Function(Name="pg_catalog.network_sup", ServerSideOnly=true)]
		public static bool? NetworkSup(NpgsqlInet? par4513, NpgsqlInet? par4514)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSupeq

		[Sql.Function(Name="pg_catalog.network_supeq", ServerSideOnly=true)]
		public static bool? NetworkSupeq(NpgsqlInet? par4516, NpgsqlInet? par4517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Networkjoinsel

		[Sql.Function(Name="pg_catalog.networkjoinsel", ServerSideOnly=true)]
		public static double? Networkjoinsel(object par4519, int? par4520, object par4521, short? par4522, object par4523)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Networksel

		[Sql.Function(Name="pg_catalog.networksel", ServerSideOnly=true)]
		public static double? Networksel(object par4525, int? par4526, object par4527, int? par4528)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nextval

		[Sql.Function(Name="pg_catalog.nextval", ServerSideOnly=true)]
		public static long? Nextval(object par4530)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nlikejoinsel

		[Sql.Function(Name="pg_catalog.nlikejoinsel", ServerSideOnly=true)]
		public static double? Nlikejoinsel(object par4532, int? par4533, object par4534, short? par4535, object par4536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nlikesel

		[Sql.Function(Name="pg_catalog.nlikesel", ServerSideOnly=true)]
		public static double? Nlikesel(object par4538, int? par4539, object par4540, int? par4541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Notlike

		[Sql.Function(Name="pg_catalog.notlike", ServerSideOnly=true)]
		public static bool? Notlike(byte[] par4549, byte[] par4550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Now

		[Sql.Function(Name="pg_catalog.now", ServerSideOnly=true)]
		public static DateTimeOffset? Now()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Npoints

		[Sql.Function(Name="pg_catalog.npoints", ServerSideOnly=true)]
		public static int? Npoints(NpgsqlPolygon? par4555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NthValue

		[Sql.Function(Name="pg_catalog.nth_value", ServerSideOnly=true)]
		public static object NthValue(object par4557, int? par4558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ntile

		[Sql.Function(Name="pg_catalog.ntile", ServerSideOnly=true)]
		public static int? Ntile(int? par4560)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumNonnulls

		[Sql.Function(Name="pg_catalog.num_nonnulls", ServerSideOnly=true)]
		public static int? NumNonnulls(object par4562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumNulls

		[Sql.Function(Name="pg_catalog.num_nulls", ServerSideOnly=true)]
		public static int? NumNulls(object par4564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numeric

		[Sql.Function(Name="pg_catalog.numeric", ServerSideOnly=true)]
		public static decimal? Numeric(decimal? par4581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAbs

		[Sql.Function(Name="pg_catalog.numeric_abs", ServerSideOnly=true)]
		public static decimal? NumericAbs(decimal? par4583)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAccum

		[Sql.Function(Name="pg_catalog.numeric_accum", ServerSideOnly=true)]
		public static object NumericAccum(object par4585, decimal? par4586)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAccumInv

		[Sql.Function(Name="pg_catalog.numeric_accum_inv", ServerSideOnly=true)]
		public static object NumericAccumInv(object par4588, decimal? par4589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAdd

		[Sql.Function(Name="pg_catalog.numeric_add", ServerSideOnly=true)]
		public static decimal? NumericAdd(decimal? par4591, decimal? par4592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvg

		[Sql.Function(Name="pg_catalog.numeric_avg", ServerSideOnly=true)]
		public static decimal? NumericAvg(object par4594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgAccum

		[Sql.Function(Name="pg_catalog.numeric_avg_accum", ServerSideOnly=true)]
		public static object NumericAvgAccum(object par4596, decimal? par4597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgCombine

		[Sql.Function(Name="pg_catalog.numeric_avg_combine", ServerSideOnly=true)]
		public static object NumericAvgCombine(object par4599, object par4600)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgDeserialize

		[Sql.Function(Name="pg_catalog.numeric_avg_deserialize", ServerSideOnly=true)]
		public static object NumericAvgDeserialize(byte[] par4602, object par4603)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgSerialize

		[Sql.Function(Name="pg_catalog.numeric_avg_serialize", ServerSideOnly=true)]
		public static byte[] NumericAvgSerialize(object par4605)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericCmp

		[Sql.Function(Name="pg_catalog.numeric_cmp", ServerSideOnly=true)]
		public static int? NumericCmp(decimal? par4607, decimal? par4608)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericCombine

		[Sql.Function(Name="pg_catalog.numeric_combine", ServerSideOnly=true)]
		public static object NumericCombine(object par4610, object par4611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDeserialize

		[Sql.Function(Name="pg_catalog.numeric_deserialize", ServerSideOnly=true)]
		public static object NumericDeserialize(byte[] par4613, object par4614)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDiv

		[Sql.Function(Name="pg_catalog.numeric_div", ServerSideOnly=true)]
		public static decimal? NumericDiv(decimal? par4616, decimal? par4617)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDivTrunc

		[Sql.Function(Name="pg_catalog.numeric_div_trunc", ServerSideOnly=true)]
		public static decimal? NumericDivTrunc(decimal? par4619, decimal? par4620)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericEq

		[Sql.Function(Name="pg_catalog.numeric_eq", ServerSideOnly=true)]
		public static bool? NumericEq(decimal? par4622, decimal? par4623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericExp

		[Sql.Function(Name="pg_catalog.numeric_exp", ServerSideOnly=true)]
		public static decimal? NumericExp(decimal? par4625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericFac

		[Sql.Function(Name="pg_catalog.numeric_fac", ServerSideOnly=true)]
		public static decimal? NumericFac(long? par4627)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericGe

		[Sql.Function(Name="pg_catalog.numeric_ge", ServerSideOnly=true)]
		public static bool? NumericGe(decimal? par4629, decimal? par4630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericGt

		[Sql.Function(Name="pg_catalog.numeric_gt", ServerSideOnly=true)]
		public static bool? NumericGt(decimal? par4632, decimal? par4633)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericIn

		[Sql.Function(Name="pg_catalog.numeric_in", ServerSideOnly=true)]
		public static decimal? NumericIn(object par4635, int? par4636, int? par4637)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericInc

		[Sql.Function(Name="pg_catalog.numeric_inc", ServerSideOnly=true)]
		public static decimal? NumericInc(decimal? par4639)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLarger

		[Sql.Function(Name="pg_catalog.numeric_larger", ServerSideOnly=true)]
		public static decimal? NumericLarger(decimal? par4641, decimal? par4642)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLe

		[Sql.Function(Name="pg_catalog.numeric_le", ServerSideOnly=true)]
		public static bool? NumericLe(decimal? par4644, decimal? par4645)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLn

		[Sql.Function(Name="pg_catalog.numeric_ln", ServerSideOnly=true)]
		public static decimal? NumericLn(decimal? par4647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLog

		[Sql.Function(Name="pg_catalog.numeric_log", ServerSideOnly=true)]
		public static decimal? NumericLog(decimal? par4649, decimal? par4650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLt

		[Sql.Function(Name="pg_catalog.numeric_lt", ServerSideOnly=true)]
		public static bool? NumericLt(decimal? par4652, decimal? par4653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericMod

		[Sql.Function(Name="pg_catalog.numeric_mod", ServerSideOnly=true)]
		public static decimal? NumericMod(decimal? par4655, decimal? par4656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericMul

		[Sql.Function(Name="pg_catalog.numeric_mul", ServerSideOnly=true)]
		public static decimal? NumericMul(decimal? par4658, decimal? par4659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericNe

		[Sql.Function(Name="pg_catalog.numeric_ne", ServerSideOnly=true)]
		public static bool? NumericNe(decimal? par4661, decimal? par4662)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericOut

		[Sql.Function(Name="pg_catalog.numeric_out", ServerSideOnly=true)]
		public static object NumericOut(decimal? par4664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyAvg

		[Sql.Function(Name="pg_catalog.numeric_poly_avg", ServerSideOnly=true)]
		public static decimal? NumericPolyAvg(object par4666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyCombine

		[Sql.Function(Name="pg_catalog.numeric_poly_combine", ServerSideOnly=true)]
		public static object NumericPolyCombine(object par4668, object par4669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyDeserialize

		[Sql.Function(Name="pg_catalog.numeric_poly_deserialize", ServerSideOnly=true)]
		public static object NumericPolyDeserialize(byte[] par4671, object par4672)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolySerialize

		[Sql.Function(Name="pg_catalog.numeric_poly_serialize", ServerSideOnly=true)]
		public static byte[] NumericPolySerialize(object par4674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyStddevPop

		[Sql.Function(Name="pg_catalog.numeric_poly_stddev_pop", ServerSideOnly=true)]
		public static decimal? NumericPolyStddevPop(object par4676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyStddevSamp

		[Sql.Function(Name="pg_catalog.numeric_poly_stddev_samp", ServerSideOnly=true)]
		public static decimal? NumericPolyStddevSamp(object par4678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolySum

		[Sql.Function(Name="pg_catalog.numeric_poly_sum", ServerSideOnly=true)]
		public static decimal? NumericPolySum(object par4680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyVarPop

		[Sql.Function(Name="pg_catalog.numeric_poly_var_pop", ServerSideOnly=true)]
		public static decimal? NumericPolyVarPop(object par4682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyVarSamp

		[Sql.Function(Name="pg_catalog.numeric_poly_var_samp", ServerSideOnly=true)]
		public static decimal? NumericPolyVarSamp(object par4684)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPower

		[Sql.Function(Name="pg_catalog.numeric_power", ServerSideOnly=true)]
		public static decimal? NumericPower(decimal? par4686, decimal? par4687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericRecv

		[Sql.Function(Name="pg_catalog.numeric_recv", ServerSideOnly=true)]
		public static decimal? NumericRecv(object par4689, int? par4690, int? par4691)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSend

		[Sql.Function(Name="pg_catalog.numeric_send", ServerSideOnly=true)]
		public static byte[] NumericSend(decimal? par4693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSerialize

		[Sql.Function(Name="pg_catalog.numeric_serialize", ServerSideOnly=true)]
		public static byte[] NumericSerialize(object par4695)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSmaller

		[Sql.Function(Name="pg_catalog.numeric_smaller", ServerSideOnly=true)]
		public static decimal? NumericSmaller(decimal? par4697, decimal? par4698)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSortsupport

		[Sql.Function(Name="pg_catalog.numeric_sortsupport", ServerSideOnly=true)]
		public static object NumericSortsupport(object par4699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSqrt

		[Sql.Function(Name="pg_catalog.numeric_sqrt", ServerSideOnly=true)]
		public static decimal? NumericSqrt(decimal? par4701)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericStddevPop

		[Sql.Function(Name="pg_catalog.numeric_stddev_pop", ServerSideOnly=true)]
		public static decimal? NumericStddevPop(object par4703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericStddevSamp

		[Sql.Function(Name="pg_catalog.numeric_stddev_samp", ServerSideOnly=true)]
		public static decimal? NumericStddevSamp(object par4705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSub

		[Sql.Function(Name="pg_catalog.numeric_sub", ServerSideOnly=true)]
		public static decimal? NumericSub(decimal? par4707, decimal? par4708)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSum

		[Sql.Function(Name="pg_catalog.numeric_sum", ServerSideOnly=true)]
		public static decimal? NumericSum(object par4710)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSupport

		[Sql.Function(Name="pg_catalog.numeric_support", ServerSideOnly=true)]
		public static object NumericSupport(object par4712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericUminus

		[Sql.Function(Name="pg_catalog.numeric_uminus", ServerSideOnly=true)]
		public static decimal? NumericUminus(decimal? par4714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericUplus

		[Sql.Function(Name="pg_catalog.numeric_uplus", ServerSideOnly=true)]
		public static decimal? NumericUplus(decimal? par4716)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericVarPop

		[Sql.Function(Name="pg_catalog.numeric_var_pop", ServerSideOnly=true)]
		public static decimal? NumericVarPop(object par4718)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericVarSamp

		[Sql.Function(Name="pg_catalog.numeric_var_samp", ServerSideOnly=true)]
		public static decimal? NumericVarSamp(object par4720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numerictypmodin

		[Sql.Function(Name="pg_catalog.numerictypmodin", ServerSideOnly=true)]
		public static int? Numerictypmodin(object par4722)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numerictypmodout

		[Sql.Function(Name="pg_catalog.numerictypmodout", ServerSideOnly=true)]
		public static object Numerictypmodout(int? par4724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numnode

		[Sql.Function(Name="pg_catalog.numnode", ServerSideOnly=true)]
		public static int? Numnode(object par4726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numrange

		[Sql.Function(Name="pg_catalog.numrange", ServerSideOnly=true)]
		public static object Numrange(decimal? par4731, decimal? par4732, string par4733)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumrangeSubdiff

		[Sql.Function(Name="pg_catalog.numrange_subdiff", ServerSideOnly=true)]
		public static double? NumrangeSubdiff(decimal? par4735, decimal? par4736)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ObjDescription

		[Sql.Function(Name="pg_catalog.obj_description", ServerSideOnly=true)]
		public static string ObjDescription(int? par4741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OctetLength

		[Sql.Function(Name="pg_catalog.octet_length", ServerSideOnly=true)]
		public static int? OctetLength(byte[] par4749)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oid

		[Sql.Function(Name="pg_catalog.oid", ServerSideOnly=true)]
		public static int? Oid(long? par4751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oideq

		[Sql.Function(Name="pg_catalog.oideq", ServerSideOnly=true)]
		public static bool? Oideq(int? par4753, int? par4754)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidge

		[Sql.Function(Name="pg_catalog.oidge", ServerSideOnly=true)]
		public static bool? Oidge(int? par4756, int? par4757)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidgt

		[Sql.Function(Name="pg_catalog.oidgt", ServerSideOnly=true)]
		public static bool? Oidgt(int? par4759, int? par4760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidin

		[Sql.Function(Name="pg_catalog.oidin", ServerSideOnly=true)]
		public static int? Oidin(object par4762)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidlarger

		[Sql.Function(Name="pg_catalog.oidlarger", ServerSideOnly=true)]
		public static int? Oidlarger(int? par4764, int? par4765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidle

		[Sql.Function(Name="pg_catalog.oidle", ServerSideOnly=true)]
		public static bool? Oidle(int? par4767, int? par4768)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidlt

		[Sql.Function(Name="pg_catalog.oidlt", ServerSideOnly=true)]
		public static bool? Oidlt(int? par4770, int? par4771)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidne

		[Sql.Function(Name="pg_catalog.oidne", ServerSideOnly=true)]
		public static bool? Oidne(int? par4773, int? par4774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidout

		[Sql.Function(Name="pg_catalog.oidout", ServerSideOnly=true)]
		public static object Oidout(int? par4776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidrecv

		[Sql.Function(Name="pg_catalog.oidrecv", ServerSideOnly=true)]
		public static int? Oidrecv(object par4778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidsend

		[Sql.Function(Name="pg_catalog.oidsend", ServerSideOnly=true)]
		public static byte[] Oidsend(int? par4780)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidsmaller

		[Sql.Function(Name="pg_catalog.oidsmaller", ServerSideOnly=true)]
		public static int? Oidsmaller(int? par4782, int? par4783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectoreq

		[Sql.Function(Name="pg_catalog.oidvectoreq", ServerSideOnly=true)]
		public static bool? Oidvectoreq(object par4785, object par4786)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorge

		[Sql.Function(Name="pg_catalog.oidvectorge", ServerSideOnly=true)]
		public static bool? Oidvectorge(object par4788, object par4789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorgt

		[Sql.Function(Name="pg_catalog.oidvectorgt", ServerSideOnly=true)]
		public static bool? Oidvectorgt(object par4791, object par4792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorin

		[Sql.Function(Name="pg_catalog.oidvectorin", ServerSideOnly=true)]
		public static object Oidvectorin(object par4794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorle

		[Sql.Function(Name="pg_catalog.oidvectorle", ServerSideOnly=true)]
		public static bool? Oidvectorle(object par4796, object par4797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorlt

		[Sql.Function(Name="pg_catalog.oidvectorlt", ServerSideOnly=true)]
		public static bool? Oidvectorlt(object par4799, object par4800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorne

		[Sql.Function(Name="pg_catalog.oidvectorne", ServerSideOnly=true)]
		public static bool? Oidvectorne(object par4802, object par4803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorout

		[Sql.Function(Name="pg_catalog.oidvectorout", ServerSideOnly=true)]
		public static object Oidvectorout(object par4805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorrecv

		[Sql.Function(Name="pg_catalog.oidvectorrecv", ServerSideOnly=true)]
		public static object Oidvectorrecv(object par4807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorsend

		[Sql.Function(Name="pg_catalog.oidvectorsend", ServerSideOnly=true)]
		public static byte[] Oidvectorsend(object par4809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectortypes

		[Sql.Function(Name="pg_catalog.oidvectortypes", ServerSideOnly=true)]
		public static string Oidvectortypes(object par4811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPb

		[Sql.Function(Name="pg_catalog.on_pb", ServerSideOnly=true)]
		public static bool? OnPb(NpgsqlPoint? par4813, NpgsqlBox? par4814)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPl

		[Sql.Function(Name="pg_catalog.on_pl", ServerSideOnly=true)]
		public static bool? OnPl(NpgsqlPoint? par4816, NpgsqlLine? par4817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPpath

		[Sql.Function(Name="pg_catalog.on_ppath", ServerSideOnly=true)]
		public static bool? OnPpath(NpgsqlPoint? par4819, NpgsqlPath? par4820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPs

		[Sql.Function(Name="pg_catalog.on_ps", ServerSideOnly=true)]
		public static bool? OnPs(NpgsqlPoint? par4822, NpgsqlLSeg? par4823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnSb

		[Sql.Function(Name="pg_catalog.on_sb", ServerSideOnly=true)]
		public static bool? OnSb(NpgsqlLSeg? par4825, NpgsqlBox? par4826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnSl

		[Sql.Function(Name="pg_catalog.on_sl", ServerSideOnly=true)]
		public static bool? OnSl(NpgsqlLSeg? par4828, NpgsqlLine? par4829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OpaqueIn

		[Sql.Function(Name="pg_catalog.opaque_in", ServerSideOnly=true)]
		public static object OpaqueIn(object par4831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OpaqueOut

		[Sql.Function(Name="pg_catalog.opaque_out", ServerSideOnly=true)]
		public static object OpaqueOut(object par4833)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OrderedSetTransition

		[Sql.Function(Name="pg_catalog.ordered_set_transition", ServerSideOnly=true)]
		public static object OrderedSetTransition(object par4835, object par4836)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OrderedSetTransitionMulti

		[Sql.Function(Name="pg_catalog.ordered_set_transition_multi", ServerSideOnly=true)]
		public static object OrderedSetTransitionMulti(object par4838, object par4839)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overlaps

		[Sql.Function(Name="pg_catalog.overlaps", ServerSideOnly=true)]
		public static bool? Overlaps(DateTime? par4901, NpgsqlTimeSpan? par4902, DateTime? par4903, DateTime? par4904)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overlay

		[Sql.Function(Name="pg_catalog.overlay", ServerSideOnly=true)]
		public static byte[] Overlay(byte[] par4929, byte[] par4930, int? par4931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ParseIdent

		[Sql.Function(Name="pg_catalog.parse_ident", ServerSideOnly=true)]
		public static object ParseIdent(string str, bool? strict)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Path

		[Sql.Function(Name="pg_catalog.path", ServerSideOnly=true)]
		public static NpgsqlPath? Path(NpgsqlPolygon? par4934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathAdd

		[Sql.Function(Name="pg_catalog.path_add", ServerSideOnly=true)]
		public static NpgsqlPath? PathAdd(NpgsqlPath? par4936, NpgsqlPath? par4937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathAddPt

		[Sql.Function(Name="pg_catalog.path_add_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathAddPt(NpgsqlPath? par4939, NpgsqlPoint? par4940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathCenter

		[Sql.Function(Name="pg_catalog.path_center", ServerSideOnly=true)]
		public static NpgsqlPoint? PathCenter(NpgsqlPath? par4942)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathContainPt

		[Sql.Function(Name="pg_catalog.path_contain_pt", ServerSideOnly=true)]
		public static bool? PathContainPt(NpgsqlPath? par4944, NpgsqlPoint? par4945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathDistance

		[Sql.Function(Name="pg_catalog.path_distance", ServerSideOnly=true)]
		public static double? PathDistance(NpgsqlPath? par4947, NpgsqlPath? par4948)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathDivPt

		[Sql.Function(Name="pg_catalog.path_div_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathDivPt(NpgsqlPath? par4950, NpgsqlPoint? par4951)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathIn

		[Sql.Function(Name="pg_catalog.path_in", ServerSideOnly=true)]
		public static NpgsqlPath? PathIn(object par4953)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathInter

		[Sql.Function(Name="pg_catalog.path_inter", ServerSideOnly=true)]
		public static bool? PathInter(NpgsqlPath? par4955, NpgsqlPath? par4956)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathLength

		[Sql.Function(Name="pg_catalog.path_length", ServerSideOnly=true)]
		public static double? PathLength(NpgsqlPath? par4958)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathMulPt

		[Sql.Function(Name="pg_catalog.path_mul_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathMulPt(NpgsqlPath? par4960, NpgsqlPoint? par4961)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNEq

		[Sql.Function(Name="pg_catalog.path_n_eq", ServerSideOnly=true)]
		public static bool? PathNEq(NpgsqlPath? par4963, NpgsqlPath? par4964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNGe

		[Sql.Function(Name="pg_catalog.path_n_ge", ServerSideOnly=true)]
		public static bool? PathNGe(NpgsqlPath? par4966, NpgsqlPath? par4967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNGt

		[Sql.Function(Name="pg_catalog.path_n_gt", ServerSideOnly=true)]
		public static bool? PathNGt(NpgsqlPath? par4969, NpgsqlPath? par4970)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNLe

		[Sql.Function(Name="pg_catalog.path_n_le", ServerSideOnly=true)]
		public static bool? PathNLe(NpgsqlPath? par4972, NpgsqlPath? par4973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNLt

		[Sql.Function(Name="pg_catalog.path_n_lt", ServerSideOnly=true)]
		public static bool? PathNLt(NpgsqlPath? par4975, NpgsqlPath? par4976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNpoints

		[Sql.Function(Name="pg_catalog.path_npoints", ServerSideOnly=true)]
		public static int? PathNpoints(NpgsqlPath? par4978)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathOut

		[Sql.Function(Name="pg_catalog.path_out", ServerSideOnly=true)]
		public static object PathOut(NpgsqlPath? par4980)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathRecv

		[Sql.Function(Name="pg_catalog.path_recv", ServerSideOnly=true)]
		public static NpgsqlPath? PathRecv(object par4982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathSend

		[Sql.Function(Name="pg_catalog.path_send", ServerSideOnly=true)]
		public static byte[] PathSend(NpgsqlPath? par4984)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathSubPt

		[Sql.Function(Name="pg_catalog.path_sub_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathSubPt(NpgsqlPath? par4986, NpgsqlPoint? par4987)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pclose

		[Sql.Function(Name="pg_catalog.pclose", ServerSideOnly=true)]
		public static NpgsqlPath? Pclose(NpgsqlPath? par4989)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentRank

		[Sql.Function(Name="pg_catalog.percent_rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? PercentRank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par4992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentRankFinal

		[Sql.Function(Name="pg_catalog.percent_rank_final", ServerSideOnly=true)]
		public static double? PercentRankFinal(object par4994, object par4995)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileCont

		[Sql.Function(Name="pg_catalog.percentile_cont", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static object PercentileCont<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par5006, Expression<Func<TSource, NpgsqlTimeSpan?>> par5007)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContFloat8Final

		[Sql.Function(Name="pg_catalog.percentile_cont_float8_final", ServerSideOnly=true)]
		public static double? PercentileContFloat8Final(object par5009, double? par5010)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContFloat8MultiFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_float8_multi_final", ServerSideOnly=true)]
		public static object PercentileContFloat8MultiFinal(object par5012, object par5013)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContIntervalFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_interval_final", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? PercentileContIntervalFinal(object par5015, double? par5016)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContIntervalMultiFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_interval_multi_final", ServerSideOnly=true)]
		public static object PercentileContIntervalMultiFinal(object par5018, object par5019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDisc

		[Sql.Function(Name="pg_catalog.percentile_disc", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static object PercentileDisc<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par5024, Expression<Func<TSource, object>> par5025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDiscFinal

		[Sql.Function(Name="pg_catalog.percentile_disc_final", ServerSideOnly=true)]
		public static object PercentileDiscFinal(object par5027, double? par5028, object par5029)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDiscMultiFinal

		[Sql.Function(Name="pg_catalog.percentile_disc_multi_final", ServerSideOnly=true)]
		public static object PercentileDiscMultiFinal(object par5031, object par5032, object par5033)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryLock

		[Sql.Function(Name="pg_catalog.pg_advisory_lock", ServerSideOnly=true)]
		public static object PgAdvisoryLock(int? par5035, int? par5036)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryLockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_lock_shared", ServerSideOnly=true)]
		public static object PgAdvisoryLockShared(int? par5038, int? par5039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlock

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock", ServerSideOnly=true)]
		public static bool? PgAdvisoryUnlock(int? par5043, int? par5044)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlockAll

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock_all", ServerSideOnly=true)]
		public static object PgAdvisoryUnlockAll()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock_shared", ServerSideOnly=true)]
		public static bool? PgAdvisoryUnlockShared(int? par5048, int? par5049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryXactLock

		[Sql.Function(Name="pg_catalog.pg_advisory_xact_lock", ServerSideOnly=true)]
		public static object PgAdvisoryXactLock(int? par5051, int? par5052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryXactLockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_xact_lock_shared", ServerSideOnly=true)]
		public static object PgAdvisoryXactLockShared(int? par5054, int? par5055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBackendPid

		[Sql.Function(Name="pg_catalog.pg_backend_pid", ServerSideOnly=true)]
		public static int? PgBackendPid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBackupStartTime

		[Sql.Function(Name="pg_catalog.pg_backup_start_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgBackupStartTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBlockingPids

		[Sql.Function(Name="pg_catalog.pg_blocking_pids", ServerSideOnly=true)]
		public static object PgBlockingPids(int? par5059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCancelBackend

		[Sql.Function(Name="pg_catalog.pg_cancel_backend", ServerSideOnly=true)]
		public static bool? PgCancelBackend(int? par5061)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharToEncoding

		[Sql.Function(Name="pg_catalog.pg_char_to_encoding", ServerSideOnly=true)]
		public static int? PgCharToEncoding(string par5063)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgClientEncoding

		[Sql.Function(Name="pg_catalog.pg_client_encoding", ServerSideOnly=true)]
		public static string PgClientEncoding()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationActualVersion

		[Sql.Function(Name="pg_catalog.pg_collation_actual_version", ServerSideOnly=true)]
		public static string PgCollationActualVersion(int? par5066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationFor

		[Sql.Function(Name="pg_catalog.pg_collation_for", ServerSideOnly=true)]
		public static string PgCollationFor(object par5068)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationIsVisible

		[Sql.Function(Name="pg_catalog.pg_collation_is_visible", ServerSideOnly=true)]
		public static bool? PgCollationIsVisible(int? par5070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgColumnIsUpdatable

		[Sql.Function(Name="pg_catalog.pg_column_is_updatable", ServerSideOnly=true)]
		public static bool? PgColumnIsUpdatable(object par5072, short? par5073, bool? par5074)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgColumnSize

		[Sql.Function(Name="pg_catalog.pg_column_size", ServerSideOnly=true)]
		public static int? PgColumnSize(object par5076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgConfLoadTime

		[Sql.Function(Name="pg_catalog.pg_conf_load_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgConfLoadTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlCheckpoint

		[Sql.Function(Name="pg_catalog.pg_control_checkpoint", ServerSideOnly=true)]
		public static pg_control_checkpointResult PgControlCheckpoint()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlInit

		[Sql.Function(Name="pg_catalog.pg_control_init", ServerSideOnly=true)]
		public static pg_control_initResult PgControlInit()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlRecovery

		[Sql.Function(Name="pg_catalog.pg_control_recovery", ServerSideOnly=true)]
		public static pg_control_recoveryResult PgControlRecovery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlSystem

		[Sql.Function(Name="pg_catalog.pg_control_system", ServerSideOnly=true)]
		public static pg_control_systemResult PgControlSystem()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgConversionIsVisible

		[Sql.Function(Name="pg_catalog.pg_conversion_is_visible", ServerSideOnly=true)]
		public static bool? PgConversionIsVisible(int? par5079)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCopyLogicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_copy_logical_replication_slot", ServerSideOnly=true)]
		public static pg_copy_logical_replication_slotResult PgCopyLogicalReplicationSlot(string src_slot_name, string dst_slot_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCopyPhysicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_copy_physical_replication_slot", ServerSideOnly=true)]
		public static pg_copy_physical_replication_slotResult PgCopyPhysicalReplicationSlot(string src_slot_name, string dst_slot_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreateLogicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_create_logical_replication_slot", ServerSideOnly=true)]
		public static pg_create_logical_replication_slotResult PgCreateLogicalReplicationSlot(string slot_name, string plugin, bool? temporary)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreatePhysicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_create_physical_replication_slot", ServerSideOnly=true)]
		public static pg_create_physical_replication_slotResult PgCreatePhysicalReplicationSlot(string slot_name, bool? immediately_reserve, bool? temporary)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreateRestorePoint

		[Sql.Function(Name="pg_catalog.pg_create_restore_point", ServerSideOnly=true)]
		public static object PgCreateRestorePoint(string par5081)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentLogfile

		[Sql.Function(Name="pg_catalog.pg_current_logfile", ServerSideOnly=true)]
		public static string PgCurrentLogfile(string par5084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentWalFlushLsn

		[Sql.Function(Name="pg_catalog.pg_current_wal_flush_lsn", ServerSideOnly=true)]
		public static object PgCurrentWalFlushLsn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentWalInsertLsn

		[Sql.Function(Name="pg_catalog.pg_current_wal_insert_lsn", ServerSideOnly=true)]
		public static object PgCurrentWalInsertLsn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentWalLsn

		[Sql.Function(Name="pg_catalog.pg_current_wal_lsn", ServerSideOnly=true)]
		public static object PgCurrentWalLsn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDatabaseSize

		[Sql.Function(Name="pg_catalog.pg_database_size", ServerSideOnly=true)]
		public static long? PgDatabaseSize(int? par5091)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandIn

		[Sql.Function(Name="pg_catalog.pg_ddl_command_in", ServerSideOnly=true)]
		public static object PgDdlCommandIn(object par5093)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandOut

		[Sql.Function(Name="pg_catalog.pg_ddl_command_out", ServerSideOnly=true)]
		public static object PgDdlCommandOut(object par5095)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandRecv

		[Sql.Function(Name="pg_catalog.pg_ddl_command_recv", ServerSideOnly=true)]
		public static object PgDdlCommandRecv(object par5097)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandSend

		[Sql.Function(Name="pg_catalog.pg_ddl_command_send", ServerSideOnly=true)]
		public static byte[] PgDdlCommandSend(object par5099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDependenciesIn

		[Sql.Function(Name="pg_catalog.pg_dependencies_in", ServerSideOnly=true)]
		public static object PgDependenciesIn(object par5101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDependenciesOut

		[Sql.Function(Name="pg_catalog.pg_dependencies_out", ServerSideOnly=true)]
		public static object PgDependenciesOut(object par5103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDependenciesRecv

		[Sql.Function(Name="pg_catalog.pg_dependencies_recv", ServerSideOnly=true)]
		public static object PgDependenciesRecv(object par5105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDependenciesSend

		[Sql.Function(Name="pg_catalog.pg_dependencies_send", ServerSideOnly=true)]
		public static byte[] PgDependenciesSend(object par5107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDescribeObject

		[Sql.Function(Name="pg_catalog.pg_describe_object", ServerSideOnly=true)]
		public static string PgDescribeObject(int? par5109, int? par5110, int? par5111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDropReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_drop_replication_slot", ServerSideOnly=true)]
		public static object PgDropReplicationSlot(string par5112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEncodingMaxLength

		[Sql.Function(Name="pg_catalog.pg_encoding_max_length", ServerSideOnly=true)]
		public static int? PgEncodingMaxLength(int? par5114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEncodingToChar

		[Sql.Function(Name="pg_catalog.pg_encoding_to_char", ServerSideOnly=true)]
		public static string PgEncodingToChar(int? par5116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEventTriggerTableRewriteOid

		[Sql.Function(Name="pg_catalog.pg_event_trigger_table_rewrite_oid", ServerSideOnly=true)]
		public static int? PgEventTriggerTableRewriteOid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEventTriggerTableRewriteReason

		[Sql.Function(Name="pg_catalog.pg_event_trigger_table_rewrite_reason", ServerSideOnly=true)]
		public static int? PgEventTriggerTableRewriteReason()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgExportSnapshot

		[Sql.Function(Name="pg_catalog.pg_export_snapshot", ServerSideOnly=true)]
		public static string PgExportSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgExtensionConfigDump

		[Sql.Function(Name="pg_catalog.pg_extension_config_dump", ServerSideOnly=true)]
		public static object PgExtensionConfigDump(object par5119, string par5120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgFilenodeRelation

		[Sql.Function(Name="pg_catalog.pg_filenode_relation", ServerSideOnly=true)]
		public static object PgFilenodeRelation(int? par5122, int? par5123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgFunctionIsVisible

		[Sql.Function(Name="pg_catalog.pg_function_is_visible", ServerSideOnly=true)]
		public static bool? PgFunctionIsVisible(int? par5125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetConstraintdef

		[Sql.Function(Name="pg_catalog.pg_get_constraintdef", ServerSideOnly=true)]
		public static string PgGetConstraintdef(int? par5129, bool? par5130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetExpr

		[Sql.Function(Name="pg_catalog.pg_get_expr", ServerSideOnly=true)]
		public static string PgGetExpr(object par5135, int? par5136, bool? par5137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionArgDefault

		[Sql.Function(Name="pg_catalog.pg_get_function_arg_default", ServerSideOnly=true)]
		public static string PgGetFunctionArgDefault(int? par5139, int? par5140)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionArguments

		[Sql.Function(Name="pg_catalog.pg_get_function_arguments", ServerSideOnly=true)]
		public static string PgGetFunctionArguments(int? par5142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionIdentityArguments

		[Sql.Function(Name="pg_catalog.pg_get_function_identity_arguments", ServerSideOnly=true)]
		public static string PgGetFunctionIdentityArguments(int? par5144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionResult

		[Sql.Function(Name="pg_catalog.pg_get_function_result", ServerSideOnly=true)]
		public static string PgGetFunctionResult(int? par5146)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctiondef

		[Sql.Function(Name="pg_catalog.pg_get_functiondef", ServerSideOnly=true)]
		public static string PgGetFunctiondef(int? par5148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetIndexdef

		[Sql.Function(Name="pg_catalog.pg_get_indexdef", ServerSideOnly=true)]
		public static string PgGetIndexdef(int? par5152, int? par5153, bool? par5154)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetObjectAddress

		[Sql.Function(Name="pg_catalog.pg_get_object_address", ServerSideOnly=true)]
		public static pg_get_object_addressResult PgGetObjectAddress(string type, object object_names, object object_args)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetPartitionConstraintdef

		[Sql.Function(Name="pg_catalog.pg_get_partition_constraintdef", ServerSideOnly=true)]
		public static string PgGetPartitionConstraintdef(int? par5156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetPartkeydef

		[Sql.Function(Name="pg_catalog.pg_get_partkeydef", ServerSideOnly=true)]
		public static string PgGetPartkeydef(int? par5158)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetReplicaIdentityIndex

		[Sql.Function(Name="pg_catalog.pg_get_replica_identity_index", ServerSideOnly=true)]
		public static object PgGetReplicaIdentityIndex(object par5160)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetRuledef

		[Sql.Function(Name="pg_catalog.pg_get_ruledef", ServerSideOnly=true)]
		public static string PgGetRuledef(int? par5164, bool? par5165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetSerialSequence

		[Sql.Function(Name="pg_catalog.pg_get_serial_sequence", ServerSideOnly=true)]
		public static string PgGetSerialSequence(string par5167, string par5168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetStatisticsobjdef

		[Sql.Function(Name="pg_catalog.pg_get_statisticsobjdef", ServerSideOnly=true)]
		public static string PgGetStatisticsobjdef(int? par5170)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetTriggerdef

		[Sql.Function(Name="pg_catalog.pg_get_triggerdef", ServerSideOnly=true)]
		public static string PgGetTriggerdef(int? par5174, bool? par5175)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetUserbyid

		[Sql.Function(Name="pg_catalog.pg_get_userbyid", ServerSideOnly=true)]
		public static string PgGetUserbyid(int? par5177)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetViewdef

		[Sql.Function(Name="pg_catalog.pg_get_viewdef", ServerSideOnly=true)]
		public static string PgGetViewdef(int? par5189, int? par5190)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgHasRole

		[Sql.Function(Name="pg_catalog.pg_has_role", ServerSideOnly=true)]
		public static bool? PgHasRole(int? par5211, string par5212)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIdentifyObject

		[Sql.Function(Name="pg_catalog.pg_identify_object", ServerSideOnly=true)]
		public static pg_identify_objectResult PgIdentifyObject(int? classid, int? objid, int? objsubid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIdentifyObjectAsAddress

		[Sql.Function(Name="pg_catalog.pg_identify_object_as_address", ServerSideOnly=true)]
		public static pg_identify_object_as_addressResult PgIdentifyObjectAsAddress(int? classid, int? objid, int? objsubid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgImportSystemCollations

		[Sql.Function(Name="pg_catalog.pg_import_system_collations", ServerSideOnly=true)]
		public static int? PgImportSystemCollations(object par5214)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexColumnHasProperty

		[Sql.Function(Name="pg_catalog.pg_index_column_has_property", ServerSideOnly=true)]
		public static bool? PgIndexColumnHasProperty(object par5216, int? par5217, string par5218)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexHasProperty

		[Sql.Function(Name="pg_catalog.pg_index_has_property", ServerSideOnly=true)]
		public static bool? PgIndexHasProperty(object par5220, string par5221)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexamHasProperty

		[Sql.Function(Name="pg_catalog.pg_indexam_has_property", ServerSideOnly=true)]
		public static bool? PgIndexamHasProperty(int? par5223, string par5224)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexamProgressPhasename

		[Sql.Function(Name="pg_catalog.pg_indexam_progress_phasename", ServerSideOnly=true)]
		public static string PgIndexamProgressPhasename(int? par5226, long? par5227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexesSize

		[Sql.Function(Name="pg_catalog.pg_indexes_size", ServerSideOnly=true)]
		public static long? PgIndexesSize(object par5229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsInBackup

		[Sql.Function(Name="pg_catalog.pg_is_in_backup", ServerSideOnly=true)]
		public static bool? PgIsInBackup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsInRecovery

		[Sql.Function(Name="pg_catalog.pg_is_in_recovery", ServerSideOnly=true)]
		public static bool? PgIsInRecovery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsOtherTempSchema

		[Sql.Function(Name="pg_catalog.pg_is_other_temp_schema", ServerSideOnly=true)]
		public static bool? PgIsOtherTempSchema(int? par5233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsWalReplayPaused

		[Sql.Function(Name="pg_catalog.pg_is_wal_replay_paused", ServerSideOnly=true)]
		public static bool? PgIsWalReplayPaused()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsolationTestSessionIsBlocked

		[Sql.Function(Name="pg_catalog.pg_isolation_test_session_is_blocked", ServerSideOnly=true)]
		public static bool? PgIsolationTestSessionIsBlocked(int? par5236, object par5237)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgJitAvailable

		[Sql.Function(Name="pg_catalog.pg_jit_available", ServerSideOnly=true)]
		public static bool? PgJitAvailable()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastCommittedXact

		[Sql.Function(Name="pg_catalog.pg_last_committed_xact", ServerSideOnly=true)]
		public static pg_last_committed_xactResult PgLastCommittedXact()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastWalReceiveLsn

		[Sql.Function(Name="pg_catalog.pg_last_wal_receive_lsn", ServerSideOnly=true)]
		public static object PgLastWalReceiveLsn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastWalReplayLsn

		[Sql.Function(Name="pg_catalog.pg_last_wal_replay_lsn", ServerSideOnly=true)]
		public static object PgLastWalReplayLsn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXactReplayTimestamp

		[Sql.Function(Name="pg_catalog.pg_last_xact_replay_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? PgLastXactReplayTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLogicalEmitMessage

		[Sql.Function(Name="pg_catalog.pg_logical_emit_message", ServerSideOnly=true)]
		public static object PgLogicalEmitMessage(bool? par5247, string par5248, byte[] par5249)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnCmp

		[Sql.Function(Name="pg_catalog.pg_lsn_cmp", ServerSideOnly=true)]
		public static int? PgLsnCmp(object par5255, object par5256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnEq

		[Sql.Function(Name="pg_catalog.pg_lsn_eq", ServerSideOnly=true)]
		public static bool? PgLsnEq(object par5258, object par5259)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnGe

		[Sql.Function(Name="pg_catalog.pg_lsn_ge", ServerSideOnly=true)]
		public static bool? PgLsnGe(object par5261, object par5262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnGt

		[Sql.Function(Name="pg_catalog.pg_lsn_gt", ServerSideOnly=true)]
		public static bool? PgLsnGt(object par5264, object par5265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnHash

		[Sql.Function(Name="pg_catalog.pg_lsn_hash", ServerSideOnly=true)]
		public static int? PgLsnHash(object par5267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnHashExtended

		[Sql.Function(Name="pg_catalog.pg_lsn_hash_extended", ServerSideOnly=true)]
		public static long? PgLsnHashExtended(object par5269, long? par5270)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnIn

		[Sql.Function(Name="pg_catalog.pg_lsn_in", ServerSideOnly=true)]
		public static object PgLsnIn(object par5272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnLe

		[Sql.Function(Name="pg_catalog.pg_lsn_le", ServerSideOnly=true)]
		public static bool? PgLsnLe(object par5274, object par5275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnLt

		[Sql.Function(Name="pg_catalog.pg_lsn_lt", ServerSideOnly=true)]
		public static bool? PgLsnLt(object par5277, object par5278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnMi

		[Sql.Function(Name="pg_catalog.pg_lsn_mi", ServerSideOnly=true)]
		public static decimal? PgLsnMi(object par5280, object par5281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnNe

		[Sql.Function(Name="pg_catalog.pg_lsn_ne", ServerSideOnly=true)]
		public static bool? PgLsnNe(object par5283, object par5284)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnOut

		[Sql.Function(Name="pg_catalog.pg_lsn_out", ServerSideOnly=true)]
		public static object PgLsnOut(object par5286)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnRecv

		[Sql.Function(Name="pg_catalog.pg_lsn_recv", ServerSideOnly=true)]
		public static object PgLsnRecv(object par5288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnSend

		[Sql.Function(Name="pg_catalog.pg_lsn_send", ServerSideOnly=true)]
		public static byte[] PgLsnSend(object par5290)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMcvListIn

		[Sql.Function(Name="pg_catalog.pg_mcv_list_in", ServerSideOnly=true)]
		public static object PgMcvListIn(object par5292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMcvListOut

		[Sql.Function(Name="pg_catalog.pg_mcv_list_out", ServerSideOnly=true)]
		public static object PgMcvListOut(object par5294)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMcvListRecv

		[Sql.Function(Name="pg_catalog.pg_mcv_list_recv", ServerSideOnly=true)]
		public static object PgMcvListRecv(object par5296)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMcvListSend

		[Sql.Function(Name="pg_catalog.pg_mcv_list_send", ServerSideOnly=true)]
		public static byte[] PgMcvListSend(object par5298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMyTempSchema

		[Sql.Function(Name="pg_catalog.pg_my_temp_schema", ServerSideOnly=true)]
		public static int? PgMyTempSchema()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNdistinctIn

		[Sql.Function(Name="pg_catalog.pg_ndistinct_in", ServerSideOnly=true)]
		public static object PgNdistinctIn(object par5301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNdistinctOut

		[Sql.Function(Name="pg_catalog.pg_ndistinct_out", ServerSideOnly=true)]
		public static object PgNdistinctOut(object par5303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNdistinctRecv

		[Sql.Function(Name="pg_catalog.pg_ndistinct_recv", ServerSideOnly=true)]
		public static object PgNdistinctRecv(object par5305)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNdistinctSend

		[Sql.Function(Name="pg_catalog.pg_ndistinct_send", ServerSideOnly=true)]
		public static byte[] PgNdistinctSend(object par5307)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNextoid

		[Sql.Function(Name="pg_catalog.pg_nextoid", ServerSideOnly=true)]
		public static int? PgNextoid(object par5309, string par5310, object par5311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeIn

		[Sql.Function(Name="pg_catalog.pg_node_tree_in", ServerSideOnly=true)]
		public static object PgNodeTreeIn(object par5313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeOut

		[Sql.Function(Name="pg_catalog.pg_node_tree_out", ServerSideOnly=true)]
		public static object PgNodeTreeOut(object par5315)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeRecv

		[Sql.Function(Name="pg_catalog.pg_node_tree_recv", ServerSideOnly=true)]
		public static object PgNodeTreeRecv(object par5317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeSend

		[Sql.Function(Name="pg_catalog.pg_node_tree_send", ServerSideOnly=true)]
		public static byte[] PgNodeTreeSend(object par5319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNotificationQueueUsage

		[Sql.Function(Name="pg_catalog.pg_notification_queue_usage", ServerSideOnly=true)]
		public static double? PgNotificationQueueUsage()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNotify

		[Sql.Function(Name="pg_catalog.pg_notify", ServerSideOnly=true)]
		public static object PgNotify(string par5321, string par5322)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOpclassIsVisible

		[Sql.Function(Name="pg_catalog.pg_opclass_is_visible", ServerSideOnly=true)]
		public static bool? PgOpclassIsVisible(int? par5324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOperatorIsVisible

		[Sql.Function(Name="pg_catalog.pg_operator_is_visible", ServerSideOnly=true)]
		public static bool? PgOperatorIsVisible(int? par5326)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOpfamilyIsVisible

		[Sql.Function(Name="pg_catalog.pg_opfamily_is_visible", ServerSideOnly=true)]
		public static bool? PgOpfamilyIsVisible(int? par5328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgPartitionRoot

		[Sql.Function(Name="pg_catalog.pg_partition_root", ServerSideOnly=true)]
		public static object PgPartitionRoot(object par5330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgPostmasterStartTime

		[Sql.Function(Name="pg_catalog.pg_postmaster_start_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgPostmasterStartTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgPromote

		[Sql.Function(Name="pg_catalog.pg_promote", ServerSideOnly=true)]
		public static bool? PgPromote(bool? wait, int? wait_seconds)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadBinaryFile

		[Sql.Function(Name="pg_catalog.pg_read_binary_file", ServerSideOnly=true)]
		public static byte[] PgReadBinaryFile(string par5343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadFile

		[Sql.Function(Name="pg_catalog.pg_read_file", ServerSideOnly=true)]
		public static string PgReadFile(string par5354)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadFileOld

		[Sql.Function(Name="pg_catalog.pg_read_file_old", ServerSideOnly=true)]
		public static string PgReadFileOld(string par5356, long? par5357, long? par5358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationFilenode

		[Sql.Function(Name="pg_catalog.pg_relation_filenode", ServerSideOnly=true)]
		public static int? PgRelationFilenode(object par5360)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationFilepath

		[Sql.Function(Name="pg_catalog.pg_relation_filepath", ServerSideOnly=true)]
		public static string PgRelationFilepath(object par5362)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationIsPublishable

		[Sql.Function(Name="pg_catalog.pg_relation_is_publishable", ServerSideOnly=true)]
		public static bool? PgRelationIsPublishable(object par5364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationIsUpdatable

		[Sql.Function(Name="pg_catalog.pg_relation_is_updatable", ServerSideOnly=true)]
		public static int? PgRelationIsUpdatable(object par5366, bool? par5367)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationSize

		[Sql.Function(Name="pg_catalog.pg_relation_size", ServerSideOnly=true)]
		public static long? PgRelationSize(object par5371, string par5372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReloadConf

		[Sql.Function(Name="pg_catalog.pg_reload_conf", ServerSideOnly=true)]
		public static bool? PgReloadConf()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginAdvance

		[Sql.Function(Name="pg_catalog.pg_replication_origin_advance", ServerSideOnly=true)]
		public static object PgReplicationOriginAdvance(string par5374, object par5375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginCreate

		[Sql.Function(Name="pg_catalog.pg_replication_origin_create", ServerSideOnly=true)]
		public static int? PgReplicationOriginCreate(string par5377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginDrop

		[Sql.Function(Name="pg_catalog.pg_replication_origin_drop", ServerSideOnly=true)]
		public static object PgReplicationOriginDrop(string par5378)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginOid

		[Sql.Function(Name="pg_catalog.pg_replication_origin_oid", ServerSideOnly=true)]
		public static int? PgReplicationOriginOid(string par5380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginProgress

		[Sql.Function(Name="pg_catalog.pg_replication_origin_progress", ServerSideOnly=true)]
		public static object PgReplicationOriginProgress(string par5382, bool? par5383)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionIsSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_is_setup", ServerSideOnly=true)]
		public static bool? PgReplicationOriginSessionIsSetup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionProgress

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_progress", ServerSideOnly=true)]
		public static object PgReplicationOriginSessionProgress(bool? par5386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionReset

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_reset", ServerSideOnly=true)]
		public static object PgReplicationOriginSessionReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_setup", ServerSideOnly=true)]
		public static object PgReplicationOriginSessionSetup(string par5387)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginXactReset

		[Sql.Function(Name="pg_catalog.pg_replication_origin_xact_reset", ServerSideOnly=true)]
		public static object PgReplicationOriginXactReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginXactSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_xact_setup", ServerSideOnly=true)]
		public static object PgReplicationOriginXactSetup(object par5388, DateTimeOffset? par5389)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationSlotAdvance

		[Sql.Function(Name="pg_catalog.pg_replication_slot_advance", ServerSideOnly=true)]
		public static pg_replication_slot_advanceResult PgReplicationSlotAdvance(string slot_name, object upto_lsn)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRotateLogfile

		[Sql.Function(Name="pg_catalog.pg_rotate_logfile", ServerSideOnly=true)]
		public static bool? PgRotateLogfile()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRotateLogfileOld

		[Sql.Function(Name="pg_catalog.pg_rotate_logfile_old", ServerSideOnly=true)]
		public static bool? PgRotateLogfileOld()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSafeSnapshotBlockingPids

		[Sql.Function(Name="pg_catalog.pg_safe_snapshot_blocking_pids", ServerSideOnly=true)]
		public static object PgSafeSnapshotBlockingPids(int? par5393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSequenceLastValue

		[Sql.Function(Name="pg_catalog.pg_sequence_last_value", ServerSideOnly=true)]
		public static long? PgSequenceLastValue(object par5395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSequenceParameters

		[Sql.Function(Name="pg_catalog.pg_sequence_parameters", ServerSideOnly=true)]
		public static pg_sequence_parametersResult PgSequenceParameters(int? sequence_oid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSizeBytes

		[Sql.Function(Name="pg_catalog.pg_size_bytes", ServerSideOnly=true)]
		public static long? PgSizeBytes(string par5397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSizePretty

		[Sql.Function(Name="pg_catalog.pg_size_pretty", ServerSideOnly=true)]
		public static string PgSizePretty(decimal? par5401)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleep

		[Sql.Function(Name="pg_catalog.pg_sleep", ServerSideOnly=true)]
		public static object PgSleep(double? par5402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleepFor

		[Sql.Function(Name="pg_catalog.pg_sleep_for", ServerSideOnly=true)]
		public static object PgSleepFor(NpgsqlTimeSpan? par5403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleepUntil

		[Sql.Function(Name="pg_catalog.pg_sleep_until", ServerSideOnly=true)]
		public static object PgSleepUntil(DateTimeOffset? par5404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStartBackup

		[Sql.Function(Name="pg_catalog.pg_start_backup", ServerSideOnly=true)]
		public static object PgStartBackup(string label, bool? fast, bool? exclusive)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatClearSnapshot

		[Sql.Function(Name="pg_catalog.pg_stat_clear_snapshot", ServerSideOnly=true)]
		public static object PgStatClearSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatFile

		[Sql.Function(Name="pg_catalog.pg_stat_file", ServerSideOnly=true)]
		public static pg_stat_fileResult PgStatFile(string filename, bool? missing_ok)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAnalyzeCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_analyze_count", ServerSideOnly=true)]
		public static long? PgStatGetAnalyzeCount(int? par5407)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetArchiver

		[Sql.Function(Name="pg_catalog.pg_stat_get_archiver", ServerSideOnly=true)]
		public static pg_stat_get_archiverResult PgStatGetArchiver()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAutoanalyzeCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_autoanalyze_count", ServerSideOnly=true)]
		public static long? PgStatGetAutoanalyzeCount(int? par5409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAutovacuumCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_autovacuum_count", ServerSideOnly=true)]
		public static long? PgStatGetAutovacuumCount(int? par5411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendActivity

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_activity", ServerSideOnly=true)]
		public static string PgStatGetBackendActivity(int? par5413)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendActivityStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_activity_start", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBackendActivityStart(int? par5415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendClientAddr

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_client_addr", ServerSideOnly=true)]
		public static NpgsqlInet? PgStatGetBackendClientAddr(int? par5417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendClientPort

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_client_port", ServerSideOnly=true)]
		public static int? PgStatGetBackendClientPort(int? par5419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendDbid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_dbid", ServerSideOnly=true)]
		public static int? PgStatGetBackendDbid(int? par5421)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendPid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_pid", ServerSideOnly=true)]
		public static int? PgStatGetBackendPid(int? par5423)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_start", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBackendStart(int? par5425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendUserid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_userid", ServerSideOnly=true)]
		public static int? PgStatGetBackendUserid(int? par5427)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendWaitEvent

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_wait_event", ServerSideOnly=true)]
		public static string PgStatGetBackendWaitEvent(int? par5429)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendWaitEventType

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_wait_event_type", ServerSideOnly=true)]
		public static string PgStatGetBackendWaitEventType(int? par5431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendXactStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_xact_start", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBackendXactStart(int? par5433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterBufWrittenCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterBufWrittenCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterBufWrittenClean

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_buf_written_clean", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterBufWrittenClean()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterMaxwrittenClean

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_maxwritten_clean", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterMaxwrittenClean()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterRequestedCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_requested_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterRequestedCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterStatResetTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_stat_reset_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBgwriterStatResetTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterTimedCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_timed_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterTimedCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetBlocksFetched(int? par5441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetBlocksHit(int? par5443)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufAlloc

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_alloc", ServerSideOnly=true)]
		public static long? PgStatGetBufAlloc()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufFsyncBackend

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_fsync_backend", ServerSideOnly=true)]
		public static long? PgStatGetBufFsyncBackend()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufWrittenBackend

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_written_backend", ServerSideOnly=true)]
		public static long? PgStatGetBufWrittenBackend()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetCheckpointSyncTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_checkpoint_sync_time", ServerSideOnly=true)]
		public static double? PgStatGetCheckpointSyncTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetCheckpointWriteTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_checkpoint_write_time", ServerSideOnly=true)]
		public static double? PgStatGetCheckpointWriteTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlkReadTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blk_read_time", ServerSideOnly=true)]
		public static double? PgStatGetDbBlkReadTime(int? par5450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlkWriteTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blk_write_time", ServerSideOnly=true)]
		public static double? PgStatGetDbBlkWriteTime(int? par5452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetDbBlocksFetched(int? par5454)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetDbBlocksHit(int? par5456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbChecksumFailures

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_checksum_failures", ServerSideOnly=true)]
		public static long? PgStatGetDbChecksumFailures(int? par5458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbChecksumLastFailure

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_checksum_last_failure", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetDbChecksumLastFailure(int? par5460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictAll

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_all", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictAll(int? par5462)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictBufferpin

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_bufferpin", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictBufferpin(int? par5464)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictLock

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_lock", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictLock(int? par5466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictSnapshot

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_snapshot", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictSnapshot(int? par5468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictStartupDeadlock

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_startup_deadlock", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictStartupDeadlock(int? par5470)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictTablespace

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_tablespace", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictTablespace(int? par5472)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbDeadlocks

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_deadlocks", ServerSideOnly=true)]
		public static long? PgStatGetDbDeadlocks(int? par5474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbNumbackends

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_numbackends", ServerSideOnly=true)]
		public static int? PgStatGetDbNumbackends(int? par5476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbStatResetTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_stat_reset_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetDbStatResetTime(int? par5478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTempBytes

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_temp_bytes", ServerSideOnly=true)]
		public static long? PgStatGetDbTempBytes(int? par5480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTempFiles

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_temp_files", ServerSideOnly=true)]
		public static long? PgStatGetDbTempFiles(int? par5482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesDeleted(int? par5484)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesFetched(int? par5486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesInserted(int? par5488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesReturned(int? par5490)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesUpdated(int? par5492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbXactCommit

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_xact_commit", ServerSideOnly=true)]
		public static long? PgStatGetDbXactCommit(int? par5494)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbXactRollback

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_xact_rollback", ServerSideOnly=true)]
		public static long? PgStatGetDbXactRollback(int? par5496)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDeadTuples

		[Sql.Function(Name="pg_catalog.pg_stat_get_dead_tuples", ServerSideOnly=true)]
		public static long? PgStatGetDeadTuples(int? par5498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionCalls

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_calls", ServerSideOnly=true)]
		public static long? PgStatGetFunctionCalls(int? par5500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionSelfTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_self_time", ServerSideOnly=true)]
		public static double? PgStatGetFunctionSelfTime(int? par5502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionTotalTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_total_time", ServerSideOnly=true)]
		public static double? PgStatGetFunctionTotalTime(int? par5504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAnalyzeTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_analyze_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastAnalyzeTime(int? par5506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAutoanalyzeTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_autoanalyze_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastAutoanalyzeTime(int? par5508)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAutovacuumTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_autovacuum_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastAutovacuumTime(int? par5510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastVacuumTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_vacuum_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastVacuumTime(int? par5512)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLiveTuples

		[Sql.Function(Name="pg_catalog.pg_stat_get_live_tuples", ServerSideOnly=true)]
		public static long? PgStatGetLiveTuples(int? par5514)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetModSinceAnalyze

		[Sql.Function(Name="pg_catalog.pg_stat_get_mod_since_analyze", ServerSideOnly=true)]
		public static long? PgStatGetModSinceAnalyze(int? par5516)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetNumscans

		[Sql.Function(Name="pg_catalog.pg_stat_get_numscans", ServerSideOnly=true)]
		public static long? PgStatGetNumscans(int? par5518)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetSnapshotTimestamp

		[Sql.Function(Name="pg_catalog.pg_stat_get_snapshot_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetSnapshotTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetSubscription

		[Sql.Function(Name="pg_catalog.pg_stat_get_subscription", ServerSideOnly=true)]
		public static pg_stat_get_subscriptionResult PgStatGetSubscription(int? subid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetTuplesDeleted(int? par5521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetTuplesFetched(int? par5523)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesHotUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_hot_updated", ServerSideOnly=true)]
		public static long? PgStatGetTuplesHotUpdated(int? par5525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetTuplesInserted(int? par5527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetTuplesReturned(int? par5529)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetTuplesUpdated(int? par5531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetVacuumCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_vacuum_count", ServerSideOnly=true)]
		public static long? PgStatGetVacuumCount(int? par5533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetWalReceiver

		[Sql.Function(Name="pg_catalog.pg_stat_get_wal_receiver", ServerSideOnly=true)]
		public static pg_stat_get_wal_receiverResult PgStatGetWalReceiver()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetXactBlocksFetched(int? par5535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetXactBlocksHit(int? par5537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionCalls

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_calls", ServerSideOnly=true)]
		public static long? PgStatGetXactFunctionCalls(int? par5539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionSelfTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_self_time", ServerSideOnly=true)]
		public static double? PgStatGetXactFunctionSelfTime(int? par5541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionTotalTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_total_time", ServerSideOnly=true)]
		public static double? PgStatGetXactFunctionTotalTime(int? par5543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactNumscans

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_numscans", ServerSideOnly=true)]
		public static long? PgStatGetXactNumscans(int? par5545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesDeleted(int? par5547)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesFetched(int? par5549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesHotUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_hot_updated", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesHotUpdated(int? par5551)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesInserted(int? par5553)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesReturned(int? par5555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesUpdated(int? par5557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatReset

		[Sql.Function(Name="pg_catalog.pg_stat_reset", ServerSideOnly=true)]
		public static object PgStatReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetShared

		[Sql.Function(Name="pg_catalog.pg_stat_reset_shared", ServerSideOnly=true)]
		public static object PgStatResetShared(string par5558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetSingleFunctionCounters

		[Sql.Function(Name="pg_catalog.pg_stat_reset_single_function_counters", ServerSideOnly=true)]
		public static object PgStatResetSingleFunctionCounters(int? par5559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetSingleTableCounters

		[Sql.Function(Name="pg_catalog.pg_stat_reset_single_table_counters", ServerSideOnly=true)]
		public static object PgStatResetSingleTableCounters(int? par5560)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatisticsObjIsVisible

		[Sql.Function(Name="pg_catalog.pg_statistics_obj_is_visible", ServerSideOnly=true)]
		public static bool? PgStatisticsObjIsVisible(int? par5562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSwitchWal

		[Sql.Function(Name="pg_catalog.pg_switch_wal", ServerSideOnly=true)]
		public static object PgSwitchWal()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTableIsVisible

		[Sql.Function(Name="pg_catalog.pg_table_is_visible", ServerSideOnly=true)]
		public static bool? PgTableIsVisible(int? par5566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTableSize

		[Sql.Function(Name="pg_catalog.pg_table_size", ServerSideOnly=true)]
		public static long? PgTableSize(object par5568)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTablespaceLocation

		[Sql.Function(Name="pg_catalog.pg_tablespace_location", ServerSideOnly=true)]
		public static string PgTablespaceLocation(int? par5571)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTablespaceSize

		[Sql.Function(Name="pg_catalog.pg_tablespace_size", ServerSideOnly=true)]
		public static long? PgTablespaceSize(string par5575)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTerminateBackend

		[Sql.Function(Name="pg_catalog.pg_terminate_backend", ServerSideOnly=true)]
		public static bool? PgTerminateBackend(int? par5577)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTotalRelationSize

		[Sql.Function(Name="pg_catalog.pg_total_relation_size", ServerSideOnly=true)]
		public static long? PgTotalRelationSize(object par5579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTriggerDepth

		[Sql.Function(Name="pg_catalog.pg_trigger_depth", ServerSideOnly=true)]
		public static int? PgTriggerDepth()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryLock

		[Sql.Function(Name="pg_catalog.pg_try_advisory_lock", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryLock(int? par5584, int? par5585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryLockShared

		[Sql.Function(Name="pg_catalog.pg_try_advisory_lock_shared", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryLockShared(int? par5589, int? par5590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryXactLock

		[Sql.Function(Name="pg_catalog.pg_try_advisory_xact_lock", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryXactLock(int? par5594, int? par5595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryXactLockShared

		[Sql.Function(Name="pg_catalog.pg_try_advisory_xact_lock_shared", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryXactLockShared(int? par5599, int? par5600)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsConfigIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_config_is_visible", ServerSideOnly=true)]
		public static bool? PgTsConfigIsVisible(int? par5602)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsDictIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_dict_is_visible", ServerSideOnly=true)]
		public static bool? PgTsDictIsVisible(int? par5604)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsParserIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_parser_is_visible", ServerSideOnly=true)]
		public static bool? PgTsParserIsVisible(int? par5606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsTemplateIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_template_is_visible", ServerSideOnly=true)]
		public static bool? PgTsTemplateIsVisible(int? par5608)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTypeIsVisible

		[Sql.Function(Name="pg_catalog.pg_type_is_visible", ServerSideOnly=true)]
		public static bool? PgTypeIsVisible(int? par5610)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTypeof

		[Sql.Function(Name="pg_catalog.pg_typeof", ServerSideOnly=true)]
		public static object PgTypeof(object par5612)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgWalLsnDiff

		[Sql.Function(Name="pg_catalog.pg_wal_lsn_diff", ServerSideOnly=true)]
		public static decimal? PgWalLsnDiff(object par5614, object par5615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgWalReplayPause

		[Sql.Function(Name="pg_catalog.pg_wal_replay_pause", ServerSideOnly=true)]
		public static object PgWalReplayPause()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgWalReplayResume

		[Sql.Function(Name="pg_catalog.pg_wal_replay_resume", ServerSideOnly=true)]
		public static object PgWalReplayResume()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgWalfileName

		[Sql.Function(Name="pg_catalog.pg_walfile_name", ServerSideOnly=true)]
		public static string PgWalfileName(object par5617)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgWalfileNameOffset

		[Sql.Function(Name="pg_catalog.pg_walfile_name_offset", ServerSideOnly=true)]
		public static pg_walfile_name_offsetResult PgWalfileNameOffset(object lsn)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXactCommitTimestamp

		[Sql.Function(Name="pg_catalog.pg_xact_commit_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? PgXactCommitTimestamp(int? par5619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PhrasetoTsquery

		[Sql.Function(Name="pg_catalog.phraseto_tsquery", ServerSideOnly=true)]
		public static object PhrasetoTsquery(object par5623, string par5624)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pi

		[Sql.Function(Name="pg_catalog.pi", ServerSideOnly=true)]
		public static double? Pi()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlaintoTsquery

		[Sql.Function(Name="pg_catalog.plainto_tsquery", ServerSideOnly=true)]
		public static object PlaintoTsquery(string par5630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlCallHandler

		[Sql.Function(Name="pg_catalog.plpgsql_call_handler", ServerSideOnly=true)]
		public static object PlpgsqlCallHandler()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlInlineHandler

		[Sql.Function(Name="pg_catalog.plpgsql_inline_handler", ServerSideOnly=true)]
		public static object PlpgsqlInlineHandler(object par5632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlValidator

		[Sql.Function(Name="pg_catalog.plpgsql_validator", ServerSideOnly=true)]
		public static object PlpgsqlValidator(int? par5633)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Point

		[Sql.Function(Name="pg_catalog.point", ServerSideOnly=true)]
		public static NpgsqlPoint? Point(NpgsqlPolygon? par5646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointAbove

		[Sql.Function(Name="pg_catalog.point_above", ServerSideOnly=true)]
		public static bool? PointAbove(NpgsqlPoint? par5648, NpgsqlPoint? par5649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointAdd

		[Sql.Function(Name="pg_catalog.point_add", ServerSideOnly=true)]
		public static NpgsqlPoint? PointAdd(NpgsqlPoint? par5651, NpgsqlPoint? par5652)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointBelow

		[Sql.Function(Name="pg_catalog.point_below", ServerSideOnly=true)]
		public static bool? PointBelow(NpgsqlPoint? par5654, NpgsqlPoint? par5655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointDistance

		[Sql.Function(Name="pg_catalog.point_distance", ServerSideOnly=true)]
		public static double? PointDistance(NpgsqlPoint? par5657, NpgsqlPoint? par5658)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointDiv

		[Sql.Function(Name="pg_catalog.point_div", ServerSideOnly=true)]
		public static NpgsqlPoint? PointDiv(NpgsqlPoint? par5660, NpgsqlPoint? par5661)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointEq

		[Sql.Function(Name="pg_catalog.point_eq", ServerSideOnly=true)]
		public static bool? PointEq(NpgsqlPoint? par5663, NpgsqlPoint? par5664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointHoriz

		[Sql.Function(Name="pg_catalog.point_horiz", ServerSideOnly=true)]
		public static bool? PointHoriz(NpgsqlPoint? par5666, NpgsqlPoint? par5667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointIn

		[Sql.Function(Name="pg_catalog.point_in", ServerSideOnly=true)]
		public static NpgsqlPoint? PointIn(object par5669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointLeft

		[Sql.Function(Name="pg_catalog.point_left", ServerSideOnly=true)]
		public static bool? PointLeft(NpgsqlPoint? par5671, NpgsqlPoint? par5672)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointMul

		[Sql.Function(Name="pg_catalog.point_mul", ServerSideOnly=true)]
		public static NpgsqlPoint? PointMul(NpgsqlPoint? par5674, NpgsqlPoint? par5675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointNe

		[Sql.Function(Name="pg_catalog.point_ne", ServerSideOnly=true)]
		public static bool? PointNe(NpgsqlPoint? par5677, NpgsqlPoint? par5678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointOut

		[Sql.Function(Name="pg_catalog.point_out", ServerSideOnly=true)]
		public static object PointOut(NpgsqlPoint? par5680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointRecv

		[Sql.Function(Name="pg_catalog.point_recv", ServerSideOnly=true)]
		public static NpgsqlPoint? PointRecv(object par5682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointRight

		[Sql.Function(Name="pg_catalog.point_right", ServerSideOnly=true)]
		public static bool? PointRight(NpgsqlPoint? par5684, NpgsqlPoint? par5685)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointSend

		[Sql.Function(Name="pg_catalog.point_send", ServerSideOnly=true)]
		public static byte[] PointSend(NpgsqlPoint? par5687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointSub

		[Sql.Function(Name="pg_catalog.point_sub", ServerSideOnly=true)]
		public static NpgsqlPoint? PointSub(NpgsqlPoint? par5689, NpgsqlPoint? par5690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointVert

		[Sql.Function(Name="pg_catalog.point_vert", ServerSideOnly=true)]
		public static bool? PointVert(NpgsqlPoint? par5692, NpgsqlPoint? par5693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyAbove

		[Sql.Function(Name="pg_catalog.poly_above", ServerSideOnly=true)]
		public static bool? PolyAbove(NpgsqlPolygon? par5695, NpgsqlPolygon? par5696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyBelow

		[Sql.Function(Name="pg_catalog.poly_below", ServerSideOnly=true)]
		public static bool? PolyBelow(NpgsqlPolygon? par5698, NpgsqlPolygon? par5699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyCenter

		[Sql.Function(Name="pg_catalog.poly_center", ServerSideOnly=true)]
		public static NpgsqlPoint? PolyCenter(NpgsqlPolygon? par5701)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContain

		[Sql.Function(Name="pg_catalog.poly_contain", ServerSideOnly=true)]
		public static bool? PolyContain(NpgsqlPolygon? par5703, NpgsqlPolygon? par5704)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContainPt

		[Sql.Function(Name="pg_catalog.poly_contain_pt", ServerSideOnly=true)]
		public static bool? PolyContainPt(NpgsqlPolygon? par5706, NpgsqlPoint? par5707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContained

		[Sql.Function(Name="pg_catalog.poly_contained", ServerSideOnly=true)]
		public static bool? PolyContained(NpgsqlPolygon? par5709, NpgsqlPolygon? par5710)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyDistance

		[Sql.Function(Name="pg_catalog.poly_distance", ServerSideOnly=true)]
		public static double? PolyDistance(NpgsqlPolygon? par5712, NpgsqlPolygon? par5713)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyIn

		[Sql.Function(Name="pg_catalog.poly_in", ServerSideOnly=true)]
		public static NpgsqlPolygon? PolyIn(object par5715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyLeft

		[Sql.Function(Name="pg_catalog.poly_left", ServerSideOnly=true)]
		public static bool? PolyLeft(NpgsqlPolygon? par5717, NpgsqlPolygon? par5718)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyNpoints

		[Sql.Function(Name="pg_catalog.poly_npoints", ServerSideOnly=true)]
		public static int? PolyNpoints(NpgsqlPolygon? par5720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOut

		[Sql.Function(Name="pg_catalog.poly_out", ServerSideOnly=true)]
		public static object PolyOut(NpgsqlPolygon? par5722)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverabove

		[Sql.Function(Name="pg_catalog.poly_overabove", ServerSideOnly=true)]
		public static bool? PolyOverabove(NpgsqlPolygon? par5724, NpgsqlPolygon? par5725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverbelow

		[Sql.Function(Name="pg_catalog.poly_overbelow", ServerSideOnly=true)]
		public static bool? PolyOverbelow(NpgsqlPolygon? par5727, NpgsqlPolygon? par5728)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverlap

		[Sql.Function(Name="pg_catalog.poly_overlap", ServerSideOnly=true)]
		public static bool? PolyOverlap(NpgsqlPolygon? par5730, NpgsqlPolygon? par5731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverleft

		[Sql.Function(Name="pg_catalog.poly_overleft", ServerSideOnly=true)]
		public static bool? PolyOverleft(NpgsqlPolygon? par5733, NpgsqlPolygon? par5734)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverright

		[Sql.Function(Name="pg_catalog.poly_overright", ServerSideOnly=true)]
		public static bool? PolyOverright(NpgsqlPolygon? par5736, NpgsqlPolygon? par5737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyRecv

		[Sql.Function(Name="pg_catalog.poly_recv", ServerSideOnly=true)]
		public static NpgsqlPolygon? PolyRecv(object par5739)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyRight

		[Sql.Function(Name="pg_catalog.poly_right", ServerSideOnly=true)]
		public static bool? PolyRight(NpgsqlPolygon? par5741, NpgsqlPolygon? par5742)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolySame

		[Sql.Function(Name="pg_catalog.poly_same", ServerSideOnly=true)]
		public static bool? PolySame(NpgsqlPolygon? par5744, NpgsqlPolygon? par5745)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolySend

		[Sql.Function(Name="pg_catalog.poly_send", ServerSideOnly=true)]
		public static byte[] PolySend(NpgsqlPolygon? par5747)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Polygon

		[Sql.Function(Name="pg_catalog.polygon", ServerSideOnly=true)]
		public static NpgsqlPolygon? Polygon(NpgsqlCircle? par5756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Popen

		[Sql.Function(Name="pg_catalog.popen", ServerSideOnly=true)]
		public static NpgsqlPath? Popen(NpgsqlPath? par5758)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Position

		[Sql.Function(Name="pg_catalog.position", ServerSideOnly=true)]
		public static int? Position(string par5766, string par5767)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Positionjoinsel

		[Sql.Function(Name="pg_catalog.positionjoinsel", ServerSideOnly=true)]
		public static double? Positionjoinsel(object par5769, int? par5770, object par5771, short? par5772, object par5773)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Positionsel

		[Sql.Function(Name="pg_catalog.positionsel", ServerSideOnly=true)]
		public static double? Positionsel(object par5775, int? par5776, object par5777, int? par5778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PostgresqlFdwValidator

		[Sql.Function(Name="pg_catalog.postgresql_fdw_validator", ServerSideOnly=true)]
		public static bool? PostgresqlFdwValidator(object par5780, int? par5781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pow

		[Sql.Function(Name="pg_catalog.pow", ServerSideOnly=true)]
		public static decimal? Pow(decimal? par5786, decimal? par5787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Power

		[Sql.Function(Name="pg_catalog.power", ServerSideOnly=true)]
		public static decimal? Power(decimal? par5792, decimal? par5793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Prefixjoinsel

		[Sql.Function(Name="pg_catalog.prefixjoinsel", ServerSideOnly=true)]
		public static double? Prefixjoinsel(object par5795, int? par5796, object par5797, short? par5798, object par5799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Prefixsel

		[Sql.Function(Name="pg_catalog.prefixsel", ServerSideOnly=true)]
		public static double? Prefixsel(object par5801, int? par5802, object par5803, int? par5804)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdEnd

		[Sql.Function(Name="pg_catalog.prsd_end", ServerSideOnly=true)]
		public static object PrsdEnd(object par5805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdHeadline

		[Sql.Function(Name="pg_catalog.prsd_headline", ServerSideOnly=true)]
		public static object PrsdHeadline(object par5807, object par5808, object par5809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdLextype

		[Sql.Function(Name="pg_catalog.prsd_lextype", ServerSideOnly=true)]
		public static object PrsdLextype(object par5811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdNexttoken

		[Sql.Function(Name="pg_catalog.prsd_nexttoken", ServerSideOnly=true)]
		public static object PrsdNexttoken(object par5813, object par5814, object par5815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdStart

		[Sql.Function(Name="pg_catalog.prsd_start", ServerSideOnly=true)]
		public static object PrsdStart(object par5817, int? par5818)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PtContainedCircle

		[Sql.Function(Name="pg_catalog.pt_contained_circle", ServerSideOnly=true)]
		public static bool? PtContainedCircle(NpgsqlPoint? par5820, NpgsqlCircle? par5821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PtContainedPoly

		[Sql.Function(Name="pg_catalog.pt_contained_poly", ServerSideOnly=true)]
		public static bool? PtContainedPoly(NpgsqlPoint? par5823, NpgsqlPolygon? par5824)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXml

		[Sql.Function(Name="pg_catalog.query_to_xml", ServerSideOnly=true)]
		public static string QueryToXml(string query, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.query_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string QueryToXmlAndXmlschema(string query, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXmlschema

		[Sql.Function(Name="pg_catalog.query_to_xmlschema", ServerSideOnly=true)]
		public static string QueryToXmlschema(string query, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Querytree

		[Sql.Function(Name="pg_catalog.querytree", ServerSideOnly=true)]
		public static string Querytree(object par5829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteIdent

		[Sql.Function(Name="pg_catalog.quote_ident", ServerSideOnly=true)]
		public static string QuoteIdent(string par5831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteLiteral

		[Sql.Function(Name="pg_catalog.quote_literal", ServerSideOnly=true)]
		public static string QuoteLiteral(object par5835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteNullable

		[Sql.Function(Name="pg_catalog.quote_nullable", ServerSideOnly=true)]
		public static string QuoteNullable(object par5839)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Radians

		[Sql.Function(Name="pg_catalog.radians", ServerSideOnly=true)]
		public static double? Radians(double? par5841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Radius

		[Sql.Function(Name="pg_catalog.radius", ServerSideOnly=true)]
		public static double? Radius(NpgsqlCircle? par5843)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Random

		[Sql.Function(Name="pg_catalog.random", ServerSideOnly=true)]
		public static double? Random()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeAdjacent

		[Sql.Function(Name="pg_catalog.range_adjacent", ServerSideOnly=true)]
		public static bool? RangeAdjacent(object par5846, object par5847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeAfter

		[Sql.Function(Name="pg_catalog.range_after", ServerSideOnly=true)]
		public static bool? RangeAfter(object par5849, object par5850)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeBefore

		[Sql.Function(Name="pg_catalog.range_before", ServerSideOnly=true)]
		public static bool? RangeBefore(object par5852, object par5853)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeCmp

		[Sql.Function(Name="pg_catalog.range_cmp", ServerSideOnly=true)]
		public static int? RangeCmp(object par5855, object par5856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContainedBy

		[Sql.Function(Name="pg_catalog.range_contained_by", ServerSideOnly=true)]
		public static bool? RangeContainedBy(object par5858, object par5859)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContains

		[Sql.Function(Name="pg_catalog.range_contains", ServerSideOnly=true)]
		public static bool? RangeContains(object par5861, object par5862)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContainsElem

		[Sql.Function(Name="pg_catalog.range_contains_elem", ServerSideOnly=true)]
		public static bool? RangeContainsElem(object par5864, object par5865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeEq

		[Sql.Function(Name="pg_catalog.range_eq", ServerSideOnly=true)]
		public static bool? RangeEq(object par5867, object par5868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGe

		[Sql.Function(Name="pg_catalog.range_ge", ServerSideOnly=true)]
		public static bool? RangeGe(object par5870, object par5871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistConsistent

		[Sql.Function(Name="pg_catalog.range_gist_consistent", ServerSideOnly=true)]
		public static bool? RangeGistConsistent(object par5873, object par5874, short? par5875, int? par5876, object par5877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistPenalty

		[Sql.Function(Name="pg_catalog.range_gist_penalty", ServerSideOnly=true)]
		public static object RangeGistPenalty(object par5879, object par5880, object par5881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistPicksplit

		[Sql.Function(Name="pg_catalog.range_gist_picksplit", ServerSideOnly=true)]
		public static object RangeGistPicksplit(object par5883, object par5884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistSame

		[Sql.Function(Name="pg_catalog.range_gist_same", ServerSideOnly=true)]
		public static object RangeGistSame(object par5886, object par5887, object par5888)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistUnion

		[Sql.Function(Name="pg_catalog.range_gist_union", ServerSideOnly=true)]
		public static object RangeGistUnion(object par5890, object par5891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGt

		[Sql.Function(Name="pg_catalog.range_gt", ServerSideOnly=true)]
		public static bool? RangeGt(object par5893, object par5894)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeIn

		[Sql.Function(Name="pg_catalog.range_in", ServerSideOnly=true)]
		public static object RangeIn(object par5896, int? par5897, int? par5898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeIntersect

		[Sql.Function(Name="pg_catalog.range_intersect", ServerSideOnly=true)]
		public static object RangeIntersect(object par5900, object par5901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeLe

		[Sql.Function(Name="pg_catalog.range_le", ServerSideOnly=true)]
		public static bool? RangeLe(object par5903, object par5904)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeLt

		[Sql.Function(Name="pg_catalog.range_lt", ServerSideOnly=true)]
		public static bool? RangeLt(object par5906, object par5907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeMerge

		[Sql.Function(Name="pg_catalog.range_merge", ServerSideOnly=true)]
		public static object RangeMerge(object par5909, object par5910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeMinus

		[Sql.Function(Name="pg_catalog.range_minus", ServerSideOnly=true)]
		public static object RangeMinus(object par5912, object par5913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeNe

		[Sql.Function(Name="pg_catalog.range_ne", ServerSideOnly=true)]
		public static bool? RangeNe(object par5915, object par5916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOut

		[Sql.Function(Name="pg_catalog.range_out", ServerSideOnly=true)]
		public static object RangeOut(object par5918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverlaps

		[Sql.Function(Name="pg_catalog.range_overlaps", ServerSideOnly=true)]
		public static bool? RangeOverlaps(object par5920, object par5921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverleft

		[Sql.Function(Name="pg_catalog.range_overleft", ServerSideOnly=true)]
		public static bool? RangeOverleft(object par5923, object par5924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverright

		[Sql.Function(Name="pg_catalog.range_overright", ServerSideOnly=true)]
		public static bool? RangeOverright(object par5926, object par5927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeRecv

		[Sql.Function(Name="pg_catalog.range_recv", ServerSideOnly=true)]
		public static object RangeRecv(object par5929, int? par5930, int? par5931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeSend

		[Sql.Function(Name="pg_catalog.range_send", ServerSideOnly=true)]
		public static byte[] RangeSend(object par5933)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeTypanalyze

		[Sql.Function(Name="pg_catalog.range_typanalyze", ServerSideOnly=true)]
		public static bool? RangeTypanalyze(object par5935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeUnion

		[Sql.Function(Name="pg_catalog.range_union", ServerSideOnly=true)]
		public static object RangeUnion(object par5937, object par5938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rangesel

		[Sql.Function(Name="pg_catalog.rangesel", ServerSideOnly=true)]
		public static double? Rangesel(object par5940, int? par5941, object par5942, int? par5943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rank

		[Sql.Function(Name="pg_catalog.rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static long? Rank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par5946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RankFinal

		[Sql.Function(Name="pg_catalog.rank_final", ServerSideOnly=true)]
		public static long? RankFinal(object par5948, object par5949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordEq

		[Sql.Function(Name="pg_catalog.record_eq", ServerSideOnly=true)]
		public static bool? RecordEq(object par5951, object par5952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordGe

		[Sql.Function(Name="pg_catalog.record_ge", ServerSideOnly=true)]
		public static bool? RecordGe(object par5954, object par5955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordGt

		[Sql.Function(Name="pg_catalog.record_gt", ServerSideOnly=true)]
		public static bool? RecordGt(object par5957, object par5958)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageEq

		[Sql.Function(Name="pg_catalog.record_image_eq", ServerSideOnly=true)]
		public static bool? RecordImageEq(object par5960, object par5961)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageGe

		[Sql.Function(Name="pg_catalog.record_image_ge", ServerSideOnly=true)]
		public static bool? RecordImageGe(object par5963, object par5964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageGt

		[Sql.Function(Name="pg_catalog.record_image_gt", ServerSideOnly=true)]
		public static bool? RecordImageGt(object par5966, object par5967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageLe

		[Sql.Function(Name="pg_catalog.record_image_le", ServerSideOnly=true)]
		public static bool? RecordImageLe(object par5969, object par5970)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageLt

		[Sql.Function(Name="pg_catalog.record_image_lt", ServerSideOnly=true)]
		public static bool? RecordImageLt(object par5972, object par5973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageNe

		[Sql.Function(Name="pg_catalog.record_image_ne", ServerSideOnly=true)]
		public static bool? RecordImageNe(object par5975, object par5976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordIn

		[Sql.Function(Name="pg_catalog.record_in", ServerSideOnly=true)]
		public static object RecordIn(object par5977, int? par5978, int? par5979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordLe

		[Sql.Function(Name="pg_catalog.record_le", ServerSideOnly=true)]
		public static bool? RecordLe(object par5981, object par5982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordLt

		[Sql.Function(Name="pg_catalog.record_lt", ServerSideOnly=true)]
		public static bool? RecordLt(object par5984, object par5985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordNe

		[Sql.Function(Name="pg_catalog.record_ne", ServerSideOnly=true)]
		public static bool? RecordNe(object par5987, object par5988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordOut

		[Sql.Function(Name="pg_catalog.record_out", ServerSideOnly=true)]
		public static object RecordOut(object par5990)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordRecv

		[Sql.Function(Name="pg_catalog.record_recv", ServerSideOnly=true)]
		public static object RecordRecv(object par5991, int? par5992, int? par5993)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordSend

		[Sql.Function(Name="pg_catalog.record_send", ServerSideOnly=true)]
		public static byte[] RecordSend(object par5995)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclass

		[Sql.Function(Name="pg_catalog.regclass", ServerSideOnly=true)]
		public static object Regclass(string par5997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassin

		[Sql.Function(Name="pg_catalog.regclassin", ServerSideOnly=true)]
		public static object Regclassin(object par5999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassout

		[Sql.Function(Name="pg_catalog.regclassout", ServerSideOnly=true)]
		public static object Regclassout(object par6001)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassrecv

		[Sql.Function(Name="pg_catalog.regclassrecv", ServerSideOnly=true)]
		public static object Regclassrecv(object par6003)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclasssend

		[Sql.Function(Name="pg_catalog.regclasssend", ServerSideOnly=true)]
		public static byte[] Regclasssend(object par6005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigin

		[Sql.Function(Name="pg_catalog.regconfigin", ServerSideOnly=true)]
		public static object Regconfigin(object par6007)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigout

		[Sql.Function(Name="pg_catalog.regconfigout", ServerSideOnly=true)]
		public static object Regconfigout(object par6009)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigrecv

		[Sql.Function(Name="pg_catalog.regconfigrecv", ServerSideOnly=true)]
		public static object Regconfigrecv(object par6011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigsend

		[Sql.Function(Name="pg_catalog.regconfigsend", ServerSideOnly=true)]
		public static byte[] Regconfigsend(object par6013)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryin

		[Sql.Function(Name="pg_catalog.regdictionaryin", ServerSideOnly=true)]
		public static object Regdictionaryin(object par6015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryout

		[Sql.Function(Name="pg_catalog.regdictionaryout", ServerSideOnly=true)]
		public static object Regdictionaryout(object par6017)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryrecv

		[Sql.Function(Name="pg_catalog.regdictionaryrecv", ServerSideOnly=true)]
		public static object Regdictionaryrecv(object par6019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionarysend

		[Sql.Function(Name="pg_catalog.regdictionarysend", ServerSideOnly=true)]
		public static byte[] Regdictionarysend(object par6021)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexeqjoinsel

		[Sql.Function(Name="pg_catalog.regexeqjoinsel", ServerSideOnly=true)]
		public static double? Regexeqjoinsel(object par6023, int? par6024, object par6025, short? par6026, object par6027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexeqsel

		[Sql.Function(Name="pg_catalog.regexeqsel", ServerSideOnly=true)]
		public static double? Regexeqsel(object par6029, int? par6030, object par6031, int? par6032)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexnejoinsel

		[Sql.Function(Name="pg_catalog.regexnejoinsel", ServerSideOnly=true)]
		public static double? Regexnejoinsel(object par6034, int? par6035, object par6036, short? par6037, object par6038)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexnesel

		[Sql.Function(Name="pg_catalog.regexnesel", ServerSideOnly=true)]
		public static double? Regexnesel(object par6040, int? par6041, object par6042, int? par6043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpMatch

		[Sql.Function(Name="pg_catalog.regexp_match", ServerSideOnly=true)]
		public static object RegexpMatch(string par6048, string par6049, string par6050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpReplace

		[Sql.Function(Name="pg_catalog.regexp_replace", ServerSideOnly=true)]
		public static string RegexpReplace(string par6061, string par6062, string par6063, string par6064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpSplitToArray

		[Sql.Function(Name="pg_catalog.regexp_split_to_array", ServerSideOnly=true)]
		public static object RegexpSplitToArray(string par6069, string par6070, string par6071)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacein

		[Sql.Function(Name="pg_catalog.regnamespacein", ServerSideOnly=true)]
		public static object Regnamespacein(object par6078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespaceout

		[Sql.Function(Name="pg_catalog.regnamespaceout", ServerSideOnly=true)]
		public static object Regnamespaceout(object par6080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacerecv

		[Sql.Function(Name="pg_catalog.regnamespacerecv", ServerSideOnly=true)]
		public static object Regnamespacerecv(object par6082)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacesend

		[Sql.Function(Name="pg_catalog.regnamespacesend", ServerSideOnly=true)]
		public static byte[] Regnamespacesend(object par6084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorin

		[Sql.Function(Name="pg_catalog.regoperatorin", ServerSideOnly=true)]
		public static object Regoperatorin(object par6086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorout

		[Sql.Function(Name="pg_catalog.regoperatorout", ServerSideOnly=true)]
		public static object Regoperatorout(object par6088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorrecv

		[Sql.Function(Name="pg_catalog.regoperatorrecv", ServerSideOnly=true)]
		public static object Regoperatorrecv(object par6090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorsend

		[Sql.Function(Name="pg_catalog.regoperatorsend", ServerSideOnly=true)]
		public static byte[] Regoperatorsend(object par6092)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperin

		[Sql.Function(Name="pg_catalog.regoperin", ServerSideOnly=true)]
		public static object Regoperin(object par6094)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperout

		[Sql.Function(Name="pg_catalog.regoperout", ServerSideOnly=true)]
		public static object Regoperout(object par6096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperrecv

		[Sql.Function(Name="pg_catalog.regoperrecv", ServerSideOnly=true)]
		public static object Regoperrecv(object par6098)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regopersend

		[Sql.Function(Name="pg_catalog.regopersend", ServerSideOnly=true)]
		public static byte[] Regopersend(object par6100)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedurein

		[Sql.Function(Name="pg_catalog.regprocedurein", ServerSideOnly=true)]
		public static object Regprocedurein(object par6102)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedureout

		[Sql.Function(Name="pg_catalog.regprocedureout", ServerSideOnly=true)]
		public static object Regprocedureout(object par6104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedurerecv

		[Sql.Function(Name="pg_catalog.regprocedurerecv", ServerSideOnly=true)]
		public static object Regprocedurerecv(object par6106)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regproceduresend

		[Sql.Function(Name="pg_catalog.regproceduresend", ServerSideOnly=true)]
		public static byte[] Regproceduresend(object par6108)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocin

		[Sql.Function(Name="pg_catalog.regprocin", ServerSideOnly=true)]
		public static object Regprocin(object par6110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocout

		[Sql.Function(Name="pg_catalog.regprocout", ServerSideOnly=true)]
		public static object Regprocout(object par6112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocrecv

		[Sql.Function(Name="pg_catalog.regprocrecv", ServerSideOnly=true)]
		public static object Regprocrecv(object par6114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocsend

		[Sql.Function(Name="pg_catalog.regprocsend", ServerSideOnly=true)]
		public static byte[] Regprocsend(object par6116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrAvgx

		[Sql.Function(Name="pg_catalog.regr_avgx", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrAvgx<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6118, Expression<Func<TSource, double?>> par6119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrAvgy

		[Sql.Function(Name="pg_catalog.regr_avgy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrAvgy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6121, Expression<Func<TSource, double?>> par6122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrCount

		[Sql.Function(Name="pg_catalog.regr_count", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static long? RegrCount<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6124, Expression<Func<TSource, double?>> par6125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrIntercept

		[Sql.Function(Name="pg_catalog.regr_intercept", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrIntercept<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6127, Expression<Func<TSource, double?>> par6128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrR2

		[Sql.Function(Name="pg_catalog.regr_r2", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrR2<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6130, Expression<Func<TSource, double?>> par6131)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSlope

		[Sql.Function(Name="pg_catalog.regr_slope", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSlope<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6133, Expression<Func<TSource, double?>> par6134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSxx

		[Sql.Function(Name="pg_catalog.regr_sxx", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSxx<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6136, Expression<Func<TSource, double?>> par6137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSxy

		[Sql.Function(Name="pg_catalog.regr_sxy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSxy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6139, Expression<Func<TSource, double?>> par6140)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSyy

		[Sql.Function(Name="pg_catalog.regr_syy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSyy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6142, Expression<Func<TSource, double?>> par6143)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolein

		[Sql.Function(Name="pg_catalog.regrolein", ServerSideOnly=true)]
		public static object Regrolein(object par6145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regroleout

		[Sql.Function(Name="pg_catalog.regroleout", ServerSideOnly=true)]
		public static object Regroleout(object par6147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolerecv

		[Sql.Function(Name="pg_catalog.regrolerecv", ServerSideOnly=true)]
		public static object Regrolerecv(object par6149)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolesend

		[Sql.Function(Name="pg_catalog.regrolesend", ServerSideOnly=true)]
		public static byte[] Regrolesend(object par6151)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypein

		[Sql.Function(Name="pg_catalog.regtypein", ServerSideOnly=true)]
		public static object Regtypein(object par6153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypeout

		[Sql.Function(Name="pg_catalog.regtypeout", ServerSideOnly=true)]
		public static object Regtypeout(object par6155)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtyperecv

		[Sql.Function(Name="pg_catalog.regtyperecv", ServerSideOnly=true)]
		public static object Regtyperecv(object par6157)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypesend

		[Sql.Function(Name="pg_catalog.regtypesend", ServerSideOnly=true)]
		public static byte[] Regtypesend(object par6159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Repeat

		[Sql.Function(Name="pg_catalog.repeat", ServerSideOnly=true)]
		public static string Repeat(string par6161, int? par6162)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Replace

		[Sql.Function(Name="pg_catalog.replace", ServerSideOnly=true)]
		public static string Replace(string par6164, string par6165, string par6166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reverse

		[Sql.Function(Name="pg_catalog.reverse", ServerSideOnly=true)]
		public static string Reverse(string par6168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Right

		[Sql.Function(Name="pg_catalog.right", ServerSideOnly=true)]
		public static string Right(string par6170, int? par6171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Round

		[Sql.Function(Name="pg_catalog.round", ServerSideOnly=true)]
		public static decimal? Round(decimal? par6178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowNumber

		[Sql.Function(Name="pg_catalog.row_number", ServerSideOnly=true)]
		public static long? RowNumber()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowSecurityActive

		[Sql.Function(Name="pg_catalog.row_security_active", ServerSideOnly=true)]
		public static bool? RowSecurityActive(string par6183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowToJson

		[Sql.Function(Name="pg_catalog.row_to_json", ServerSideOnly=true)]
		public static string RowToJson(object par6187, bool? par6188)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rpad

		[Sql.Function(Name="pg_catalog.rpad", ServerSideOnly=true)]
		public static string Rpad(string par6194, int? par6195)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rtrim

		[Sql.Function(Name="pg_catalog.rtrim", ServerSideOnly=true)]
		public static string Rtrim(string par6200)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SatisfiesHashPartition

		[Sql.Function(Name="pg_catalog.satisfies_hash_partition", ServerSideOnly=true)]
		public static bool? SatisfiesHashPartition(int? par6202, int? par6203, int? par6204, object par6205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargejoinsel

		[Sql.Function(Name="pg_catalog.scalargejoinsel", ServerSideOnly=true)]
		public static double? Scalargejoinsel(object par6207, int? par6208, object par6209, short? par6210, object par6211)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargesel

		[Sql.Function(Name="pg_catalog.scalargesel", ServerSideOnly=true)]
		public static double? Scalargesel(object par6213, int? par6214, object par6215, int? par6216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargtjoinsel

		[Sql.Function(Name="pg_catalog.scalargtjoinsel", ServerSideOnly=true)]
		public static double? Scalargtjoinsel(object par6218, int? par6219, object par6220, short? par6221, object par6222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargtsel

		[Sql.Function(Name="pg_catalog.scalargtsel", ServerSideOnly=true)]
		public static double? Scalargtsel(object par6224, int? par6225, object par6226, int? par6227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarlejoinsel

		[Sql.Function(Name="pg_catalog.scalarlejoinsel", ServerSideOnly=true)]
		public static double? Scalarlejoinsel(object par6229, int? par6230, object par6231, short? par6232, object par6233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarlesel

		[Sql.Function(Name="pg_catalog.scalarlesel", ServerSideOnly=true)]
		public static double? Scalarlesel(object par6235, int? par6236, object par6237, int? par6238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarltjoinsel

		[Sql.Function(Name="pg_catalog.scalarltjoinsel", ServerSideOnly=true)]
		public static double? Scalarltjoinsel(object par6240, int? par6241, object par6242, short? par6243, object par6244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarltsel

		[Sql.Function(Name="pg_catalog.scalarltsel", ServerSideOnly=true)]
		public static double? Scalarltsel(object par6246, int? par6247, object par6248, int? par6249)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scale

		[Sql.Function(Name="pg_catalog.scale", ServerSideOnly=true)]
		public static int? Scale(decimal? par6251)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXml

		[Sql.Function(Name="pg_catalog.schema_to_xml", ServerSideOnly=true)]
		public static string SchemaToXml(string schema, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.schema_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string SchemaToXmlAndXmlschema(string schema, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXmlschema

		[Sql.Function(Name="pg_catalog.schema_to_xmlschema", ServerSideOnly=true)]
		public static string SchemaToXmlschema(string schema, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SessionUser

		[Sql.Function(Name="pg_catalog.session_user", ServerSideOnly=true)]
		public static string SessionUser()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetBit

		[Sql.Function(Name="pg_catalog.set_bit", ServerSideOnly=true)]
		public static byte[] SetBit(byte[] par6261, int? par6262, int? par6263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetByte

		[Sql.Function(Name="pg_catalog.set_byte", ServerSideOnly=true)]
		public static byte[] SetByte(byte[] par6265, int? par6266, int? par6267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetConfig

		[Sql.Function(Name="pg_catalog.set_config", ServerSideOnly=true)]
		public static string SetConfig(string par6269, string par6270, bool? par6271)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetMasklen

		[Sql.Function(Name="pg_catalog.set_masklen", ServerSideOnly=true)]
		public static NpgsqlInet? SetMasklen(NpgsqlInet? par6276, int? par6277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setseed

		[Sql.Function(Name="pg_catalog.setseed", ServerSideOnly=true)]
		public static object Setseed(double? par6278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setval

		[Sql.Function(Name="pg_catalog.setval", ServerSideOnly=true)]
		public static long? Setval(object par6283, long? par6284, bool? par6285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setweight

		[Sql.Function(Name="pg_catalog.setweight", ServerSideOnly=true)]
		public static object Setweight(object par6291, object par6292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sha224

		[Sql.Function(Name="pg_catalog.sha224", ServerSideOnly=true)]
		public static byte[] Sha224(byte[] par6294)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sha256

		[Sql.Function(Name="pg_catalog.sha256", ServerSideOnly=true)]
		public static byte[] Sha256(byte[] par6296)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sha384

		[Sql.Function(Name="pg_catalog.sha384", ServerSideOnly=true)]
		public static byte[] Sha384(byte[] par6298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sha512

		[Sql.Function(Name="pg_catalog.sha512", ServerSideOnly=true)]
		public static byte[] Sha512(byte[] par6300)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShellIn

		[Sql.Function(Name="pg_catalog.shell_in", ServerSideOnly=true)]
		public static object ShellIn(object par6302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShellOut

		[Sql.Function(Name="pg_catalog.shell_out", ServerSideOnly=true)]
		public static object ShellOut(object par6304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShiftJis2004ToEucJis2004

		[Sql.Function(Name="pg_catalog.shift_jis_2004_to_euc_jis_2004", ServerSideOnly=true)]
		public static object ShiftJis2004ToEucJis2004(int? par6305, int? par6306, object par6307, object par6308, int? par6309)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShiftJis2004ToUtf8

		[Sql.Function(Name="pg_catalog.shift_jis_2004_to_utf8", ServerSideOnly=true)]
		public static object ShiftJis2004ToUtf8(int? par6310, int? par6311, object par6312, object par6313, int? par6314)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShobjDescription

		[Sql.Function(Name="pg_catalog.shobj_description", ServerSideOnly=true)]
		public static string ShobjDescription(int? par6316, string par6317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sign

		[Sql.Function(Name="pg_catalog.sign", ServerSideOnly=true)]
		public static double? Sign(double? par6321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SimilarEscape

		[Sql.Function(Name="pg_catalog.similar_escape", ServerSideOnly=true)]
		public static string SimilarEscape(string par6323, string par6324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sin

		[Sql.Function(Name="pg_catalog.sin", ServerSideOnly=true)]
		public static double? Sin(double? par6326)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sind

		[Sql.Function(Name="pg_catalog.sind", ServerSideOnly=true)]
		public static double? Sind(double? par6328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sinh

		[Sql.Function(Name="pg_catalog.sinh", ServerSideOnly=true)]
		public static double? Sinh(double? par6330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToEucJp

		[Sql.Function(Name="pg_catalog.sjis_to_euc_jp", ServerSideOnly=true)]
		public static object SjisToEucJp(int? par6331, int? par6332, object par6333, object par6334, int? par6335)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToMic

		[Sql.Function(Name="pg_catalog.sjis_to_mic", ServerSideOnly=true)]
		public static object SjisToMic(int? par6336, int? par6337, object par6338, object par6339, int? par6340)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToUtf8

		[Sql.Function(Name="pg_catalog.sjis_to_utf8", ServerSideOnly=true)]
		public static object SjisToUtf8(int? par6341, int? par6342, object par6343, object par6344, int? par6345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Slope

		[Sql.Function(Name="pg_catalog.slope", ServerSideOnly=true)]
		public static double? Slope(NpgsqlPoint? par6347, NpgsqlPoint? par6348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBboxQuadConfig

		[Sql.Function(Name="pg_catalog.spg_bbox_quad_config", ServerSideOnly=true)]
		public static object SpgBboxQuadConfig(object par6349, object par6350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadChoose

		[Sql.Function(Name="pg_catalog.spg_box_quad_choose", ServerSideOnly=true)]
		public static object SpgBoxQuadChoose(object par6351, object par6352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadConfig

		[Sql.Function(Name="pg_catalog.spg_box_quad_config", ServerSideOnly=true)]
		public static object SpgBoxQuadConfig(object par6353, object par6354)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_box_quad_inner_consistent", ServerSideOnly=true)]
		public static object SpgBoxQuadInnerConsistent(object par6355, object par6356)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_box_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgBoxQuadLeafConsistent(object par6358, object par6359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_box_quad_picksplit", ServerSideOnly=true)]
		public static object SpgBoxQuadPicksplit(object par6360, object par6361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdChoose

		[Sql.Function(Name="pg_catalog.spg_kd_choose", ServerSideOnly=true)]
		public static object SpgKdChoose(object par6362, object par6363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdConfig

		[Sql.Function(Name="pg_catalog.spg_kd_config", ServerSideOnly=true)]
		public static object SpgKdConfig(object par6364, object par6365)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_kd_inner_consistent", ServerSideOnly=true)]
		public static object SpgKdInnerConsistent(object par6366, object par6367)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdPicksplit

		[Sql.Function(Name="pg_catalog.spg_kd_picksplit", ServerSideOnly=true)]
		public static object SpgKdPicksplit(object par6368, object par6369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgPolyQuadCompress

		[Sql.Function(Name="pg_catalog.spg_poly_quad_compress", ServerSideOnly=true)]
		public static NpgsqlBox? SpgPolyQuadCompress(NpgsqlPolygon? par6371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadChoose

		[Sql.Function(Name="pg_catalog.spg_quad_choose", ServerSideOnly=true)]
		public static object SpgQuadChoose(object par6372, object par6373)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadConfig

		[Sql.Function(Name="pg_catalog.spg_quad_config", ServerSideOnly=true)]
		public static object SpgQuadConfig(object par6374, object par6375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_quad_inner_consistent", ServerSideOnly=true)]
		public static object SpgQuadInnerConsistent(object par6376, object par6377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgQuadLeafConsistent(object par6379, object par6380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_quad_picksplit", ServerSideOnly=true)]
		public static object SpgQuadPicksplit(object par6381, object par6382)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadChoose

		[Sql.Function(Name="pg_catalog.spg_range_quad_choose", ServerSideOnly=true)]
		public static object SpgRangeQuadChoose(object par6383, object par6384)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadConfig

		[Sql.Function(Name="pg_catalog.spg_range_quad_config", ServerSideOnly=true)]
		public static object SpgRangeQuadConfig(object par6385, object par6386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_range_quad_inner_consistent", ServerSideOnly=true)]
		public static object SpgRangeQuadInnerConsistent(object par6387, object par6388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_range_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgRangeQuadLeafConsistent(object par6390, object par6391)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_range_quad_picksplit", ServerSideOnly=true)]
		public static object SpgRangeQuadPicksplit(object par6392, object par6393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextChoose

		[Sql.Function(Name="pg_catalog.spg_text_choose", ServerSideOnly=true)]
		public static object SpgTextChoose(object par6394, object par6395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextConfig

		[Sql.Function(Name="pg_catalog.spg_text_config", ServerSideOnly=true)]
		public static object SpgTextConfig(object par6396, object par6397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_text_inner_consistent", ServerSideOnly=true)]
		public static object SpgTextInnerConsistent(object par6398, object par6399)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_text_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgTextLeafConsistent(object par6401, object par6402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextPicksplit

		[Sql.Function(Name="pg_catalog.spg_text_picksplit", ServerSideOnly=true)]
		public static object SpgTextPicksplit(object par6403, object par6404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spghandler

		[Sql.Function(Name="pg_catalog.spghandler", ServerSideOnly=true)]
		public static object Spghandler(object par6406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SplitPart

		[Sql.Function(Name="pg_catalog.split_part", ServerSideOnly=true)]
		public static string SplitPart(string par6408, string par6409, int? par6410)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sqrt

		[Sql.Function(Name="pg_catalog.sqrt", ServerSideOnly=true)]
		public static decimal? Sqrt(decimal? par6414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StartsWith

		[Sql.Function(Name="pg_catalog.starts_with", ServerSideOnly=true)]
		public static bool? StartsWith(string par6416, string par6417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StatementTimestamp

		[Sql.Function(Name="pg_catalog.statement_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? StatementTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Stddev

		[Sql.Function(Name="pg_catalog.stddev", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Stddev<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StddevPop

		[Sql.Function(Name="pg_catalog.stddev_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? StddevPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StddevSamp

		[Sql.Function(Name="pg_catalog.stddev_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? StddevSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6454)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAgg

		[Sql.Function(Name="pg_catalog.string_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static byte[] StringAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, byte[]>> par6459, Expression<Func<TSource, byte[]>> par6460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAggFinalfn

		[Sql.Function(Name="pg_catalog.string_agg_finalfn", ServerSideOnly=true)]
		public static string StringAggFinalfn(object par6462)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAggTransfn

		[Sql.Function(Name="pg_catalog.string_agg_transfn", ServerSideOnly=true)]
		public static object StringAggTransfn(object par6464, string par6465, string par6466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringToArray

		[Sql.Function(Name="pg_catalog.string_to_array", ServerSideOnly=true)]
		public static object StringToArray(string par6472, string par6473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Strip

		[Sql.Function(Name="pg_catalog.strip", ServerSideOnly=true)]
		public static object Strip(object par6475)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Strpos

		[Sql.Function(Name="pg_catalog.strpos", ServerSideOnly=true)]
		public static int? Strpos(string par6477, string par6478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Substr

		[Sql.Function(Name="pg_catalog.substr", ServerSideOnly=true)]
		public static string Substr(string par6491, int? par6492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Substring

		[Sql.Function(Name="pg_catalog.substring", ServerSideOnly=true)]
		public static string Substring(string par6519, int? par6520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sum

		[Sql.Function(Name="pg_catalog.sum", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Sum<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SuppressRedundantUpdatesTrigger

		[Sql.Function(Name="pg_catalog.suppress_redundant_updates_trigger", ServerSideOnly=true)]
		public static object SuppressRedundantUpdatesTrigger()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region System

		[Sql.Function(Name="pg_catalog.system", ServerSideOnly=true)]
		public static object System(object par6539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableAmHandlerIn

		[Sql.Function(Name="pg_catalog.table_am_handler_in", ServerSideOnly=true)]
		public static object TableAmHandlerIn(object par6541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableAmHandlerOut

		[Sql.Function(Name="pg_catalog.table_am_handler_out", ServerSideOnly=true)]
		public static object TableAmHandlerOut(object par6543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXml

		[Sql.Function(Name="pg_catalog.table_to_xml", ServerSideOnly=true)]
		public static string TableToXml(object tbl, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.table_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string TableToXmlAndXmlschema(object tbl, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXmlschema

		[Sql.Function(Name="pg_catalog.table_to_xmlschema", ServerSideOnly=true)]
		public static string TableToXmlschema(object tbl, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tan

		[Sql.Function(Name="pg_catalog.tan", ServerSideOnly=true)]
		public static double? Tan(double? par6548)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tand

		[Sql.Function(Name="pg_catalog.tand", ServerSideOnly=true)]
		public static double? Tand(double? par6550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tanh

		[Sql.Function(Name="pg_catalog.tanh", ServerSideOnly=true)]
		public static double? Tanh(double? par6552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Text

		[Sql.Function(Name="pg_catalog.text", ServerSideOnly=true)]
		public static string Text(object par6564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextGe

		[Sql.Function(Name="pg_catalog.text_ge", ServerSideOnly=true)]
		public static bool? TextGe(string par6566, string par6567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextGt

		[Sql.Function(Name="pg_catalog.text_gt", ServerSideOnly=true)]
		public static bool? TextGt(string par6569, string par6570)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLarger

		[Sql.Function(Name="pg_catalog.text_larger", ServerSideOnly=true)]
		public static string TextLarger(string par6572, string par6573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLe

		[Sql.Function(Name="pg_catalog.text_le", ServerSideOnly=true)]
		public static bool? TextLe(string par6575, string par6576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLt

		[Sql.Function(Name="pg_catalog.text_lt", ServerSideOnly=true)]
		public static bool? TextLt(string par6578, string par6579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternGe

		[Sql.Function(Name="pg_catalog.text_pattern_ge", ServerSideOnly=true)]
		public static bool? TextPatternGe(string par6581, string par6582)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternGt

		[Sql.Function(Name="pg_catalog.text_pattern_gt", ServerSideOnly=true)]
		public static bool? TextPatternGt(string par6584, string par6585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternLe

		[Sql.Function(Name="pg_catalog.text_pattern_le", ServerSideOnly=true)]
		public static bool? TextPatternLe(string par6587, string par6588)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternLt

		[Sql.Function(Name="pg_catalog.text_pattern_lt", ServerSideOnly=true)]
		public static bool? TextPatternLt(string par6590, string par6591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextSmaller

		[Sql.Function(Name="pg_catalog.text_smaller", ServerSideOnly=true)]
		public static string TextSmaller(string par6593, string par6594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textanycat

		[Sql.Function(Name="pg_catalog.textanycat", ServerSideOnly=true)]
		public static string Textanycat(string par6596, object par6597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textcat

		[Sql.Function(Name="pg_catalog.textcat", ServerSideOnly=true)]
		public static string Textcat(string par6599, string par6600)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texteq

		[Sql.Function(Name="pg_catalog.texteq", ServerSideOnly=true)]
		public static bool? Texteq(string par6602, string par6603)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texteqname

		[Sql.Function(Name="pg_catalog.texteqname", ServerSideOnly=true)]
		public static bool? Texteqname(string par6605, string par6606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textgename

		[Sql.Function(Name="pg_catalog.textgename", ServerSideOnly=true)]
		public static bool? Textgename(string par6608, string par6609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textgtname

		[Sql.Function(Name="pg_catalog.textgtname", ServerSideOnly=true)]
		public static bool? Textgtname(string par6611, string par6612)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticlike

		[Sql.Function(Name="pg_catalog.texticlike", ServerSideOnly=true)]
		public static bool? Texticlike(string par6614, string par6615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TexticlikeSupport

		[Sql.Function(Name="pg_catalog.texticlike_support", ServerSideOnly=true)]
		public static object TexticlikeSupport(object par6617)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticnlike

		[Sql.Function(Name="pg_catalog.texticnlike", ServerSideOnly=true)]
		public static bool? Texticnlike(string par6619, string par6620)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticregexeq

		[Sql.Function(Name="pg_catalog.texticregexeq", ServerSideOnly=true)]
		public static bool? Texticregexeq(string par6622, string par6623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TexticregexeqSupport

		[Sql.Function(Name="pg_catalog.texticregexeq_support", ServerSideOnly=true)]
		public static object TexticregexeqSupport(object par6625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticregexne

		[Sql.Function(Name="pg_catalog.texticregexne", ServerSideOnly=true)]
		public static bool? Texticregexne(string par6627, string par6628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textin

		[Sql.Function(Name="pg_catalog.textin", ServerSideOnly=true)]
		public static string Textin(object par6630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlen

		[Sql.Function(Name="pg_catalog.textlen", ServerSideOnly=true)]
		public static int? Textlen(string par6632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlename

		[Sql.Function(Name="pg_catalog.textlename", ServerSideOnly=true)]
		public static bool? Textlename(string par6634, string par6635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlike

		[Sql.Function(Name="pg_catalog.textlike", ServerSideOnly=true)]
		public static bool? Textlike(string par6637, string par6638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextlikeSupport

		[Sql.Function(Name="pg_catalog.textlike_support", ServerSideOnly=true)]
		public static object TextlikeSupport(object par6640)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textltname

		[Sql.Function(Name="pg_catalog.textltname", ServerSideOnly=true)]
		public static bool? Textltname(string par6642, string par6643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textne

		[Sql.Function(Name="pg_catalog.textne", ServerSideOnly=true)]
		public static bool? Textne(string par6645, string par6646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textnename

		[Sql.Function(Name="pg_catalog.textnename", ServerSideOnly=true)]
		public static bool? Textnename(string par6648, string par6649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textnlike

		[Sql.Function(Name="pg_catalog.textnlike", ServerSideOnly=true)]
		public static bool? Textnlike(string par6651, string par6652)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textout

		[Sql.Function(Name="pg_catalog.textout", ServerSideOnly=true)]
		public static object Textout(string par6654)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textrecv

		[Sql.Function(Name="pg_catalog.textrecv", ServerSideOnly=true)]
		public static string Textrecv(object par6656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textregexeq

		[Sql.Function(Name="pg_catalog.textregexeq", ServerSideOnly=true)]
		public static bool? Textregexeq(string par6658, string par6659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextregexeqSupport

		[Sql.Function(Name="pg_catalog.textregexeq_support", ServerSideOnly=true)]
		public static object TextregexeqSupport(object par6661)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textregexne

		[Sql.Function(Name="pg_catalog.textregexne", ServerSideOnly=true)]
		public static bool? Textregexne(string par6663, string par6664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textsend

		[Sql.Function(Name="pg_catalog.textsend", ServerSideOnly=true)]
		public static byte[] Textsend(string par6666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ThesaurusInit

		[Sql.Function(Name="pg_catalog.thesaurus_init", ServerSideOnly=true)]
		public static object ThesaurusInit(object par6668)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ThesaurusLexize

		[Sql.Function(Name="pg_catalog.thesaurus_lexize", ServerSideOnly=true)]
		public static object ThesaurusLexize(object par6670, object par6671, object par6672, object par6673)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tideq

		[Sql.Function(Name="pg_catalog.tideq", ServerSideOnly=true)]
		public static bool? Tideq(object par6675, object par6676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidge

		[Sql.Function(Name="pg_catalog.tidge", ServerSideOnly=true)]
		public static bool? Tidge(object par6678, object par6679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidgt

		[Sql.Function(Name="pg_catalog.tidgt", ServerSideOnly=true)]
		public static bool? Tidgt(object par6681, object par6682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidin

		[Sql.Function(Name="pg_catalog.tidin", ServerSideOnly=true)]
		public static object Tidin(object par6684)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidlarger

		[Sql.Function(Name="pg_catalog.tidlarger", ServerSideOnly=true)]
		public static object Tidlarger(object par6686, object par6687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidle

		[Sql.Function(Name="pg_catalog.tidle", ServerSideOnly=true)]
		public static bool? Tidle(object par6689, object par6690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidlt

		[Sql.Function(Name="pg_catalog.tidlt", ServerSideOnly=true)]
		public static bool? Tidlt(object par6692, object par6693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidne

		[Sql.Function(Name="pg_catalog.tidne", ServerSideOnly=true)]
		public static bool? Tidne(object par6695, object par6696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidout

		[Sql.Function(Name="pg_catalog.tidout", ServerSideOnly=true)]
		public static object Tidout(object par6698)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidrecv

		[Sql.Function(Name="pg_catalog.tidrecv", ServerSideOnly=true)]
		public static object Tidrecv(object par6700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidsend

		[Sql.Function(Name="pg_catalog.tidsend", ServerSideOnly=true)]
		public static byte[] Tidsend(object par6702)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidsmaller

		[Sql.Function(Name="pg_catalog.tidsmaller", ServerSideOnly=true)]
		public static object Tidsmaller(object par6704, object par6705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Time

		[Sql.Function(Name="pg_catalog.time", ServerSideOnly=true)]
		public static TimeSpan? Time(DateTimeOffset? par6716)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeCmp

		[Sql.Function(Name="pg_catalog.time_cmp", ServerSideOnly=true)]
		public static int? TimeCmp(TimeSpan? par6718, TimeSpan? par6719)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeEq

		[Sql.Function(Name="pg_catalog.time_eq", ServerSideOnly=true)]
		public static bool? TimeEq(TimeSpan? par6721, TimeSpan? par6722)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeGe

		[Sql.Function(Name="pg_catalog.time_ge", ServerSideOnly=true)]
		public static bool? TimeGe(TimeSpan? par6724, TimeSpan? par6725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeGt

		[Sql.Function(Name="pg_catalog.time_gt", ServerSideOnly=true)]
		public static bool? TimeGt(TimeSpan? par6727, TimeSpan? par6728)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeHash

		[Sql.Function(Name="pg_catalog.time_hash", ServerSideOnly=true)]
		public static int? TimeHash(TimeSpan? par6730)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeHashExtended

		[Sql.Function(Name="pg_catalog.time_hash_extended", ServerSideOnly=true)]
		public static long? TimeHashExtended(TimeSpan? par6732, long? par6733)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeIn

		[Sql.Function(Name="pg_catalog.time_in", ServerSideOnly=true)]
		public static TimeSpan? TimeIn(object par6735, int? par6736, int? par6737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLarger

		[Sql.Function(Name="pg_catalog.time_larger", ServerSideOnly=true)]
		public static TimeSpan? TimeLarger(TimeSpan? par6739, TimeSpan? par6740)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLe

		[Sql.Function(Name="pg_catalog.time_le", ServerSideOnly=true)]
		public static bool? TimeLe(TimeSpan? par6742, TimeSpan? par6743)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLt

		[Sql.Function(Name="pg_catalog.time_lt", ServerSideOnly=true)]
		public static bool? TimeLt(TimeSpan? par6745, TimeSpan? par6746)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeMiInterval

		[Sql.Function(Name="pg_catalog.time_mi_interval", ServerSideOnly=true)]
		public static TimeSpan? TimeMiInterval(TimeSpan? par6748, NpgsqlTimeSpan? par6749)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeMiTime

		[Sql.Function(Name="pg_catalog.time_mi_time", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimeMiTime(TimeSpan? par6751, TimeSpan? par6752)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeNe

		[Sql.Function(Name="pg_catalog.time_ne", ServerSideOnly=true)]
		public static bool? TimeNe(TimeSpan? par6754, TimeSpan? par6755)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeOut

		[Sql.Function(Name="pg_catalog.time_out", ServerSideOnly=true)]
		public static object TimeOut(TimeSpan? par6757)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimePlInterval

		[Sql.Function(Name="pg_catalog.time_pl_interval", ServerSideOnly=true)]
		public static TimeSpan? TimePlInterval(TimeSpan? par6759, NpgsqlTimeSpan? par6760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeRecv

		[Sql.Function(Name="pg_catalog.time_recv", ServerSideOnly=true)]
		public static TimeSpan? TimeRecv(object par6762, int? par6763, int? par6764)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSend

		[Sql.Function(Name="pg_catalog.time_send", ServerSideOnly=true)]
		public static byte[] TimeSend(TimeSpan? par6766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSmaller

		[Sql.Function(Name="pg_catalog.time_smaller", ServerSideOnly=true)]
		public static TimeSpan? TimeSmaller(TimeSpan? par6768, TimeSpan? par6769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSupport

		[Sql.Function(Name="pg_catalog.time_support", ServerSideOnly=true)]
		public static object TimeSupport(object par6771)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimedatePl

		[Sql.Function(Name="pg_catalog.timedate_pl", ServerSideOnly=true)]
		public static DateTime? TimedatePl(TimeSpan? par6773, NpgsqlDate? par6774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timeofday

		[Sql.Function(Name="pg_catalog.timeofday", ServerSideOnly=true)]
		public static string Timeofday()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamp

		[Sql.Function(Name="pg_catalog.timestamp", ServerSideOnly=true)]
		public static DateTime? Timestamp(DateTimeOffset? par6785)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmp

		[Sql.Function(Name="pg_catalog.timestamp_cmp", ServerSideOnly=true)]
		public static int? TimestampCmp(DateTime? par6787, DateTime? par6788)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmpDate

		[Sql.Function(Name="pg_catalog.timestamp_cmp_date", ServerSideOnly=true)]
		public static int? TimestampCmpDate(DateTime? par6790, NpgsqlDate? par6791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmpTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_cmp_timestamptz", ServerSideOnly=true)]
		public static int? TimestampCmpTimestamptz(DateTime? par6793, DateTimeOffset? par6794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEq

		[Sql.Function(Name="pg_catalog.timestamp_eq", ServerSideOnly=true)]
		public static bool? TimestampEq(DateTime? par6796, DateTime? par6797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEqDate

		[Sql.Function(Name="pg_catalog.timestamp_eq_date", ServerSideOnly=true)]
		public static bool? TimestampEqDate(DateTime? par6799, NpgsqlDate? par6800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEqTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_eq_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampEqTimestamptz(DateTime? par6802, DateTimeOffset? par6803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGe

		[Sql.Function(Name="pg_catalog.timestamp_ge", ServerSideOnly=true)]
		public static bool? TimestampGe(DateTime? par6805, DateTime? par6806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGeDate

		[Sql.Function(Name="pg_catalog.timestamp_ge_date", ServerSideOnly=true)]
		public static bool? TimestampGeDate(DateTime? par6808, NpgsqlDate? par6809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_ge_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampGeTimestamptz(DateTime? par6811, DateTimeOffset? par6812)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGt

		[Sql.Function(Name="pg_catalog.timestamp_gt", ServerSideOnly=true)]
		public static bool? TimestampGt(DateTime? par6814, DateTime? par6815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGtDate

		[Sql.Function(Name="pg_catalog.timestamp_gt_date", ServerSideOnly=true)]
		public static bool? TimestampGtDate(DateTime? par6817, NpgsqlDate? par6818)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGtTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_gt_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampGtTimestamptz(DateTime? par6820, DateTimeOffset? par6821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampHash

		[Sql.Function(Name="pg_catalog.timestamp_hash", ServerSideOnly=true)]
		public static int? TimestampHash(DateTime? par6823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampHashExtended

		[Sql.Function(Name="pg_catalog.timestamp_hash_extended", ServerSideOnly=true)]
		public static long? TimestampHashExtended(DateTime? par6825, long? par6826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampIn

		[Sql.Function(Name="pg_catalog.timestamp_in", ServerSideOnly=true)]
		public static DateTime? TimestampIn(object par6828, int? par6829, int? par6830)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLarger

		[Sql.Function(Name="pg_catalog.timestamp_larger", ServerSideOnly=true)]
		public static DateTime? TimestampLarger(DateTime? par6832, DateTime? par6833)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLe

		[Sql.Function(Name="pg_catalog.timestamp_le", ServerSideOnly=true)]
		public static bool? TimestampLe(DateTime? par6835, DateTime? par6836)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLeDate

		[Sql.Function(Name="pg_catalog.timestamp_le_date", ServerSideOnly=true)]
		public static bool? TimestampLeDate(DateTime? par6838, NpgsqlDate? par6839)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_le_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampLeTimestamptz(DateTime? par6841, DateTimeOffset? par6842)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLt

		[Sql.Function(Name="pg_catalog.timestamp_lt", ServerSideOnly=true)]
		public static bool? TimestampLt(DateTime? par6844, DateTime? par6845)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLtDate

		[Sql.Function(Name="pg_catalog.timestamp_lt_date", ServerSideOnly=true)]
		public static bool? TimestampLtDate(DateTime? par6847, NpgsqlDate? par6848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLtTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_lt_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampLtTimestamptz(DateTime? par6850, DateTimeOffset? par6851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampMi

		[Sql.Function(Name="pg_catalog.timestamp_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimestampMi(DateTime? par6853, DateTime? par6854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampMiInterval

		[Sql.Function(Name="pg_catalog.timestamp_mi_interval", ServerSideOnly=true)]
		public static DateTime? TimestampMiInterval(DateTime? par6856, NpgsqlTimeSpan? par6857)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNe

		[Sql.Function(Name="pg_catalog.timestamp_ne", ServerSideOnly=true)]
		public static bool? TimestampNe(DateTime? par6859, DateTime? par6860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNeDate

		[Sql.Function(Name="pg_catalog.timestamp_ne_date", ServerSideOnly=true)]
		public static bool? TimestampNeDate(DateTime? par6862, NpgsqlDate? par6863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_ne_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampNeTimestamptz(DateTime? par6865, DateTimeOffset? par6866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampOut

		[Sql.Function(Name="pg_catalog.timestamp_out", ServerSideOnly=true)]
		public static object TimestampOut(DateTime? par6868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampPlInterval

		[Sql.Function(Name="pg_catalog.timestamp_pl_interval", ServerSideOnly=true)]
		public static DateTime? TimestampPlInterval(DateTime? par6870, NpgsqlTimeSpan? par6871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampRecv

		[Sql.Function(Name="pg_catalog.timestamp_recv", ServerSideOnly=true)]
		public static DateTime? TimestampRecv(object par6873, int? par6874, int? par6875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSend

		[Sql.Function(Name="pg_catalog.timestamp_send", ServerSideOnly=true)]
		public static byte[] TimestampSend(DateTime? par6877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSmaller

		[Sql.Function(Name="pg_catalog.timestamp_smaller", ServerSideOnly=true)]
		public static DateTime? TimestampSmaller(DateTime? par6879, DateTime? par6880)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSortsupport

		[Sql.Function(Name="pg_catalog.timestamp_sortsupport", ServerSideOnly=true)]
		public static object TimestampSortsupport(object par6881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSupport

		[Sql.Function(Name="pg_catalog.timestamp_support", ServerSideOnly=true)]
		public static object TimestampSupport(object par6883)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptypmodin

		[Sql.Function(Name="pg_catalog.timestamptypmodin", ServerSideOnly=true)]
		public static int? Timestamptypmodin(object par6885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptypmodout

		[Sql.Function(Name="pg_catalog.timestamptypmodout", ServerSideOnly=true)]
		public static object Timestamptypmodout(int? par6887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptz

		[Sql.Function(Name="pg_catalog.timestamptz", ServerSideOnly=true)]
		public static DateTimeOffset? Timestamptz(DateTime? par6900)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmp

		[Sql.Function(Name="pg_catalog.timestamptz_cmp", ServerSideOnly=true)]
		public static int? TimestamptzCmp(DateTimeOffset? par6902, DateTimeOffset? par6903)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmpDate

		[Sql.Function(Name="pg_catalog.timestamptz_cmp_date", ServerSideOnly=true)]
		public static int? TimestamptzCmpDate(DateTimeOffset? par6905, NpgsqlDate? par6906)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmpTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_cmp_timestamp", ServerSideOnly=true)]
		public static int? TimestamptzCmpTimestamp(DateTimeOffset? par6908, DateTime? par6909)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEq

		[Sql.Function(Name="pg_catalog.timestamptz_eq", ServerSideOnly=true)]
		public static bool? TimestamptzEq(DateTimeOffset? par6911, DateTimeOffset? par6912)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEqDate

		[Sql.Function(Name="pg_catalog.timestamptz_eq_date", ServerSideOnly=true)]
		public static bool? TimestamptzEqDate(DateTimeOffset? par6914, NpgsqlDate? par6915)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEqTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_eq_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzEqTimestamp(DateTimeOffset? par6917, DateTime? par6918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGe

		[Sql.Function(Name="pg_catalog.timestamptz_ge", ServerSideOnly=true)]
		public static bool? TimestamptzGe(DateTimeOffset? par6920, DateTimeOffset? par6921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGeDate

		[Sql.Function(Name="pg_catalog.timestamptz_ge_date", ServerSideOnly=true)]
		public static bool? TimestamptzGeDate(DateTimeOffset? par6923, NpgsqlDate? par6924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_ge_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzGeTimestamp(DateTimeOffset? par6926, DateTime? par6927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGt

		[Sql.Function(Name="pg_catalog.timestamptz_gt", ServerSideOnly=true)]
		public static bool? TimestamptzGt(DateTimeOffset? par6929, DateTimeOffset? par6930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGtDate

		[Sql.Function(Name="pg_catalog.timestamptz_gt_date", ServerSideOnly=true)]
		public static bool? TimestamptzGtDate(DateTimeOffset? par6932, NpgsqlDate? par6933)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGtTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_gt_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzGtTimestamp(DateTimeOffset? par6935, DateTime? par6936)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzIn

		[Sql.Function(Name="pg_catalog.timestamptz_in", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzIn(object par6938, int? par6939, int? par6940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLarger

		[Sql.Function(Name="pg_catalog.timestamptz_larger", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzLarger(DateTimeOffset? par6942, DateTimeOffset? par6943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLe

		[Sql.Function(Name="pg_catalog.timestamptz_le", ServerSideOnly=true)]
		public static bool? TimestamptzLe(DateTimeOffset? par6945, DateTimeOffset? par6946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLeDate

		[Sql.Function(Name="pg_catalog.timestamptz_le_date", ServerSideOnly=true)]
		public static bool? TimestamptzLeDate(DateTimeOffset? par6948, NpgsqlDate? par6949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_le_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzLeTimestamp(DateTimeOffset? par6951, DateTime? par6952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLt

		[Sql.Function(Name="pg_catalog.timestamptz_lt", ServerSideOnly=true)]
		public static bool? TimestamptzLt(DateTimeOffset? par6954, DateTimeOffset? par6955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLtDate

		[Sql.Function(Name="pg_catalog.timestamptz_lt_date", ServerSideOnly=true)]
		public static bool? TimestamptzLtDate(DateTimeOffset? par6957, NpgsqlDate? par6958)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLtTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_lt_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzLtTimestamp(DateTimeOffset? par6960, DateTime? par6961)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzMi

		[Sql.Function(Name="pg_catalog.timestamptz_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimestamptzMi(DateTimeOffset? par6963, DateTimeOffset? par6964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzMiInterval

		[Sql.Function(Name="pg_catalog.timestamptz_mi_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzMiInterval(DateTimeOffset? par6966, NpgsqlTimeSpan? par6967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNe

		[Sql.Function(Name="pg_catalog.timestamptz_ne", ServerSideOnly=true)]
		public static bool? TimestamptzNe(DateTimeOffset? par6969, DateTimeOffset? par6970)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNeDate

		[Sql.Function(Name="pg_catalog.timestamptz_ne_date", ServerSideOnly=true)]
		public static bool? TimestamptzNeDate(DateTimeOffset? par6972, NpgsqlDate? par6973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_ne_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzNeTimestamp(DateTimeOffset? par6975, DateTime? par6976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzOut

		[Sql.Function(Name="pg_catalog.timestamptz_out", ServerSideOnly=true)]
		public static object TimestamptzOut(DateTimeOffset? par6978)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzPlInterval

		[Sql.Function(Name="pg_catalog.timestamptz_pl_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzPlInterval(DateTimeOffset? par6980, NpgsqlTimeSpan? par6981)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzRecv

		[Sql.Function(Name="pg_catalog.timestamptz_recv", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzRecv(object par6983, int? par6984, int? par6985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzSend

		[Sql.Function(Name="pg_catalog.timestamptz_send", ServerSideOnly=true)]
		public static byte[] TimestamptzSend(DateTimeOffset? par6987)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzSmaller

		[Sql.Function(Name="pg_catalog.timestamptz_smaller", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzSmaller(DateTimeOffset? par6989, DateTimeOffset? par6990)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptztypmodin

		[Sql.Function(Name="pg_catalog.timestamptztypmodin", ServerSideOnly=true)]
		public static int? Timestamptztypmodin(object par6992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptztypmodout

		[Sql.Function(Name="pg_catalog.timestamptztypmodout", ServerSideOnly=true)]
		public static object Timestamptztypmodout(int? par6994)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetypmodin

		[Sql.Function(Name="pg_catalog.timetypmodin", ServerSideOnly=true)]
		public static int? Timetypmodin(object par6996)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetypmodout

		[Sql.Function(Name="pg_catalog.timetypmodout", ServerSideOnly=true)]
		public static object Timetypmodout(int? par6998)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetz

		[Sql.Function(Name="pg_catalog.timetz", ServerSideOnly=true)]
		public static DateTimeOffset? Timetz(TimeSpan? par7005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzCmp

		[Sql.Function(Name="pg_catalog.timetz_cmp", ServerSideOnly=true)]
		public static int? TimetzCmp(DateTimeOffset? par7007, DateTimeOffset? par7008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzEq

		[Sql.Function(Name="pg_catalog.timetz_eq", ServerSideOnly=true)]
		public static bool? TimetzEq(DateTimeOffset? par7010, DateTimeOffset? par7011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzGe

		[Sql.Function(Name="pg_catalog.timetz_ge", ServerSideOnly=true)]
		public static bool? TimetzGe(DateTimeOffset? par7013, DateTimeOffset? par7014)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzGt

		[Sql.Function(Name="pg_catalog.timetz_gt", ServerSideOnly=true)]
		public static bool? TimetzGt(DateTimeOffset? par7016, DateTimeOffset? par7017)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzHash

		[Sql.Function(Name="pg_catalog.timetz_hash", ServerSideOnly=true)]
		public static int? TimetzHash(DateTimeOffset? par7019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzHashExtended

		[Sql.Function(Name="pg_catalog.timetz_hash_extended", ServerSideOnly=true)]
		public static long? TimetzHashExtended(DateTimeOffset? par7021, long? par7022)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzIn

		[Sql.Function(Name="pg_catalog.timetz_in", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzIn(object par7024, int? par7025, int? par7026)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLarger

		[Sql.Function(Name="pg_catalog.timetz_larger", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzLarger(DateTimeOffset? par7028, DateTimeOffset? par7029)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLe

		[Sql.Function(Name="pg_catalog.timetz_le", ServerSideOnly=true)]
		public static bool? TimetzLe(DateTimeOffset? par7031, DateTimeOffset? par7032)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLt

		[Sql.Function(Name="pg_catalog.timetz_lt", ServerSideOnly=true)]
		public static bool? TimetzLt(DateTimeOffset? par7034, DateTimeOffset? par7035)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzMiInterval

		[Sql.Function(Name="pg_catalog.timetz_mi_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzMiInterval(DateTimeOffset? par7037, NpgsqlTimeSpan? par7038)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzNe

		[Sql.Function(Name="pg_catalog.timetz_ne", ServerSideOnly=true)]
		public static bool? TimetzNe(DateTimeOffset? par7040, DateTimeOffset? par7041)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzOut

		[Sql.Function(Name="pg_catalog.timetz_out", ServerSideOnly=true)]
		public static object TimetzOut(DateTimeOffset? par7043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzPlInterval

		[Sql.Function(Name="pg_catalog.timetz_pl_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzPlInterval(DateTimeOffset? par7045, NpgsqlTimeSpan? par7046)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzRecv

		[Sql.Function(Name="pg_catalog.timetz_recv", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzRecv(object par7048, int? par7049, int? par7050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzSend

		[Sql.Function(Name="pg_catalog.timetz_send", ServerSideOnly=true)]
		public static byte[] TimetzSend(DateTimeOffset? par7052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzSmaller

		[Sql.Function(Name="pg_catalog.timetz_smaller", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzSmaller(DateTimeOffset? par7054, DateTimeOffset? par7055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzdatePl

		[Sql.Function(Name="pg_catalog.timetzdate_pl", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzdatePl(DateTimeOffset? par7057, NpgsqlDate? par7058)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetztypmodin

		[Sql.Function(Name="pg_catalog.timetztypmodin", ServerSideOnly=true)]
		public static int? Timetztypmodin(object par7060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetztypmodout

		[Sql.Function(Name="pg_catalog.timetztypmodout", ServerSideOnly=true)]
		public static object Timetztypmodout(int? par7062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timezone

		[Sql.Function(Name="pg_catalog.timezone", ServerSideOnly=true)]
		public static DateTimeOffset? Timezone(NpgsqlTimeSpan? par7079, DateTime? par7080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToAscii

		[Sql.Function(Name="pg_catalog.to_ascii", ServerSideOnly=true)]
		public static string ToAscii(string par7087, string par7088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToChar

		[Sql.Function(Name="pg_catalog.to_char", ServerSideOnly=true)]
		public static string ToChar(DateTime? par7111, string par7112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToDate

		[Sql.Function(Name="pg_catalog.to_date", ServerSideOnly=true)]
		public static NpgsqlDate? ToDate(string par7114, string par7115)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToHex

		[Sql.Function(Name="pg_catalog.to_hex", ServerSideOnly=true)]
		public static string ToHex(long? par7119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToJson

		[Sql.Function(Name="pg_catalog.to_json", ServerSideOnly=true)]
		public static string ToJson(object par7121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToJsonb

		[Sql.Function(Name="pg_catalog.to_jsonb", ServerSideOnly=true)]
		public static string ToJsonb(object par7123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToNumber

		[Sql.Function(Name="pg_catalog.to_number", ServerSideOnly=true)]
		public static decimal? ToNumber(string par7125, string par7126)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegclass

		[Sql.Function(Name="pg_catalog.to_regclass", ServerSideOnly=true)]
		public static object ToRegclass(string par7128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegnamespace

		[Sql.Function(Name="pg_catalog.to_regnamespace", ServerSideOnly=true)]
		public static object ToRegnamespace(string par7130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegoper

		[Sql.Function(Name="pg_catalog.to_regoper", ServerSideOnly=true)]
		public static object ToRegoper(string par7132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegoperator

		[Sql.Function(Name="pg_catalog.to_regoperator", ServerSideOnly=true)]
		public static object ToRegoperator(string par7134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegproc

		[Sql.Function(Name="pg_catalog.to_regproc", ServerSideOnly=true)]
		public static object ToRegproc(string par7136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegprocedure

		[Sql.Function(Name="pg_catalog.to_regprocedure", ServerSideOnly=true)]
		public static object ToRegprocedure(string par7138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegrole

		[Sql.Function(Name="pg_catalog.to_regrole", ServerSideOnly=true)]
		public static object ToRegrole(string par7140)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegtype

		[Sql.Function(Name="pg_catalog.to_regtype", ServerSideOnly=true)]
		public static object ToRegtype(string par7142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTimestamp

		[Sql.Function(Name="pg_catalog.to_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? ToTimestamp(string par7146, string par7147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTsquery

		[Sql.Function(Name="pg_catalog.to_tsquery", ServerSideOnly=true)]
		public static object ToTsquery(string par7152)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTsvector

		[Sql.Function(Name="pg_catalog.to_tsvector", ServerSideOnly=true)]
		public static object ToTsvector(object par7166, string par7167)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TransactionTimestamp

		[Sql.Function(Name="pg_catalog.transaction_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? TransactionTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Translate

		[Sql.Function(Name="pg_catalog.translate", ServerSideOnly=true)]
		public static string Translate(string par7170, string par7171, string par7172)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TriggerIn

		[Sql.Function(Name="pg_catalog.trigger_in", ServerSideOnly=true)]
		public static object TriggerIn(object par7174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TriggerOut

		[Sql.Function(Name="pg_catalog.trigger_out", ServerSideOnly=true)]
		public static object TriggerOut(object par7176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Trunc

		[Sql.Function(Name="pg_catalog.trunc", ServerSideOnly=true)]
		public static PhysicalAddress Trunc(PhysicalAddress par7187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsDelete

		[Sql.Function(Name="pg_catalog.ts_delete", ServerSideOnly=true)]
		public static object TsDelete(object par7192, object par7193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsFilter

		[Sql.Function(Name="pg_catalog.ts_filter", ServerSideOnly=true)]
		public static object TsFilter(object par7195, object par7196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsHeadline

		[Sql.Function(Name="pg_catalog.ts_headline", ServerSideOnly=true)]
		public static string TsHeadline(string par7243, object par7244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsLexize

		[Sql.Function(Name="pg_catalog.ts_lexize", ServerSideOnly=true)]
		public static object TsLexize(object par7246, string par7247)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchQv

		[Sql.Function(Name="pg_catalog.ts_match_qv", ServerSideOnly=true)]
		public static bool? TsMatchQv(object par7249, object par7250)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchTq

		[Sql.Function(Name="pg_catalog.ts_match_tq", ServerSideOnly=true)]
		public static bool? TsMatchTq(string par7252, object par7253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchTt

		[Sql.Function(Name="pg_catalog.ts_match_tt", ServerSideOnly=true)]
		public static bool? TsMatchTt(string par7255, string par7256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchVq

		[Sql.Function(Name="pg_catalog.ts_match_vq", ServerSideOnly=true)]
		public static bool? TsMatchVq(object par7258, object par7259)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRank

		[Sql.Function(Name="pg_catalog.ts_rank", ServerSideOnly=true)]
		public static float? TsRank(object par7274, object par7275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRankCd

		[Sql.Function(Name="pg_catalog.ts_rank_cd", ServerSideOnly=true)]
		public static float? TsRankCd(object par7290, object par7291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRewrite

		[Sql.Function(Name="pg_catalog.ts_rewrite", ServerSideOnly=true)]
		public static object TsRewrite(object par7297, string par7298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsTypanalyze

		[Sql.Function(Name="pg_catalog.ts_typanalyze", ServerSideOnly=true)]
		public static bool? TsTypanalyze(object par7300)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsmHandlerIn

		[Sql.Function(Name="pg_catalog.tsm_handler_in", ServerSideOnly=true)]
		public static object TsmHandlerIn(object par7302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsmHandlerOut

		[Sql.Function(Name="pg_catalog.tsm_handler_out", ServerSideOnly=true)]
		public static object TsmHandlerOut(object par7304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsmatchjoinsel

		[Sql.Function(Name="pg_catalog.tsmatchjoinsel", ServerSideOnly=true)]
		public static double? Tsmatchjoinsel(object par7306, int? par7307, object par7308, short? par7309, object par7310)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsmatchsel

		[Sql.Function(Name="pg_catalog.tsmatchsel", ServerSideOnly=true)]
		public static double? Tsmatchsel(object par7312, int? par7313, object par7314, int? par7315)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqMcontained

		[Sql.Function(Name="pg_catalog.tsq_mcontained", ServerSideOnly=true)]
		public static bool? TsqMcontained(object par7317, object par7318)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqMcontains

		[Sql.Function(Name="pg_catalog.tsq_mcontains", ServerSideOnly=true)]
		public static bool? TsqMcontains(object par7320, object par7321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryAnd

		[Sql.Function(Name="pg_catalog.tsquery_and", ServerSideOnly=true)]
		public static object TsqueryAnd(object par7323, object par7324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryCmp

		[Sql.Function(Name="pg_catalog.tsquery_cmp", ServerSideOnly=true)]
		public static int? TsqueryCmp(object par7326, object par7327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryEq

		[Sql.Function(Name="pg_catalog.tsquery_eq", ServerSideOnly=true)]
		public static bool? TsqueryEq(object par7329, object par7330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryGe

		[Sql.Function(Name="pg_catalog.tsquery_ge", ServerSideOnly=true)]
		public static bool? TsqueryGe(object par7332, object par7333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryGt

		[Sql.Function(Name="pg_catalog.tsquery_gt", ServerSideOnly=true)]
		public static bool? TsqueryGt(object par7335, object par7336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryLe

		[Sql.Function(Name="pg_catalog.tsquery_le", ServerSideOnly=true)]
		public static bool? TsqueryLe(object par7338, object par7339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryLt

		[Sql.Function(Name="pg_catalog.tsquery_lt", ServerSideOnly=true)]
		public static bool? TsqueryLt(object par7341, object par7342)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryNe

		[Sql.Function(Name="pg_catalog.tsquery_ne", ServerSideOnly=true)]
		public static bool? TsqueryNe(object par7344, object par7345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryNot

		[Sql.Function(Name="pg_catalog.tsquery_not", ServerSideOnly=true)]
		public static object TsqueryNot(object par7347)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryOr

		[Sql.Function(Name="pg_catalog.tsquery_or", ServerSideOnly=true)]
		public static object TsqueryOr(object par7349, object par7350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryPhrase

		[Sql.Function(Name="pg_catalog.tsquery_phrase", ServerSideOnly=true)]
		public static object TsqueryPhrase(object par7355, object par7356, int? par7357)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryin

		[Sql.Function(Name="pg_catalog.tsqueryin", ServerSideOnly=true)]
		public static object Tsqueryin(object par7359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryout

		[Sql.Function(Name="pg_catalog.tsqueryout", ServerSideOnly=true)]
		public static object Tsqueryout(object par7361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryrecv

		[Sql.Function(Name="pg_catalog.tsqueryrecv", ServerSideOnly=true)]
		public static object Tsqueryrecv(object par7363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsquerysend

		[Sql.Function(Name="pg_catalog.tsquerysend", ServerSideOnly=true)]
		public static byte[] Tsquerysend(object par7365)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsrange

		[Sql.Function(Name="pg_catalog.tsrange", ServerSideOnly=true)]
		public static object Tsrange(DateTime? par7370, DateTime? par7371, string par7372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsrangeSubdiff

		[Sql.Function(Name="pg_catalog.tsrange_subdiff", ServerSideOnly=true)]
		public static double? TsrangeSubdiff(DateTime? par7374, DateTime? par7375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tstzrange

		[Sql.Function(Name="pg_catalog.tstzrange", ServerSideOnly=true)]
		public static object Tstzrange(DateTimeOffset? par7380, DateTimeOffset? par7381, string par7382)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TstzrangeSubdiff

		[Sql.Function(Name="pg_catalog.tstzrange_subdiff", ServerSideOnly=true)]
		public static double? TstzrangeSubdiff(DateTimeOffset? par7384, DateTimeOffset? par7385)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorCmp

		[Sql.Function(Name="pg_catalog.tsvector_cmp", ServerSideOnly=true)]
		public static int? TsvectorCmp(object par7387, object par7388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorConcat

		[Sql.Function(Name="pg_catalog.tsvector_concat", ServerSideOnly=true)]
		public static object TsvectorConcat(object par7390, object par7391)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorEq

		[Sql.Function(Name="pg_catalog.tsvector_eq", ServerSideOnly=true)]
		public static bool? TsvectorEq(object par7393, object par7394)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorGe

		[Sql.Function(Name="pg_catalog.tsvector_ge", ServerSideOnly=true)]
		public static bool? TsvectorGe(object par7396, object par7397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorGt

		[Sql.Function(Name="pg_catalog.tsvector_gt", ServerSideOnly=true)]
		public static bool? TsvectorGt(object par7399, object par7400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorLe

		[Sql.Function(Name="pg_catalog.tsvector_le", ServerSideOnly=true)]
		public static bool? TsvectorLe(object par7402, object par7403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorLt

		[Sql.Function(Name="pg_catalog.tsvector_lt", ServerSideOnly=true)]
		public static bool? TsvectorLt(object par7405, object par7406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorNe

		[Sql.Function(Name="pg_catalog.tsvector_ne", ServerSideOnly=true)]
		public static bool? TsvectorNe(object par7408, object par7409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorToArray

		[Sql.Function(Name="pg_catalog.tsvector_to_array", ServerSideOnly=true)]
		public static object TsvectorToArray(object par7411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorUpdateTrigger

		[Sql.Function(Name="pg_catalog.tsvector_update_trigger", ServerSideOnly=true)]
		public static object TsvectorUpdateTrigger()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorUpdateTriggerColumn

		[Sql.Function(Name="pg_catalog.tsvector_update_trigger_column", ServerSideOnly=true)]
		public static object TsvectorUpdateTriggerColumn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorin

		[Sql.Function(Name="pg_catalog.tsvectorin", ServerSideOnly=true)]
		public static object Tsvectorin(object par7415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorout

		[Sql.Function(Name="pg_catalog.tsvectorout", ServerSideOnly=true)]
		public static object Tsvectorout(object par7417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorrecv

		[Sql.Function(Name="pg_catalog.tsvectorrecv", ServerSideOnly=true)]
		public static object Tsvectorrecv(object par7419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorsend

		[Sql.Function(Name="pg_catalog.tsvectorsend", ServerSideOnly=true)]
		public static byte[] Tsvectorsend(object par7421)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrent

		[Sql.Function(Name="pg_catalog.txid_current", ServerSideOnly=true)]
		public static long? TxidCurrent()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrentIfAssigned

		[Sql.Function(Name="pg_catalog.txid_current_if_assigned", ServerSideOnly=true)]
		public static long? TxidCurrentIfAssigned()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrentSnapshot

		[Sql.Function(Name="pg_catalog.txid_current_snapshot", ServerSideOnly=true)]
		public static object TxidCurrentSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotIn

		[Sql.Function(Name="pg_catalog.txid_snapshot_in", ServerSideOnly=true)]
		public static object TxidSnapshotIn(object par7426)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotOut

		[Sql.Function(Name="pg_catalog.txid_snapshot_out", ServerSideOnly=true)]
		public static object TxidSnapshotOut(object par7428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotRecv

		[Sql.Function(Name="pg_catalog.txid_snapshot_recv", ServerSideOnly=true)]
		public static object TxidSnapshotRecv(object par7430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotSend

		[Sql.Function(Name="pg_catalog.txid_snapshot_send", ServerSideOnly=true)]
		public static byte[] TxidSnapshotSend(object par7432)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotXmax

		[Sql.Function(Name="pg_catalog.txid_snapshot_xmax", ServerSideOnly=true)]
		public static long? TxidSnapshotXmax(object par7435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotXmin

		[Sql.Function(Name="pg_catalog.txid_snapshot_xmin", ServerSideOnly=true)]
		public static long? TxidSnapshotXmin(object par7437)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidStatus

		[Sql.Function(Name="pg_catalog.txid_status", ServerSideOnly=true)]
		public static string TxidStatus(long? par7439)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidVisibleInSnapshot

		[Sql.Function(Name="pg_catalog.txid_visible_in_snapshot", ServerSideOnly=true)]
		public static bool? TxidVisibleInSnapshot(long? par7441, object par7442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UhcToUtf8

		[Sql.Function(Name="pg_catalog.uhc_to_utf8", ServerSideOnly=true)]
		public static object UhcToUtf8(int? par7443, int? par7444, object par7445, object par7446, int? par7447)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UniqueKeyRecheck

		[Sql.Function(Name="pg_catalog.unique_key_recheck", ServerSideOnly=true)]
		public static object UniqueKeyRecheck()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownin

		[Sql.Function(Name="pg_catalog.unknownin", ServerSideOnly=true)]
		public static object Unknownin(object par7450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownout

		[Sql.Function(Name="pg_catalog.unknownout", ServerSideOnly=true)]
		public static object Unknownout(object par7452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownrecv

		[Sql.Function(Name="pg_catalog.unknownrecv", ServerSideOnly=true)]
		public static object Unknownrecv(object par7454)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownsend

		[Sql.Function(Name="pg_catalog.unknownsend", ServerSideOnly=true)]
		public static byte[] Unknownsend(object par7456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Upper

		[Sql.Function(Name="pg_catalog.upper", ServerSideOnly=true)]
		public static string Upper(string par7461)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpperInc

		[Sql.Function(Name="pg_catalog.upper_inc", ServerSideOnly=true)]
		public static bool? UpperInc(object par7463)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpperInf

		[Sql.Function(Name="pg_catalog.upper_inf", ServerSideOnly=true)]
		public static bool? UpperInf(object par7465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToAscii

		[Sql.Function(Name="pg_catalog.utf8_to_ascii", ServerSideOnly=true)]
		public static object Utf8ToAscii(int? par7466, int? par7467, object par7468, object par7469, int? par7470)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToBig5

		[Sql.Function(Name="pg_catalog.utf8_to_big5", ServerSideOnly=true)]
		public static object Utf8ToBig5(int? par7471, int? par7472, object par7473, object par7474, int? par7475)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucCn

		[Sql.Function(Name="pg_catalog.utf8_to_euc_cn", ServerSideOnly=true)]
		public static object Utf8ToEucCn(int? par7476, int? par7477, object par7478, object par7479, int? par7480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucJis2004

		[Sql.Function(Name="pg_catalog.utf8_to_euc_jis_2004", ServerSideOnly=true)]
		public static object Utf8ToEucJis2004(int? par7481, int? par7482, object par7483, object par7484, int? par7485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucJp

		[Sql.Function(Name="pg_catalog.utf8_to_euc_jp", ServerSideOnly=true)]
		public static object Utf8ToEucJp(int? par7486, int? par7487, object par7488, object par7489, int? par7490)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucKr

		[Sql.Function(Name="pg_catalog.utf8_to_euc_kr", ServerSideOnly=true)]
		public static object Utf8ToEucKr(int? par7491, int? par7492, object par7493, object par7494, int? par7495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucTw

		[Sql.Function(Name="pg_catalog.utf8_to_euc_tw", ServerSideOnly=true)]
		public static object Utf8ToEucTw(int? par7496, int? par7497, object par7498, object par7499, int? par7500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToGb18030

		[Sql.Function(Name="pg_catalog.utf8_to_gb18030", ServerSideOnly=true)]
		public static object Utf8ToGb18030(int? par7501, int? par7502, object par7503, object par7504, int? par7505)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToGbk

		[Sql.Function(Name="pg_catalog.utf8_to_gbk", ServerSideOnly=true)]
		public static object Utf8ToGbk(int? par7506, int? par7507, object par7508, object par7509, int? par7510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToIso88591

		[Sql.Function(Name="pg_catalog.utf8_to_iso8859_1", ServerSideOnly=true)]
		public static object Utf8ToIso88591(int? par7511, int? par7512, object par7513, object par7514, int? par7515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToIso8859

		[Sql.Function(Name="pg_catalog.utf8_to_iso8859", ServerSideOnly=true)]
		public static object Utf8ToIso8859(int? par7516, int? par7517, object par7518, object par7519, int? par7520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToJohab

		[Sql.Function(Name="pg_catalog.utf8_to_johab", ServerSideOnly=true)]
		public static object Utf8ToJohab(int? par7521, int? par7522, object par7523, object par7524, int? par7525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToKoi8r

		[Sql.Function(Name="pg_catalog.utf8_to_koi8r", ServerSideOnly=true)]
		public static object Utf8ToKoi8r(int? par7526, int? par7527, object par7528, object par7529, int? par7530)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToKoi8u

		[Sql.Function(Name="pg_catalog.utf8_to_koi8u", ServerSideOnly=true)]
		public static object Utf8ToKoi8u(int? par7531, int? par7532, object par7533, object par7534, int? par7535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToShiftJis2004

		[Sql.Function(Name="pg_catalog.utf8_to_shift_jis_2004", ServerSideOnly=true)]
		public static object Utf8ToShiftJis2004(int? par7536, int? par7537, object par7538, object par7539, int? par7540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToSjis

		[Sql.Function(Name="pg_catalog.utf8_to_sjis", ServerSideOnly=true)]
		public static object Utf8ToSjis(int? par7541, int? par7542, object par7543, object par7544, int? par7545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToUhc

		[Sql.Function(Name="pg_catalog.utf8_to_uhc", ServerSideOnly=true)]
		public static object Utf8ToUhc(int? par7546, int? par7547, object par7548, object par7549, int? par7550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToWin

		[Sql.Function(Name="pg_catalog.utf8_to_win", ServerSideOnly=true)]
		public static object Utf8ToWin(int? par7551, int? par7552, object par7553, object par7554, int? par7555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidCmp

		[Sql.Function(Name="pg_catalog.uuid_cmp", ServerSideOnly=true)]
		public static int? UuidCmp(Guid? par7557, Guid? par7558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidEq

		[Sql.Function(Name="pg_catalog.uuid_eq", ServerSideOnly=true)]
		public static bool? UuidEq(Guid? par7560, Guid? par7561)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidGe

		[Sql.Function(Name="pg_catalog.uuid_ge", ServerSideOnly=true)]
		public static bool? UuidGe(Guid? par7563, Guid? par7564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidGt

		[Sql.Function(Name="pg_catalog.uuid_gt", ServerSideOnly=true)]
		public static bool? UuidGt(Guid? par7566, Guid? par7567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidHash

		[Sql.Function(Name="pg_catalog.uuid_hash", ServerSideOnly=true)]
		public static int? UuidHash(Guid? par7569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidHashExtended

		[Sql.Function(Name="pg_catalog.uuid_hash_extended", ServerSideOnly=true)]
		public static long? UuidHashExtended(Guid? par7571, long? par7572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidIn

		[Sql.Function(Name="pg_catalog.uuid_in", ServerSideOnly=true)]
		public static Guid? UuidIn(object par7574)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidLe

		[Sql.Function(Name="pg_catalog.uuid_le", ServerSideOnly=true)]
		public static bool? UuidLe(Guid? par7576, Guid? par7577)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidLt

		[Sql.Function(Name="pg_catalog.uuid_lt", ServerSideOnly=true)]
		public static bool? UuidLt(Guid? par7579, Guid? par7580)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidNe

		[Sql.Function(Name="pg_catalog.uuid_ne", ServerSideOnly=true)]
		public static bool? UuidNe(Guid? par7582, Guid? par7583)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidOut

		[Sql.Function(Name="pg_catalog.uuid_out", ServerSideOnly=true)]
		public static object UuidOut(Guid? par7585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidRecv

		[Sql.Function(Name="pg_catalog.uuid_recv", ServerSideOnly=true)]
		public static Guid? UuidRecv(object par7587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidSend

		[Sql.Function(Name="pg_catalog.uuid_send", ServerSideOnly=true)]
		public static byte[] UuidSend(Guid? par7589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidSortsupport

		[Sql.Function(Name="pg_catalog.uuid_sortsupport", ServerSideOnly=true)]
		public static object UuidSortsupport(object par7590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarPop

		[Sql.Function(Name="pg_catalog.var_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? VarPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7602)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarSamp

		[Sql.Function(Name="pg_catalog.var_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? VarSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7614)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbit

		[Sql.Function(Name="pg_catalog.varbit", ServerSideOnly=true)]
		public static BitArray Varbit(BitArray par7616, int? par7617, bool? par7618)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitIn

		[Sql.Function(Name="pg_catalog.varbit_in", ServerSideOnly=true)]
		public static BitArray VarbitIn(object par7620, int? par7621, int? par7622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitOut

		[Sql.Function(Name="pg_catalog.varbit_out", ServerSideOnly=true)]
		public static object VarbitOut(BitArray par7624)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitRecv

		[Sql.Function(Name="pg_catalog.varbit_recv", ServerSideOnly=true)]
		public static BitArray VarbitRecv(object par7626, int? par7627, int? par7628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitSend

		[Sql.Function(Name="pg_catalog.varbit_send", ServerSideOnly=true)]
		public static byte[] VarbitSend(BitArray par7630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitSupport

		[Sql.Function(Name="pg_catalog.varbit_support", ServerSideOnly=true)]
		public static object VarbitSupport(object par7632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitcmp

		[Sql.Function(Name="pg_catalog.varbitcmp", ServerSideOnly=true)]
		public static int? Varbitcmp(BitArray par7634, BitArray par7635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbiteq

		[Sql.Function(Name="pg_catalog.varbiteq", ServerSideOnly=true)]
		public static bool? Varbiteq(BitArray par7637, BitArray par7638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitge

		[Sql.Function(Name="pg_catalog.varbitge", ServerSideOnly=true)]
		public static bool? Varbitge(BitArray par7640, BitArray par7641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitgt

		[Sql.Function(Name="pg_catalog.varbitgt", ServerSideOnly=true)]
		public static bool? Varbitgt(BitArray par7643, BitArray par7644)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitle

		[Sql.Function(Name="pg_catalog.varbitle", ServerSideOnly=true)]
		public static bool? Varbitle(BitArray par7646, BitArray par7647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitlt

		[Sql.Function(Name="pg_catalog.varbitlt", ServerSideOnly=true)]
		public static bool? Varbitlt(BitArray par7649, BitArray par7650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitne

		[Sql.Function(Name="pg_catalog.varbitne", ServerSideOnly=true)]
		public static bool? Varbitne(BitArray par7652, BitArray par7653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbittypmodin

		[Sql.Function(Name="pg_catalog.varbittypmodin", ServerSideOnly=true)]
		public static int? Varbittypmodin(object par7655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbittypmodout

		[Sql.Function(Name="pg_catalog.varbittypmodout", ServerSideOnly=true)]
		public static object Varbittypmodout(int? par7657)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchar

		[Sql.Function(Name="pg_catalog.varchar", ServerSideOnly=true)]
		public static string Varchar(string par7661, int? par7662, bool? par7663)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarcharSupport

		[Sql.Function(Name="pg_catalog.varchar_support", ServerSideOnly=true)]
		public static object VarcharSupport(object par7665)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharin

		[Sql.Function(Name="pg_catalog.varcharin", ServerSideOnly=true)]
		public static string Varcharin(object par7667, int? par7668, int? par7669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharout

		[Sql.Function(Name="pg_catalog.varcharout", ServerSideOnly=true)]
		public static object Varcharout(string par7671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharrecv

		[Sql.Function(Name="pg_catalog.varcharrecv", ServerSideOnly=true)]
		public static string Varcharrecv(object par7673, int? par7674, int? par7675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharsend

		[Sql.Function(Name="pg_catalog.varcharsend", ServerSideOnly=true)]
		public static byte[] Varcharsend(string par7677)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchartypmodin

		[Sql.Function(Name="pg_catalog.varchartypmodin", ServerSideOnly=true)]
		public static int? Varchartypmodin(object par7679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchartypmodout

		[Sql.Function(Name="pg_catalog.varchartypmodout", ServerSideOnly=true)]
		public static object Varchartypmodout(int? par7681)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Variance

		[Sql.Function(Name="pg_catalog.variance", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Variance<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Version

		[Sql.Function(Name="pg_catalog.version", ServerSideOnly=true)]
		public static string Version()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidIn

		[Sql.Function(Name="pg_catalog.void_in", ServerSideOnly=true)]
		public static object VoidIn(object par7695)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidOut

		[Sql.Function(Name="pg_catalog.void_out", ServerSideOnly=true)]
		public static object VoidOut(object par7697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidRecv

		[Sql.Function(Name="pg_catalog.void_recv", ServerSideOnly=true)]
		public static object VoidRecv(object par7698)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidSend

		[Sql.Function(Name="pg_catalog.void_send", ServerSideOnly=true)]
		public static byte[] VoidSend(object par7700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WebsearchToTsquery

		[Sql.Function(Name="pg_catalog.websearch_to_tsquery", ServerSideOnly=true)]
		public static object WebsearchToTsquery(string par7705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Width

		[Sql.Function(Name="pg_catalog.width", ServerSideOnly=true)]
		public static double? Width(NpgsqlBox? par7707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WidthBucket

		[Sql.Function(Name="pg_catalog.width_bucket", ServerSideOnly=true)]
		public static int? WidthBucket(object par7719, object par7720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1250ToLatin2

		[Sql.Function(Name="pg_catalog.win1250_to_latin2", ServerSideOnly=true)]
		public static object Win1250ToLatin2(int? par7721, int? par7722, object par7723, object par7724, int? par7725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1250ToMic

		[Sql.Function(Name="pg_catalog.win1250_to_mic", ServerSideOnly=true)]
		public static object Win1250ToMic(int? par7726, int? par7727, object par7728, object par7729, int? par7730)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToIso

		[Sql.Function(Name="pg_catalog.win1251_to_iso", ServerSideOnly=true)]
		public static object Win1251ToIso(int? par7731, int? par7732, object par7733, object par7734, int? par7735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToKoi8r

		[Sql.Function(Name="pg_catalog.win1251_to_koi8r", ServerSideOnly=true)]
		public static object Win1251ToKoi8r(int? par7736, int? par7737, object par7738, object par7739, int? par7740)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToMic

		[Sql.Function(Name="pg_catalog.win1251_to_mic", ServerSideOnly=true)]
		public static object Win1251ToMic(int? par7741, int? par7742, object par7743, object par7744, int? par7745)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToWin866

		[Sql.Function(Name="pg_catalog.win1251_to_win866", ServerSideOnly=true)]
		public static object Win1251ToWin866(int? par7746, int? par7747, object par7748, object par7749, int? par7750)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToIso

		[Sql.Function(Name="pg_catalog.win866_to_iso", ServerSideOnly=true)]
		public static object Win866ToIso(int? par7751, int? par7752, object par7753, object par7754, int? par7755)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToKoi8r

		[Sql.Function(Name="pg_catalog.win866_to_koi8r", ServerSideOnly=true)]
		public static object Win866ToKoi8r(int? par7756, int? par7757, object par7758, object par7759, int? par7760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToMic

		[Sql.Function(Name="pg_catalog.win866_to_mic", ServerSideOnly=true)]
		public static object Win866ToMic(int? par7761, int? par7762, object par7763, object par7764, int? par7765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToWin1251

		[Sql.Function(Name="pg_catalog.win866_to_win1251", ServerSideOnly=true)]
		public static object Win866ToWin1251(int? par7766, int? par7767, object par7768, object par7769, int? par7770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WinToUtf8

		[Sql.Function(Name="pg_catalog.win_to_utf8", ServerSideOnly=true)]
		public static object WinToUtf8(int? par7771, int? par7772, object par7773, object par7774, int? par7775)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xideq

		[Sql.Function(Name="pg_catalog.xideq", ServerSideOnly=true)]
		public static bool? Xideq(int? par7777, int? par7778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xideqint4

		[Sql.Function(Name="pg_catalog.xideqint4", ServerSideOnly=true)]
		public static bool? Xideqint4(int? par7780, int? par7781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidin

		[Sql.Function(Name="pg_catalog.xidin", ServerSideOnly=true)]
		public static int? Xidin(object par7783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidneq

		[Sql.Function(Name="pg_catalog.xidneq", ServerSideOnly=true)]
		public static bool? Xidneq(int? par7785, int? par7786)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidneqint4

		[Sql.Function(Name="pg_catalog.xidneqint4", ServerSideOnly=true)]
		public static bool? Xidneqint4(int? par7788, int? par7789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidout

		[Sql.Function(Name="pg_catalog.xidout", ServerSideOnly=true)]
		public static object Xidout(int? par7791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidrecv

		[Sql.Function(Name="pg_catalog.xidrecv", ServerSideOnly=true)]
		public static int? Xidrecv(object par7793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidsend

		[Sql.Function(Name="pg_catalog.xidsend", ServerSideOnly=true)]
		public static byte[] Xidsend(int? par7795)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xml

		[Sql.Function(Name="pg_catalog.xml", ServerSideOnly=true)]
		public static string Xml(string par7797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIn

		[Sql.Function(Name="pg_catalog.xml_in", ServerSideOnly=true)]
		public static string XmlIn(object par7799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormed

		[Sql.Function(Name="pg_catalog.xml_is_well_formed", ServerSideOnly=true)]
		public static bool? XmlIsWellFormed(string par7801)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormedContent

		[Sql.Function(Name="pg_catalog.xml_is_well_formed_content", ServerSideOnly=true)]
		public static bool? XmlIsWellFormedContent(string par7803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormedDocument

		[Sql.Function(Name="pg_catalog.xml_is_well_formed_document", ServerSideOnly=true)]
		public static bool? XmlIsWellFormedDocument(string par7805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlOut

		[Sql.Function(Name="pg_catalog.xml_out", ServerSideOnly=true)]
		public static object XmlOut(string par7807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlRecv

		[Sql.Function(Name="pg_catalog.xml_recv", ServerSideOnly=true)]
		public static string XmlRecv(object par7809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlSend

		[Sql.Function(Name="pg_catalog.xml_send", ServerSideOnly=true)]
		public static byte[] XmlSend(string par7811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlagg

		[Sql.Function(Name="pg_catalog.xmlagg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string Xmlagg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, string>> par7813)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlcomment

		[Sql.Function(Name="pg_catalog.xmlcomment", ServerSideOnly=true)]
		public static string Xmlcomment(string par7815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlconcat2

		[Sql.Function(Name="pg_catalog.xmlconcat2", ServerSideOnly=true)]
		public static string Xmlconcat2(string par7817, string par7818)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlexists

		[Sql.Function(Name="pg_catalog.xmlexists", ServerSideOnly=true)]
		public static bool? Xmlexists(string par7820, string par7821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlvalidate

		[Sql.Function(Name="pg_catalog.xmlvalidate", ServerSideOnly=true)]
		public static bool? Xmlvalidate(string par7823, string par7824)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xpath

		[Sql.Function(Name="pg_catalog.xpath", ServerSideOnly=true)]
		public static object Xpath(string par7830, string par7831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XpathExists

		[Sql.Function(Name="pg_catalog.xpath_exists", ServerSideOnly=true)]
		public static bool? XpathExists(string par7837, string par7838)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Department Find(this ITable<Department> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Employee Find(this ITable<Employee> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EmployeeSkill Find(this ITable<EmployeeSkill> table, long EmployeeId, long SkillId)
		{
			return table.FirstOrDefault(t =>
				t.EmployeeId == EmployeeId &&
				t.SkillId    == SkillId);
		}

		public static Position Find(this ITable<Position> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Skill Find(this ITable<Skill> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
